(()=>{"use strict";var t={26:(t,e,i)=>{const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function r(t,e,i,n){let r,o,s;const a=e||[0],l=(i=i||0)>>>3,c=-1===n?3:0;for(r=0;r<t.length;r+=1)s=r+l,o=s>>>2,a.length<=o&&a.push(0),a[o]|=t[r]<<8*(c+n*(s%4));return{value:a,binLen:8*t.length+i}}function o(t,e,i){switch(e){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(t){case"HEX":return function(t,e,n){return function(t,e,i,n){let r,o,s,a;if(0!=t.length%2)throw new Error("String of HEX type must be in byte increments");const l=e||[0],c=(i=i||0)>>>3,h=-1===n?3:0;for(r=0;r<t.length;r+=2){if(o=parseInt(t.substr(r,2),16),isNaN(o))throw new Error("String of HEX type contains invalid characters");for(a=(r>>>1)+c,s=a>>>2;l.length<=s;)l.push(0);l[s]|=o<<8*(h+n*(a%4))}return{value:l,binLen:4*t.length+i}}(t,e,n,i)};case"TEXT":return function(t,n,r){return function(t,e,i,n,r){let o,s,a,l,c,h,u,d,f=0;const p=i||[0],g=(n=n||0)>>>3;if("UTF8"===e)for(u=-1===r?3:0,a=0;a<t.length;a+=1)for(o=t.charCodeAt(a),s=[],128>o?s.push(o):2048>o?(s.push(192|o>>>6),s.push(128|63&o)):55296>o||57344<=o?s.push(224|o>>>12,128|o>>>6&63,128|63&o):(a+=1,o=65536+((1023&o)<<10|1023&t.charCodeAt(a)),s.push(240|o>>>18,128|o>>>12&63,128|o>>>6&63,128|63&o)),l=0;l<s.length;l+=1){for(h=f+g,c=h>>>2;p.length<=c;)p.push(0);p[c]|=s[l]<<8*(u+r*(h%4)),f+=1}else for(u=-1===r?2:0,d="UTF16LE"===e&&1!==r||"UTF16LE"!==e&&1===r,a=0;a<t.length;a+=1){for(o=t.charCodeAt(a),!0===d&&(l=255&o,o=l<<8|o>>>8),h=f+g,c=h>>>2;p.length<=c;)p.push(0);p[c]|=o<<8*(u+r*(h%4)),f+=2}return{value:p,binLen:8*f+n}}(t,e,n,r,i)};case"B64":return function(t,e,r){return function(t,e,i,r){let o,s,a,l,c,h,u,d=0;const f=e||[0],p=(i=i||0)>>>3,g=-1===r?3:0,m=t.indexOf("=");if(-1===t.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(t=t.replace(/=/g,""),-1!==m&&m<t.length)throw new Error("Invalid '=' found in base-64 string");for(s=0;s<t.length;s+=4){for(c=t.substr(s,4),l=0,a=0;a<c.length;a+=1)o=n.indexOf(c.charAt(a)),l|=o<<18-6*a;for(a=0;a<c.length-1;a+=1){for(u=d+p,h=u>>>2;f.length<=h;)f.push(0);f[h]|=(l>>>16-8*a&255)<<8*(g+r*(u%4)),d+=1}}return{value:f,binLen:8*d+i}}(t,e,r,i)};case"BYTES":return function(t,e,n){return function(t,e,i,n){let r,o,s,a;const l=e||[0],c=(i=i||0)>>>3,h=-1===n?3:0;for(o=0;o<t.length;o+=1)r=t.charCodeAt(o),a=o+c,s=a>>>2,l.length<=s&&l.push(0),l[s]|=r<<8*(h+n*(a%4));return{value:l,binLen:8*t.length+i}}(t,e,n,i)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t,e,n){return function(t,e,i,n){return r(new Uint8Array(t),e,i,n)}(t,e,n,i)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t,e,n){return r(t,e,n,i)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function s(t,e,i,r){switch(t){case"HEX":return function(t){return function(t,e,i,n){const r="0123456789abcdef";let o,s,a="";const l=e/8,c=-1===i?3:0;for(o=0;o<l;o+=1)s=t[o>>>2]>>>8*(c+i*(o%4)),a+=r.charAt(s>>>4&15)+r.charAt(15&s);return n.outputUpper?a.toUpperCase():a}(t,e,i,r)};case"B64":return function(t){return function(t,e,i,r){let o,s,a,l,c,h="";const u=e/8,d=-1===i?3:0;for(o=0;o<u;o+=3)for(l=o+1<u?t[o+1>>>2]:0,c=o+2<u?t[o+2>>>2]:0,a=(t[o>>>2]>>>8*(d+i*(o%4))&255)<<16|(l>>>8*(d+i*((o+1)%4))&255)<<8|c>>>8*(d+i*((o+2)%4))&255,s=0;s<4;s+=1)h+=8*o+6*s<=e?n.charAt(a>>>6*(3-s)&63):r.b64Pad;return h}(t,e,i,r)};case"BYTES":return function(t){return function(t,e,i){let n,r,o="";const s=e/8,a=-1===i?3:0;for(n=0;n<s;n+=1)r=t[n>>>2]>>>8*(a+i*(n%4))&255,o+=String.fromCharCode(r);return o}(t,e,i)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t){return function(t,e,i){let n;const r=e/8,o=new ArrayBuffer(r),s=new Uint8Array(o),a=-1===i?3:0;for(n=0;n<r;n+=1)s[n]=t[n>>>2]>>>8*(a+i*(n%4))&255;return o}(t,e,i)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t){return function(t,e,i){let n;const r=e/8,o=-1===i?3:0,s=new Uint8Array(r);for(n=0;n<r;n+=1)s[n]=t[n>>>2]>>>8*(o+i*(n%4))&255;return s}(t,e,i)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}const a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],l=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],c=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],h="Chosen SHA variant is not supported";function u(t,e){let i,n;const r=t.binLen>>>3,o=e.binLen>>>3,s=r<<3,a=4-r<<3;if(r%4!=0){for(i=0;i<o;i+=4)n=r+i>>>2,t.value[n]|=e.value[i>>>2]<<s,t.value.push(0),t.value[n+1]|=e.value[i>>>2]>>>a;return(t.value.length<<2)-4>=o+r&&t.value.pop(),{value:t.value,binLen:t.binLen+e.binLen}}return{value:t.value.concat(e.value),binLen:t.binLen+e.binLen}}function d(t){const e={outputUpper:!1,b64Pad:"=",outputLen:-1},i=t||{},n="Output length must be a multiple of 8";if(e.outputUpper=i.outputUpper||!1,i.b64Pad&&(e.b64Pad=i.b64Pad),i.outputLen){if(i.outputLen%8!=0)throw new Error(n);e.outputLen=i.outputLen}else if(i.shakeLen){if(i.shakeLen%8!=0)throw new Error(n);e.outputLen=i.shakeLen}if("boolean"!=typeof e.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof e.b64Pad)throw new Error("Invalid b64Pad formatting option");return e}function f(t,e,i,n){const r=t+" must include a value and format";if(!e){if(!n)throw new Error(r);return n}if(void 0===e.value||!e.format)throw new Error(r);return o(e.format,e.encoding||"UTF8",i)(e.value)}class p{constructor(t,e,i){const n=i||{};if(this.t=e,this.i=n.encoding||"UTF8",this.numRounds=n.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.o=t,this.h=[],this.u=0,this.l=!1,this.A=0,this.H=!1,this.S=[],this.p=[]}update(t){let e,i=0;const n=this.m>>>5,r=this.C(t,this.h,this.u),o=r.binLen,s=r.value,a=o>>>5;for(e=0;e<a;e+=n)i+this.m<=o&&(this.R=this.U(s.slice(e,e+n),this.R),i+=this.m);return this.A+=i,this.h=s.slice(i>>>5),this.u=o%this.m,this.l=!0,this}getHash(t,e){let i,n,r=this.v;const o=d(e);if(this.K){if(-1===o.outputLen)throw new Error("Output length must be specified in options");r=o.outputLen}const a=s(t,r,this.T,o);if(this.H&&this.F)return a(this.F(o));for(n=this.g(this.h.slice(),this.u,this.A,this.B(this.R),r),i=1;i<this.numRounds;i+=1)this.K&&r%32!=0&&(n[n.length-1]&=16777215>>>24-r%32),n=this.g(n,r,0,this.L(this.o),r);return a(n)}setHMACKey(t,e,i){if(!this.M)throw new Error("Variant does not support HMAC");if(this.l)throw new Error("Cannot set MAC key after calling update");const n=o(e,(i||{}).encoding||"UTF8",this.T);this.k(n(t))}k(t){const e=this.m>>>3,i=e/4-1;let n;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.H)throw new Error("MAC key already set");for(e<t.binLen/8&&(t.value=this.g(t.value,t.binLen,0,this.L(this.o),this.v));t.value.length<=i;)t.value.push(0);for(n=0;n<=i;n+=1)this.S[n]=909522486^t.value[n],this.p[n]=1549556828^t.value[n];this.R=this.U(this.S,this.R),this.A=this.m,this.H=!0}getHMAC(t,e){const i=d(e);return s(t,this.v,this.T,i)(this.Y())}Y(){let t;if(!this.H)throw new Error("Cannot call getHMAC without first setting MAC key");const e=this.g(this.h.slice(),this.u,this.A,this.B(this.R),this.v);return t=this.U(this.p,this.L(this.o)),t=this.g(e,this.v,this.m,t,this.v),t}}function g(t,e){return t<<e|t>>>32-e}function m(t,e){return t>>>e|t<<32-e}function y(t,e){return t>>>e}function b(t,e,i){return t^e^i}function v(t,e,i){return t&e^~t&i}function x(t,e,i){return t&e^t&i^e&i}function w(t){return m(t,2)^m(t,13)^m(t,22)}function _(t,e){const i=(65535&t)+(65535&e);return(65535&(t>>>16)+(e>>>16)+(i>>>16))<<16|65535&i}function k(t,e,i,n){const r=(65535&t)+(65535&e)+(65535&i)+(65535&n);return(65535&(t>>>16)+(e>>>16)+(i>>>16)+(n>>>16)+(r>>>16))<<16|65535&r}function S(t,e,i,n,r){const o=(65535&t)+(65535&e)+(65535&i)+(65535&n)+(65535&r);return(65535&(t>>>16)+(e>>>16)+(i>>>16)+(n>>>16)+(r>>>16)+(o>>>16))<<16|65535&o}function O(t){return m(t,7)^m(t,18)^y(t,3)}function M(t){return m(t,6)^m(t,11)^m(t,25)}function A(t){return[1732584193,4023233417,2562383102,271733878,3285377520]}function P(t,e){let i,n,r,o,s,a,l;const c=[];for(i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],l=0;l<80;l+=1)c[l]=l<16?t[l]:g(c[l-3]^c[l-8]^c[l-14]^c[l-16],1),a=l<20?S(g(i,5),v(n,r,o),s,1518500249,c[l]):l<40?S(g(i,5),b(n,r,o),s,1859775393,c[l]):l<60?S(g(i,5),x(n,r,o),s,2400959708,c[l]):S(g(i,5),b(n,r,o),s,3395469782,c[l]),s=o,o=r,r=g(n,30),n=i,i=a;return e[0]=_(i,e[0]),e[1]=_(n,e[1]),e[2]=_(r,e[2]),e[3]=_(o,e[3]),e[4]=_(s,e[4]),e}function C(t,e,i,n){let r;const o=15+(e+65>>>9<<4),s=e+i;for(;t.length<=o;)t.push(0);for(t[e>>>5]|=128<<24-e%32,t[o]=4294967295&s,t[o-1]=s/4294967296|0,r=0;r<t.length;r+=16)n=P(t.slice(r,r+16),n);return n}class E extends p{constructor(t,e,i){if("SHA-1"!==t)throw new Error(h);super(t,e,i);const n=i||{};this.M=!0,this.F=this.Y,this.T=-1,this.C=o(this.t,this.i,this.T),this.U=P,this.B=function(t){return t.slice()},this.L=A,this.g=C,this.R=[1732584193,4023233417,2562383102,271733878,3285377520],this.m=512,this.v=160,this.K=!1,n.hmacKey&&this.k(f("hmacKey",n.hmacKey,this.T))}}function L(t){let e;return e="SHA-224"==t?l.slice():c.slice(),e}function R(t,e){let i,n,r,o,s,l,c,h,u,d,f;const p=[];for(i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],l=e[5],c=e[6],h=e[7],f=0;f<64;f+=1)p[f]=f<16?t[f]:k(m(g=p[f-2],17)^m(g,19)^y(g,10),p[f-7],O(p[f-15]),p[f-16]),u=S(h,M(s),v(s,l,c),a[f],p[f]),d=_(w(i),x(i,n,r)),h=c,c=l,l=s,s=_(o,u),o=r,r=n,n=i,i=_(u,d);var g;return e[0]=_(i,e[0]),e[1]=_(n,e[1]),e[2]=_(r,e[2]),e[3]=_(o,e[3]),e[4]=_(s,e[4]),e[5]=_(l,e[5]),e[6]=_(c,e[6]),e[7]=_(h,e[7]),e}class D extends p{constructor(t,e,i){if("SHA-224"!==t&&"SHA-256"!==t)throw new Error(h);super(t,e,i);const n=i||{};this.F=this.Y,this.M=!0,this.T=-1,this.C=o(this.t,this.i,this.T),this.U=R,this.B=function(t){return t.slice()},this.L=L,this.g=function(e,i,n,r){return function(t,e,i,n,r){let o,s;const a=15+(e+65>>>9<<4),l=e+i;for(;t.length<=a;)t.push(0);for(t[e>>>5]|=128<<24-e%32,t[a]=4294967295&l,t[a-1]=l/4294967296|0,o=0;o<t.length;o+=16)n=R(t.slice(o,o+16),n);return s="SHA-224"===r?[n[0],n[1],n[2],n[3],n[4],n[5],n[6]]:n,s}(e,i,n,r,t)},this.R=L(t),this.m=512,this.v="SHA-224"===t?224:256,this.K=!1,n.hmacKey&&this.k(f("hmacKey",n.hmacKey,this.T))}}class I{constructor(t,e){this.N=t,this.I=e}}function T(t,e){let i;return e>32?(i=64-e,new I(t.I<<e|t.N>>>i,t.N<<e|t.I>>>i)):0!==e?(i=32-e,new I(t.N<<e|t.I>>>i,t.I<<e|t.N>>>i)):t}function N(t,e){let i;return e<32?(i=32-e,new I(t.N>>>e|t.I<<i,t.I>>>e|t.N<<i)):(i=64-e,new I(t.I>>>e|t.N<<i,t.N>>>e|t.I<<i))}function j(t,e){return new I(t.N>>>e,t.I>>>e|t.N<<32-e)}function F(t,e,i){return new I(t.N&e.N^t.N&i.N^e.N&i.N,t.I&e.I^t.I&i.I^e.I&i.I)}function z(t){const e=N(t,28),i=N(t,34),n=N(t,39);return new I(e.N^i.N^n.N,e.I^i.I^n.I)}function V(t,e){let i,n;i=(65535&t.I)+(65535&e.I),n=(t.I>>>16)+(e.I>>>16)+(i>>>16);const r=(65535&n)<<16|65535&i;return i=(65535&t.N)+(65535&e.N)+(n>>>16),n=(t.N>>>16)+(e.N>>>16)+(i>>>16),new I((65535&n)<<16|65535&i,r)}function B(t,e,i,n){let r,o;r=(65535&t.I)+(65535&e.I)+(65535&i.I)+(65535&n.I),o=(t.I>>>16)+(e.I>>>16)+(i.I>>>16)+(n.I>>>16)+(r>>>16);const s=(65535&o)<<16|65535&r;return r=(65535&t.N)+(65535&e.N)+(65535&i.N)+(65535&n.N)+(o>>>16),o=(t.N>>>16)+(e.N>>>16)+(i.N>>>16)+(n.N>>>16)+(r>>>16),new I((65535&o)<<16|65535&r,s)}function H(t,e,i,n,r){let o,s;o=(65535&t.I)+(65535&e.I)+(65535&i.I)+(65535&n.I)+(65535&r.I),s=(t.I>>>16)+(e.I>>>16)+(i.I>>>16)+(n.I>>>16)+(r.I>>>16)+(o>>>16);const a=(65535&s)<<16|65535&o;return o=(65535&t.N)+(65535&e.N)+(65535&i.N)+(65535&n.N)+(65535&r.N)+(s>>>16),s=(t.N>>>16)+(e.N>>>16)+(i.N>>>16)+(n.N>>>16)+(r.N>>>16)+(o>>>16),new I((65535&s)<<16|65535&o,a)}function W(t,e){return new I(t.N^e.N,t.I^e.I)}function U(t){const e=N(t,19),i=N(t,61),n=j(t,6);return new I(e.N^i.N^n.N,e.I^i.I^n.I)}function Y(t){const e=N(t,1),i=N(t,8),n=j(t,7);return new I(e.N^i.N^n.N,e.I^i.I^n.I)}function $(t){const e=N(t,14),i=N(t,18),n=N(t,41);return new I(e.N^i.N^n.N,e.I^i.I^n.I)}const K=[new I(a[0],3609767458),new I(a[1],602891725),new I(a[2],3964484399),new I(a[3],2173295548),new I(a[4],4081628472),new I(a[5],3053834265),new I(a[6],2937671579),new I(a[7],3664609560),new I(a[8],2734883394),new I(a[9],1164996542),new I(a[10],1323610764),new I(a[11],3590304994),new I(a[12],4068182383),new I(a[13],991336113),new I(a[14],633803317),new I(a[15],3479774868),new I(a[16],2666613458),new I(a[17],944711139),new I(a[18],2341262773),new I(a[19],2007800933),new I(a[20],1495990901),new I(a[21],1856431235),new I(a[22],3175218132),new I(a[23],2198950837),new I(a[24],3999719339),new I(a[25],766784016),new I(a[26],2566594879),new I(a[27],3203337956),new I(a[28],1034457026),new I(a[29],2466948901),new I(a[30],3758326383),new I(a[31],168717936),new I(a[32],1188179964),new I(a[33],1546045734),new I(a[34],1522805485),new I(a[35],2643833823),new I(a[36],2343527390),new I(a[37],1014477480),new I(a[38],1206759142),new I(a[39],344077627),new I(a[40],1290863460),new I(a[41],3158454273),new I(a[42],3505952657),new I(a[43],106217008),new I(a[44],3606008344),new I(a[45],1432725776),new I(a[46],1467031594),new I(a[47],851169720),new I(a[48],3100823752),new I(a[49],1363258195),new I(a[50],3750685593),new I(a[51],3785050280),new I(a[52],3318307427),new I(a[53],3812723403),new I(a[54],2003034995),new I(a[55],3602036899),new I(a[56],1575990012),new I(a[57],1125592928),new I(a[58],2716904306),new I(a[59],442776044),new I(a[60],593698344),new I(a[61],3733110249),new I(a[62],2999351573),new I(a[63],3815920427),new I(3391569614,3928383900),new I(3515267271,566280711),new I(3940187606,3454069534),new I(4118630271,4000239992),new I(116418474,1914138554),new I(174292421,2731055270),new I(289380356,3203993006),new I(460393269,320620315),new I(685471733,587496836),new I(852142971,1086792851),new I(1017036298,365543100),new I(1126000580,2618297676),new I(1288033470,3409855158),new I(1501505948,4234509866),new I(1607167915,987167468),new I(1816402316,1246189591)];function G(t){return"SHA-384"===t?[new I(3418070365,l[0]),new I(1654270250,l[1]),new I(2438529370,l[2]),new I(355462360,l[3]),new I(1731405415,l[4]),new I(41048885895,l[5]),new I(3675008525,l[6]),new I(1203062813,l[7])]:[new I(c[0],4089235720),new I(c[1],2227873595),new I(c[2],4271175723),new I(c[3],1595750129),new I(c[4],2917565137),new I(c[5],725511199),new I(c[6],4215389547),new I(c[7],327033209)]}function X(t,e){let i,n,r,o,s,a,l,c,h,u,d,f;const p=[];for(i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],a=e[5],l=e[6],c=e[7],d=0;d<80;d+=1)d<16?(f=2*d,p[d]=new I(t[f],t[f+1])):p[d]=B(U(p[d-2]),p[d-7],Y(p[d-15]),p[d-16]),h=H(c,$(s),(m=a,y=l,new I((g=s).N&m.N^~g.N&y.N,g.I&m.I^~g.I&y.I)),K[d],p[d]),u=V(z(i),F(i,n,r)),c=l,l=a,a=s,s=V(o,h),o=r,r=n,n=i,i=V(h,u);var g,m,y;return e[0]=V(i,e[0]),e[1]=V(n,e[1]),e[2]=V(r,e[2]),e[3]=V(o,e[3]),e[4]=V(s,e[4]),e[5]=V(a,e[5]),e[6]=V(l,e[6]),e[7]=V(c,e[7]),e}class q extends p{constructor(t,e,i){if("SHA-384"!==t&&"SHA-512"!==t)throw new Error(h);super(t,e,i);const n=i||{};this.F=this.Y,this.M=!0,this.T=-1,this.C=o(this.t,this.i,this.T),this.U=X,this.B=function(t){return t.slice()},this.L=G,this.g=function(e,i,n,r){return function(t,e,i,n,r){let o,s;const a=31+(e+129>>>10<<5),l=e+i;for(;t.length<=a;)t.push(0);for(t[e>>>5]|=128<<24-e%32,t[a]=4294967295&l,t[a-1]=l/4294967296|0,o=0;o<t.length;o+=32)n=X(t.slice(o,o+32),n);return s="SHA-384"===r?[n[0].N,n[0].I,n[1].N,n[1].I,n[2].N,n[2].I,n[3].N,n[3].I,n[4].N,n[4].I,n[5].N,n[5].I]:[n[0].N,n[0].I,n[1].N,n[1].I,n[2].N,n[2].I,n[3].N,n[3].I,n[4].N,n[4].I,n[5].N,n[5].I,n[6].N,n[6].I,n[7].N,n[7].I],s}(e,i,n,r,t)},this.R=G(t),this.m=1024,this.v="SHA-384"===t?384:512,this.K=!1,n.hmacKey&&this.k(f("hmacKey",n.hmacKey,this.T))}}const J=[new I(0,1),new I(0,32898),new I(2147483648,32906),new I(2147483648,2147516416),new I(0,32907),new I(0,2147483649),new I(2147483648,2147516545),new I(2147483648,32777),new I(0,138),new I(0,136),new I(0,2147516425),new I(0,2147483658),new I(0,2147516555),new I(2147483648,139),new I(2147483648,32905),new I(2147483648,32771),new I(2147483648,32770),new I(2147483648,128),new I(0,32778),new I(2147483648,2147483658),new I(2147483648,2147516545),new I(2147483648,32896),new I(0,2147483649),new I(2147483648,2147516424)],Z=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];function Q(t){let e;const i=[];for(e=0;e<5;e+=1)i[e]=[new I(0,0),new I(0,0),new I(0,0),new I(0,0),new I(0,0)];return i}function tt(t){let e;const i=[];for(e=0;e<5;e+=1)i[e]=t[e].slice();return i}function et(t,e){let i,n,r,o;const s=[],a=[];if(null!==t)for(n=0;n<t.length;n+=2)e[(n>>>1)%5][(n>>>1)/5|0]=W(e[(n>>>1)%5][(n>>>1)/5|0],new I(t[n+1],t[n]));for(i=0;i<24;i+=1){for(o=Q(),n=0;n<5;n+=1)s[n]=(l=e[n][0],c=e[n][1],h=e[n][2],u=e[n][3],d=e[n][4],new I(l.N^c.N^h.N^u.N^d.N,l.I^c.I^h.I^u.I^d.I));for(n=0;n<5;n+=1)a[n]=W(s[(n+4)%5],T(s[(n+1)%5],1));for(n=0;n<5;n+=1)for(r=0;r<5;r+=1)e[n][r]=W(e[n][r],a[n]);for(n=0;n<5;n+=1)for(r=0;r<5;r+=1)o[r][(2*n+3*r)%5]=T(e[n][r],Z[n][r]);for(n=0;n<5;n+=1)for(r=0;r<5;r+=1)e[n][r]=W(o[n][r],new I(~o[(n+1)%5][r].N&o[(n+2)%5][r].N,~o[(n+1)%5][r].I&o[(n+2)%5][r].I));e[0][0]=W(e[0][0],J[i])}var l,c,h,u,d;return e}function it(t){let e,i,n=0;const r=[0,0],o=[4294967295&t,t/4294967296&2097151];for(e=6;e>=0;e--)i=o[e>>2]>>>8*e&255,0===i&&0===n||(r[n+1>>2]|=i<<8*(n+1),n+=1);return n=0!==n?n:1,r[0]|=n,{value:n+1>4?r:[r[0]],binLen:8+8*n}}function nt(t){return u(it(t.binLen),t)}function rt(t,e){let i,n=it(e);n=u(n,t);const r=e>>>2,o=(r-n.value.length%r)%r;for(i=0;i<o;i++)n.value.push(0);return n.value}class ot extends p{constructor(t,e,i){let n=6,r=0;super(t,e,i);const s=i||{};if(1!==this.numRounds){if(s.kmacKey||s.hmacKey)throw new Error("Cannot set numRounds with MAC");if("CSHAKE128"===this.o||"CSHAKE256"===this.o)throw new Error("Cannot set numRounds for CSHAKE variants")}switch(this.T=1,this.C=o(this.t,this.i,this.T),this.U=et,this.B=tt,this.L=Q,this.R=Q(),this.K=!1,t){case"SHA3-224":this.m=r=1152,this.v=224,this.M=!0,this.F=this.Y;break;case"SHA3-256":this.m=r=1088,this.v=256,this.M=!0,this.F=this.Y;break;case"SHA3-384":this.m=r=832,this.v=384,this.M=!0,this.F=this.Y;break;case"SHA3-512":this.m=r=576,this.v=512,this.M=!0,this.F=this.Y;break;case"SHAKE128":n=31,this.m=r=1344,this.v=-1,this.K=!0,this.M=!1,this.F=null;break;case"SHAKE256":n=31,this.m=r=1088,this.v=-1,this.K=!0,this.M=!1,this.F=null;break;case"KMAC128":n=4,this.m=r=1344,this.X(i),this.v=-1,this.K=!0,this.M=!1,this.F=this._;break;case"KMAC256":n=4,this.m=r=1088,this.X(i),this.v=-1,this.K=!0,this.M=!1,this.F=this._;break;case"CSHAKE128":this.m=r=1344,n=this.O(i),this.v=-1,this.K=!0,this.M=!1,this.F=null;break;case"CSHAKE256":this.m=r=1088,n=this.O(i),this.v=-1,this.K=!0,this.M=!1,this.F=null;break;default:throw new Error(h)}this.g=function(t,e,i,o,s){return function(t,e,i,n,r,o,s){let a,l,c=0;const h=[],u=r>>>5,d=e>>>5;for(a=0;a<d&&e>=r;a+=u)n=et(t.slice(a,a+u),n),e-=r;for(t=t.slice(a),e%=r;t.length<u;)t.push(0);for(a=e>>>3,t[a>>2]^=o<<a%4*8,t[u-1]^=2147483648,n=et(t,n);32*h.length<s&&(l=n[c%5][c/5|0],h.push(l.I),!(32*h.length>=s));)h.push(l.N),c+=1,0==64*c%r&&(et(null,n),c=0);return h}(t,e,0,o,r,n,s)},s.hmacKey&&this.k(f("hmacKey",s.hmacKey,this.T))}O(t,e){const i=function(t){const e=t||{};return{funcName:f("funcName",e.funcName,1,{value:[],binLen:0}),customization:f("Customization",e.customization,1,{value:[],binLen:0})}}(t||{});e&&(i.funcName=e);const n=u(nt(i.funcName),nt(i.customization));if(0!==i.customization.binLen||0!==i.funcName.binLen){const t=rt(n,this.m>>>3);for(let e=0;e<t.length;e+=this.m>>>5)this.R=this.U(t.slice(e,e+(this.m>>>5)),this.R),this.A+=this.m;return 4}return 31}X(t){const e=function(t){const e=t||{};return{kmacKey:f("kmacKey",e.kmacKey,1),funcName:{value:[1128353099],binLen:32},customization:f("Customization",e.customization,1,{value:[],binLen:0})}}(t||{});this.O(t,e.funcName);const i=rt(nt(e.kmacKey),this.m>>>3);for(let t=0;t<i.length;t+=this.m>>>5)this.R=this.U(i.slice(t,t+(this.m>>>5)),this.R),this.A+=this.m;this.H=!0}_(t){const e=u({value:this.h.slice(),binLen:this.u},function(t){let e,i,n=0;const r=[0,0],o=[4294967295&t,t/4294967296&2097151];for(e=6;e>=0;e--)i=o[e>>2]>>>8*e&255,0===i&&0===n||(r[n>>2]|=i<<8*n,n+=1);return n=0!==n?n:1,r[n>>2]|=n<<8*n,{value:n+1>4?r:[r[0]],binLen:8+8*n}}(t.outputLen));return this.g(e.value,e.binLen,this.A,this.B(this.R),t.outputLen)}}class st{constructor(t,e,i){if("SHA-1"==t)this.P=new E(t,e,i);else if("SHA-224"==t||"SHA-256"==t)this.P=new D(t,e,i);else if("SHA-384"==t||"SHA-512"==t)this.P=new q(t,e,i);else{if("SHA3-224"!=t&&"SHA3-256"!=t&&"SHA3-384"!=t&&"SHA3-512"!=t&&"SHAKE128"!=t&&"SHAKE256"!=t&&"CSHAKE128"!=t&&"CSHAKE256"!=t&&"KMAC128"!=t&&"KMAC256"!=t)throw new Error(h);this.P=new ot(t,e,i)}}update(t){return this.P.update(t),this}getHash(t,e){return this.P.getHash(t,e)}setHMACKey(t,e,i){this.P.setHMACKey(t,e,i)}getHMAC(t,e){return this.P.getHMAC(t,e)}}function at(t){return at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},at(t)}function lt(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */lt=function(){return t};var t={},e=Object.prototype,i=e.hasOwnProperty,n=Object.defineProperty||function(t,e,i){t[e]=i.value},r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",s=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function l(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,i){return t[e]=i}}function c(t,e,i,r){var o=e&&e.prototype instanceof d?e:d,s=Object.create(o.prototype),a=new O(r||[]);return n(s,"_invoke",{value:w(t,i,a)}),s}function h(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var u={};function d(){}function f(){}function p(){}var g={};l(g,o,(function(){return this}));var m=Object.getPrototypeOf,y=m&&m(m(M([])));y&&y!==e&&i.call(y,o)&&(g=y);var b=p.prototype=d.prototype=Object.create(g);function v(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function r(n,o,s,a){var l=h(t[n],t,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==at(u)&&i.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,s,a)}),(function(t){r("throw",t,s,a)})):e.resolve(u).then((function(t){c.value=t,s(c)}),(function(t){return r("throw",t,s,a)}))}a(l.arg)}var o;n(this,"_invoke",{value:function(t,i){function n(){return new e((function(e,n){r(t,i,e,n)}))}return o=o?o.then(n,n):n()}})}function w(t,e,i){var n="suspendedStart";return function(r,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===r)throw o;return A()}for(i.method=r,i.arg=o;;){var s=i.delegate;if(s){var a=_(s,i);if(a){if(a===u)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if("suspendedStart"===n)throw n="completed",i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n="executing";var l=h(t,e,i);if("normal"===l.type){if(n=i.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(n="completed",i.method="throw",i.arg=l.arg)}}}function _(t,e){var i=e.method,n=t.iterator[i];if(void 0===n)return e.delegate=null,"throw"===i&&t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method)||"return"!==i&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+i+"' method")),u;var r=h(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function M(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:A}}function A(){return{value:void 0,done:!0}}return f.prototype=p,n(b,"constructor",{value:p,configurable:!0}),n(p,"constructor",{value:f,configurable:!0}),f.displayName=l(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,l(t,a,"GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},v(x.prototype),l(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,i,n,r,o){void 0===o&&(o=Promise);var s=new x(c(e,i,n,r),o);return t.isGeneratorFunction(i)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},v(b),l(b,a,"Generator"),l(b,o,(function(){return this})),l(b,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),i=[];for(var n in e)i.push(n);return i.reverse(),function t(){for(;i.length;){var n=i.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=M,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(i,n){return s.type="throw",s.arg=t,e.next=i,n&&(e.method="next",e.arg=void 0),!!n}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=i.call(o,"catchLoc"),l=i.call(o,"finallyLoc");if(a&&l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,u):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),u},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),S(i),u}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;S(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,i){return this.delegate={iterator:M(t),resultName:e,nextLoc:i},"next"===this.method&&(this.arg=void 0),u}},t}function ct(t,e,i,n,r,o,s){try{var a=t[o](s),l=a.value}catch(t){return void i(t)}a.done?e(l):Promise.resolve(l).then(n,r)}function ht(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,dt(n.key),n)}}function ut(t,e,i){return(e=dt(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function dt(t){var e=function(t,e){if("object"!==at(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==at(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===at(e)?e:String(e)}var ft=function(){function t(e,i,n){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),ut(this,"apiUrl","https://api.vindecoder.eu/3.2/"),ut(this,"id","vehicle-market-value"),this.apiKey=e,this.apiSecret=i,this.vincode=n,""===e)throw new Error("API key is required.")}var e,i,n,r,o;return e=t,i=[{key:"createCheckSum",value:function(){var t="".concat(this.vincode,"|").concat(this.id,"|").concat(this.apiKey,"|").concat(this.apiSecret),e=new st("SHA-1","TEXT");return e.update(t),e.getHash("HEX").substring(0,10)}},{key:"fetchData",value:(r=lt().mark((function t(){var e,i,n;return lt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(""!==this.apiKey){t.next=2;break}throw new Error("API key is required.");case 2:if(""!==this.apiSecret){t.next=4;break}throw new Error("API secret is required.");case 4:return e=this.createCheckSum(),i="".concat(this.apiUrl).concat(this.apiKey,"/").concat(e,"/vehicle-market-value/").concat(this.vincode,".json"),t.prev=6,t.next=9,fetch(i);case 9:if((n=t.sent).ok){t.next=12;break}throw new Error("Failed to fetch vehicle data. Status: ".concat(n.status));case 12:return t.next=14,n.json();case 14:return t.abrupt("return",t.sent);case 17:throw t.prev=17,t.t0=t.catch(6),new Error("Failed to fetch vehicle data: ".concat(t.t0.message));case 20:case"end":return t.stop()}}),t,this,[[6,17]])})),o=function(){var t=this,e=arguments;return new Promise((function(i,n){var o=r.apply(t,e);function s(t){ct(o,i,n,s,a,"next",t)}function a(t){ct(o,i,n,s,a,"throw",t)}s(void 0)}))},function(){return o.apply(this,arguments)})}],i&&ht(e.prototype,i),n&&ht(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();var pt=function(){this.totalCount=0,this.data={}};pt.prototype.train=function(t,e){for(var i in this.data[e]||(this.data[e]={}),t){var n=t[i];void 0===this.data[e][i]&&(this.data[e][i]={}),void 0===this.data[e][i][n]&&(this.data[e][i][n]=0),this.data[e][i][n]++}this.totalCount++},pt.prototype.score=function(t){var e,i={};for(var n in t){var r=t[n];for(e in this.data)i[e]={},this.data[e][n]?i[e][n+"_"+r]=(this.data[e][n][r]||0)/this.totalCount:i[e][n+"_"+r]=0}var o={};for(e in i)for(var s in o[e]=0,i[e])o[e]+=i[e][s];return o};var gt=function(){this.weights=[],this.bias=0};gt.prototype.predict=function(t){if(t.length!==this.weights.length)return null;for(var e=0,i=0;i<this.weights.length;i++)e+=this.weights[i]*t[i];return(e+=this.bias)>0?1:0},gt.prototype.train=function(t,e){if(0!==e&&1!==e)return null;t.length!==this.weights.length&&(this.weights=t,this.bias=1);var i=this.predict(t);if("number"==typeof i&&i!==e){for(var n=e-i,r=0;r<this.weights.length;r++)this.weights[r]+=n*t[r];this.bias+=n}return this};Math.log(Math.sqrt(2*Math.PI));Math.sqrt(2*Math.PI);var mt=Math.sqrt(2*Math.PI);function yt(t){for(var e=t,i=t,n=1;n<15;n++)e+=i*=t*t/(2*n+1);return Math.round(1e4*(.5+e/mt*Math.exp(-t*t/2)))/1e4}for(var bt=[],vt=0;vt<=3.09;vt+=.01)bt.push(yt(vt));
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function xt(t){return t+.5|0}const wt=(t,e,i)=>Math.max(Math.min(t,i),e);function _t(t){return wt(xt(2.55*t),0,255)}function kt(t){return wt(xt(255*t),0,255)}function St(t){return wt(xt(t/2.55)/100,0,1)}function Ot(t){return wt(xt(100*t),0,100)}const Mt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},At=[..."0123456789ABCDEF"],Pt=t=>At[15&t],Ct=t=>At[(240&t)>>4]+At[15&t],Et=t=>(240&t)>>4==(15&t);function Lt(t){var e=(t=>Et(t.r)&&Et(t.g)&&Et(t.b)&&Et(t.a))(t)?Pt:Ct;return t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0}const Rt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Dt(t,e,i){const n=e*Math.min(i,1-i),r=(e,r=(e+t/30)%12)=>i-n*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function It(t,e,i){const n=(n,r=(n+t/60)%6)=>i-i*e*Math.max(Math.min(r,4-r,1),0);return[n(5),n(3),n(1)]}function Tt(t,e,i){const n=Dt(t,1,.5);let r;for(e+i>1&&(r=1/(e+i),e*=r,i*=r),r=0;r<3;r++)n[r]*=1-e-i,n[r]+=e;return n}function Nt(t){const e=t.r/255,i=t.g/255,n=t.b/255,r=Math.max(e,i,n),o=Math.min(e,i,n),s=(r+o)/2;let a,l,c;return r!==o&&(c=r-o,l=s>.5?c/(2-r-o):c/(r+o),a=function(t,e,i,n,r){return t===r?(e-i)/n+(e<i?6:0):e===r?(i-t)/n+2:(t-e)/n+4}(e,i,n,c,r),a=60*a+.5),[0|a,l||0,s]}function jt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(kt)}function Ft(t,e,i){return jt(Dt,t,e,i)}function zt(t){return(t%360+360)%360}function Vt(t){const e=Rt.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?_t(+e[5]):kt(+e[5]));const r=zt(+e[2]),o=+e[3]/100,s=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return jt(Tt,t,e,i)}(r,o,s):"hsv"===e[1]?function(t,e,i){return jt(It,t,e,i)}(r,o,s):Ft(r,o,s),{r:i[0],g:i[1],b:i[2],a:n}}const Bt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Ht={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Wt;function Ut(t){Wt||(Wt=function(){const t={},e=Object.keys(Ht),i=Object.keys(Bt);let n,r,o,s,a;for(n=0;n<e.length;n++){for(s=a=e[n],r=0;r<i.length;r++)o=i[r],a=a.replace(o,Bt[o]);o=parseInt(Ht[s],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),Wt.transparent=[0,0,0,0]);const e=Wt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const Yt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const $t=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Kt=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Gt(t,e,i){if(t){let n=Nt(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=Ft(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function Xt(t,e){return t?Object.assign(e||{},t):t}function qt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=kt(t[3]))):(e=Xt(t,{r:0,g:0,b:0,a:1})).a=kt(e.a),e}function Jt(t){return"r"===t.charAt(0)?function(t){const e=Yt.exec(t);let i,n,r,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?_t(t):wt(255*t,0,255)}return i=+e[1],n=+e[3],r=+e[5],i=255&(e[2]?_t(i):wt(i,0,255)),n=255&(e[4]?_t(n):wt(n,0,255)),r=255&(e[6]?_t(r):wt(r,0,255)),{r:i,g:n,b:r,a:o}}}(t):Vt(t)}class Zt{constructor(t){if(t instanceof Zt)return t;const e=typeof t;let i;var n,r,o;"object"===e?i=qt(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?r={r:255&17*Mt[n[1]],g:255&17*Mt[n[2]],b:255&17*Mt[n[3]],a:5===o?17*Mt[n[4]]:255}:7!==o&&9!==o||(r={r:Mt[n[1]]<<4|Mt[n[2]],g:Mt[n[3]]<<4|Mt[n[4]],b:Mt[n[5]]<<4|Mt[n[6]],a:9===o?Mt[n[7]]<<4|Mt[n[8]]:255})),i=r||Ut(t)||Jt(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Xt(this._rgb);return t&&(t.a=St(t.a)),t}set rgb(t){this._rgb=qt(t)}rgbString(){return this._valid?function(t){return t&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${St(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`)}(this._rgb):void 0}hexString(){return this._valid?Lt(this._rgb):void 0}hslString(){return this._valid?function(t){if(!t)return;const e=Nt(t),i=e[0],n=Ot(e[1]),r=Ot(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${r}%, ${St(t.a)})`:`hsl(${i}, ${n}%, ${r}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let r;const o=e===r?.5:e,s=2*o-1,a=i.a-n.a,l=((s*a==-1?s:(s+a)/(1+s*a))+1)/2;r=1-l,i.r=255&l*i.r+r*n.r+.5,i.g=255&l*i.g+r*n.g+.5,i.b=255&l*i.b+r*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=Kt(St(t.r)),r=Kt(St(t.g)),o=Kt(St(t.b));return{r:kt($t(n+i*(Kt(St(e.r))-n))),g:kt($t(r+i*(Kt(St(e.g))-r))),b:kt($t(o+i*(Kt(St(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Zt(this.rgb)}alpha(t){return this._rgb.a=kt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=xt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Gt(this._rgb,2,t),this}darken(t){return Gt(this._rgb,2,-t),this}saturate(t){return Gt(this._rgb,1,t),this}desaturate(t){return Gt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Nt(t);i[0]=zt(i[0]+e),i=Ft(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
function Qt(){}const te=(()=>{let t=0;return()=>t++})();function ee(t){return null==t}function ie(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function ne(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function re(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function oe(t,e){return re(t)?t:e}function se(t,e){return void 0===t?e:t}const ae=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function le(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function ce(t,e,i,n){let r,o,s;if(ie(t))if(o=t.length,n)for(r=o-1;r>=0;r--)e.call(i,t[r],r);else for(r=0;r<o;r++)e.call(i,t[r],r);else if(ne(t))for(s=Object.keys(t),o=s.length,r=0;r<o;r++)e.call(i,t[s[r]],s[r])}function he(t,e){let i,n,r,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(r=t[i],o=e[i],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function ue(t){if(ie(t))return t.map(ue);if(ne(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let r=0;for(;r<n;++r)e[i[r]]=ue(t[i[r]]);return e}return t}function de(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function fe(t,e,i,n){if(!de(t))return;const r=e[t],o=i[t];ne(r)&&ne(o)?pe(r,o,n):e[t]=ue(o)}function pe(t,e,i){const n=ie(e)?e:[e],r=n.length;if(!ne(t))return t;const o=(i=i||{}).merger||fe;let s;for(let e=0;e<r;++e){if(s=n[e],!ne(s))continue;const r=Object.keys(s);for(let e=0,n=r.length;e<n;++e)o(r[e],t,s,i)}return t}function ge(t,e){return pe(t,e,{merger:me})}function me(t,e,i){if(!de(t))return;const n=e[t],r=i[t];ne(n)&&ne(r)?ge(n,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=ue(r))}const ye={"":t=>t,x:t=>t.x,y:t=>t.y};function be(t,e){const i=ye[e]||(ye[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function ve(t){return t.charAt(0).toUpperCase()+t.slice(1)}const xe=t=>void 0!==t,we=t=>"function"==typeof t,_e=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};const ke=Math.PI,Se=2*ke,Oe=Se+ke,Me=Number.POSITIVE_INFINITY,Ae=ke/180,Pe=ke/2,Ce=ke/4,Ee=2*ke/3,Le=Math.log10,Re=Math.sign;function De(t,e,i){return Math.abs(t-e)<i}function Ie(t){const e=Math.round(t);t=De(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Le(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Te(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Ne(t,e,i){let n,r,o;for(n=0,r=t.length;n<r;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function je(t){return t*(ke/180)}function Fe(t){return t*(180/ke)}function ze(t){if(!re(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Ve(t,e){const i=e.x-t.x,n=e.y-t.y,r=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*ke&&(o+=Se),{angle:o,distance:r}}function Be(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function He(t,e){return(t-e+Oe)%Se-ke}function We(t){return(t%Se+Se)%Se}function Ue(t,e,i,n){const r=We(t),o=We(e),s=We(i),a=We(o-r),l=We(s-r),c=We(r-o),h=We(r-s);return r===o||r===s||n&&o===s||a>l&&c<h}function Ye(t,e,i){return Math.max(e,Math.min(i,t))}function $e(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function Ke(t,e,i){i=i||(i=>t[i]<e);let n,r=t.length-1,o=0;for(;r-o>1;)n=o+r>>1,i(n)?o=n:r=n;return{lo:o,hi:r}}const Ge=(t,e,i,n)=>Ke(t,i,n?n=>{const r=t[n][e];return r<i||r===i&&t[n+1][e]===i}:n=>t[n][e]<i),Xe=(t,e,i)=>Ke(t,i,(n=>t[n][e]>=i));const qe=["push","pop","shift","splice","unshift"];function Je(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,r=n.indexOf(e);-1!==r&&n.splice(r,1),n.length>0||(qe.forEach((e=>{delete t[e]})),delete t._chartjs)}function Ze(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const Qe="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ti(t,e){let i=[],n=!1;return function(...r){i=r,n||(n=!0,Qe.call(window,(()=>{n=!1,t.apply(e,i)})))}}const ei=t=>"start"===t?"left":"end"===t?"right":"center",ii=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function ni(t,e,i){const n=e.length;let r=0,o=n;if(t._sorted){const{iScale:s,_parsed:a}=t,l=s.axis,{min:c,max:h,minDefined:u,maxDefined:d}=s.getUserBounds();u&&(r=Ye(Math.min(Ge(a,s.axis,c).lo,i?n:Ge(e,l,s.getPixelForValue(c)).lo),0,n-1)),o=d?Ye(Math.max(Ge(a,s.axis,h,!0).hi+1,i?0:Ge(e,l,s.getPixelForValue(h),!0).hi+1),r,n)-r:n-r}return{start:r,count:o}}function ri(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,r={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=r,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,r),o}const oi=t=>0===t||1===t,si=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Se/i),ai=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*Se/i)+1,li={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Pe),easeOutSine:t=>Math.sin(t*Pe),easeInOutSine:t=>-.5*(Math.cos(ke*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>oi(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>oi(t)?t:si(t,.075,.3),easeOutElastic:t=>oi(t)?t:ai(t,.075,.3),easeInOutElastic(t){const e=.1125;return oi(t)?t:t<.5?.5*si(2*t,e,.45):.5+.5*ai(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-li.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*li.easeInBounce(2*t):.5*li.easeOutBounce(2*t-1)+.5};function ci(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function hi(t){return ci(t)?t:new Zt(t)}function ui(t){return ci(t)?t:new Zt(t).saturate(.5).darken(.1).hexString()}const di=["x","y","borderWidth","radius","tension"],fi=["color","borderColor","backgroundColor"];const pi=new Map;function gi(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=pi.get(i);return n||(n=new Intl.NumberFormat(t,e),pi.set(i,n)),n}(e,i).format(t)}const mi={values:t=>ie(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let r,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const s=Le(Math.abs(o)),a=isNaN(s)?1:Math.max(Math.min(-1*Math.floor(s),20),0),l={notation:r,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),gi(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(Le(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?mi.numeric.call(this,t,e,i):""}};var yi={formatters:mi};const bi=Object.create(null),vi=Object.create(null);function xi(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function wi(t,e,i){return"string"==typeof e?pe(xi(t,e),i):pe(xi(t,""),e)}class _i{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>ui(e.backgroundColor),this.hoverBorderColor=(t,e)=>ui(e.borderColor),this.hoverColor=(t,e)=>ui(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return wi(this,t,e)}get(t){return xi(this,t)}describe(t,e){return wi(vi,t,e)}override(t,e){return wi(bi,t,e)}route(t,e,i,n){const r=xi(this,t),o=xi(this,i),s="_"+e;Object.defineProperties(r,{[s]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[s],e=o[n];return ne(t)?Object.assign({},e,t):se(t,e)},set(t){this[s]=t}}})}apply(t){t.forEach((t=>t(this)))}}var ki=new _i({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:fi},numbers:{type:"number",properties:di}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:yi.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Si(t,e,i,n,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,i.push(r)),o>n&&(n=o),n}function Oi(t,e,i,n){let r=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(r=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let s=0;const a=i.length;let l,c,h,u,d;for(l=0;l<a;l++)if(u=i[l],null==u||ie(u)){if(ie(u))for(c=0,h=u.length;c<h;c++)d=u[c],null==d||ie(d)||(s=Si(t,r,o,s,d))}else s=Si(t,r,o,s,u);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete r[o[l]];o.splice(0,f)}return s}function Mi(t,e,i){const n=t.currentDevicePixelRatio,r=0!==i?Math.max(i/2,.5):0;return Math.round((e-r)*n)/n+r}function Ai(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Pi(t,e,i,n){Ci(t,e,i,n,null)}function Ci(t,e,i,n,r){let o,s,a,l,c,h,u,d;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*Ae;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:r?t.ellipse(i,n,r/2,g,0,0,Se):t.arc(i,n,g,0,Se),t.closePath();break;case"triangle":h=r?r/2:g,t.moveTo(i+Math.sin(m)*h,n-Math.cos(m)*g),m+=Ee,t.lineTo(i+Math.sin(m)*h,n-Math.cos(m)*g),m+=Ee,t.lineTo(i+Math.sin(m)*h,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":c=.516*g,l=g-c,s=Math.cos(m+Ce)*l,u=Math.cos(m+Ce)*(r?r/2-c:l),a=Math.sin(m+Ce)*l,d=Math.sin(m+Ce)*(r?r/2-c:l),t.arc(i-u,n-a,c,m-ke,m-Pe),t.arc(i+d,n-s,c,m-Pe,m),t.arc(i+u,n+a,c,m,m+Pe),t.arc(i-d,n+s,c,m+Pe,m+ke),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,h=r?r/2:l,t.rect(i-h,n-l,2*h,2*l);break}m+=Ce;case"rectRot":u=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(i-u,n-a),t.lineTo(i+d,n-s),t.lineTo(i+u,n+a),t.lineTo(i-d,n+s),t.closePath();break;case"crossRot":m+=Ce;case"cross":u=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+d,n-s),t.lineTo(i-d,n+s);break;case"star":u=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+d,n-s),t.lineTo(i-d,n+s),m+=Ce,u=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+d,n-s),t.lineTo(i-d,n+s);break;case"line":s=r?r/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-s,n-a),t.lineTo(i+s,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(r?r/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Ei(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Li(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Ri(t){t.restore()}function Di(t,e,i,n,r){if(!e)return t.lineTo(i.x,i.y);if("middle"===r){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===r!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Ii(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Ti(t,e,i,n,r){if(r.strikethrough||r.underline){const o=t.measureText(n),s=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,c=i+o.actualBoundingBoxDescent,h=r.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(s,h),t.lineTo(a,h),t.stroke()}}function Ni(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function ji(t,e,i,n,r,o={}){const s=ie(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),ee(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<s.length;++l)c=s[l],o.backdrop&&Ni(t,o.backdrop),a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),ee(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,i,n,o.maxWidth)),t.fillText(c,i,n,o.maxWidth),Ti(t,i,n,c,o),n+=Number(r.lineHeight);t.restore()}function Fi(t,e){const{x:i,y:n,w:r,h:o,radius:s}=e;t.arc(i+s.topLeft,n+s.topLeft,s.topLeft,-Pe,ke,!0),t.lineTo(i,n+o-s.bottomLeft),t.arc(i+s.bottomLeft,n+o-s.bottomLeft,s.bottomLeft,ke,Pe,!0),t.lineTo(i+r-s.bottomRight,n+o),t.arc(i+r-s.bottomRight,n+o-s.bottomRight,s.bottomRight,Pe,0,!0),t.lineTo(i+r,n+s.topRight),t.arc(i+r-s.topRight,n+s.topRight,s.topRight,0,-Pe,!0),t.lineTo(i+s.topLeft,n)}const zi=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Vi=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function Bi(t,e){const i=(""+t).match(zi);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Hi=t=>+t||0;function Wi(t,e){const i={},n=ne(e),r=n?Object.keys(e):e,o=ne(t)?n?i=>se(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of r)i[t]=Hi(o(t));return i}function Ui(t){return Wi(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Yi(t){return Wi(t,["topLeft","topRight","bottomLeft","bottomRight"])}function $i(t){const e=Ui(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Ki(t,e){t=t||{},e=e||ki.font;let i=se(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=se(t.style,e.style);n&&!(""+n).match(Vi)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const r={family:se(t.family,e.family),lineHeight:Bi(se(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:se(t.weight,e.weight),string:""};return r.string=function(t){return!t||ee(t.size)||ee(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function Gi(t,e,i,n){let r,o,s,a=!0;for(r=0,o=t.length;r<o;++r)if(s=t[r],void 0!==s&&(void 0!==e&&"function"==typeof s&&(s=s(e),a=!1),void 0!==i&&ie(s)&&(s=s[i%s.length],a=!1),void 0!==s))return n&&!a&&(n.cacheable=!1),s}function Xi(t,e){return Object.assign(Object.create(t),e)}function qi(t,e=[""],i,n,r=(()=>t[0])){const o=i||t;void 0===n&&(n=ln("_fallback",t));const s={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:r,override:i=>qi([i,...t],e,o,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>en(i,n,(()=>function(t,e,i,n){let r;for(const o of e)if(r=ln(Qi(o,t),i),void 0!==r)return tn(t,r)?sn(i,n,t,r):r}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>cn(t).includes(e),ownKeys:t=>cn(t),set(t,e,i){const n=t._storage||(t._storage=r());return t[e]=n[e]=i,delete t._keys,!0}})}function Ji(t,e,i,n){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Zi(t,n),setContext:e=>Ji(t,e,i,n),override:r=>Ji(t.override(r),e,i,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>en(t,e,(()=>function(t,e,i){const{_proxy:n,_context:r,_subProxy:o,_descriptors:s}=t;let a=n[e];we(a)&&s.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:r,_context:o,_subProxy:s,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,s||n);a.delete(t),tn(t,l)&&(l=sn(r._scopes,r,t,l));return l}(e,a,t,i));ie(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:r,_context:o,_subProxy:s,_descriptors:a}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(ne(e[0])){const i=e,n=r._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=sn(n,r,t,l);e.push(Ji(i,o,s&&s[t],a))}}return e}(e,a,t,s.isIndexable));tn(e,a)&&(a=Ji(a,r,o&&o[e],s));return a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function Zi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:i,indexable:n,isScriptable:we(i)?i:()=>i,isIndexable:we(n)?n:()=>n}}const Qi=(t,e)=>t?t+ve(e):e,tn=(t,e)=>ne(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function en(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function nn(t,e,i){return we(t)?t(e,i):t}const rn=(t,e)=>!0===t?e:"string"==typeof t?be(e,t):void 0;function on(t,e,i,n,r){for(const o of e){const e=rn(i,o);if(e){t.add(e);const o=nn(e._fallback,i,r);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function sn(t,e,i,n){const r=e._rootScopes,o=nn(e._fallback,i,n),s=[...t,...r],a=new Set;a.add(n);let l=an(a,s,i,o||i,n);return null!==l&&((void 0===o||o===i||(l=an(a,s,o,l,n),null!==l))&&qi(Array.from(a),[""],r,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const r=n[e];if(ie(r)&&ne(i))return i;return r||{}}(e,i,n))))}function an(t,e,i,n,r){for(;i;)i=on(t,e,i,n,r);return i}function ln(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function cn(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function hn(t,e,i,n){const{iScale:r}=t,{key:o="r"}=this._parsing,s=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],s[a]={r:r.parse(be(h,o),c)};return s}const un=Number.EPSILON||1e-14,dn=(t,e)=>e<t.length&&!t[e].skip&&t[e],fn=t=>"x"===t?"y":"x";function pn(t,e,i,n){const r=t.skip?e:t,o=e,s=i.skip?e:i,a=Be(o,r),l=Be(s,o);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const u=n*c,d=n*h;return{previous:{x:o.x-u*(s.x-r.x),y:o.y-u*(s.y-r.y)},next:{x:o.x+d*(s.x-r.x),y:o.y+d*(s.y-r.y)}}}function gn(t,e="x"){const i=fn(e),n=t.length,r=Array(n).fill(0),o=Array(n);let s,a,l,c=dn(t,0);for(s=0;s<n;++s)if(a=l,l=c,c=dn(t,s+1),l){if(c){const t=c[e]-l[e];r[s]=0!==t?(c[i]-l[i])/t:0}o[s]=a?c?Re(r[s-1])!==Re(r[s])?0:(r[s-1]+r[s])/2:r[s-1]:r[s]}!function(t,e,i){const n=t.length;let r,o,s,a,l,c=dn(t,0);for(let h=0;h<n-1;++h)l=c,c=dn(t,h+1),l&&c&&(De(e[h],0,un)?i[h]=i[h+1]=0:(r=i[h]/e[h],o=i[h+1]/e[h],a=Math.pow(r,2)+Math.pow(o,2),a<=9||(s=3/Math.sqrt(a),i[h]=r*s*e[h],i[h+1]=o*s*e[h])))}(t,r,o),function(t,e,i="x"){const n=fn(i),r=t.length;let o,s,a,l=dn(t,0);for(let c=0;c<r;++c){if(s=a,a=l,l=dn(t,c+1),!a)continue;const r=a[i],h=a[n];s&&(o=(r-s[i])/3,a[`cp1${i}`]=r-o,a[`cp1${n}`]=h-o*e[c]),l&&(o=(l[i]-r)/3,a[`cp2${i}`]=r+o,a[`cp2${n}`]=h+o*e[c])}}(t,o,e)}function mn(t,e,i){return Math.max(Math.min(t,i),e)}function yn(t,e,i,n,r){let o,s,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)gn(t,r);else{let i=n?t[t.length-1]:t[0];for(o=0,s=t.length;o<s;++o)a=t[o],l=pn(i,a,t[Math.min(o+1,s-(n?0:1))%s],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,r,o,s,a=Ei(t[0],e);for(i=0,n=t.length;i<n;++i)s=o,o=a,a=i<n-1&&Ei(t[i+1],e),o&&(r=t[i],s&&(r.cp1x=mn(r.cp1x,e.left,e.right),r.cp1y=mn(r.cp1y,e.top,e.bottom)),a&&(r.cp2x=mn(r.cp2x,e.left,e.right),r.cp2y=mn(r.cp2y,e.top,e.bottom)))}(t,i)}function bn(){return"undefined"!=typeof window&&"undefined"!=typeof document}function vn(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function xn(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const wn=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);const _n=["top","right","bottom","left"];function kn(t,e,i){const n={};i=i?"-"+i:"";for(let r=0;r<4;r++){const o=_n[r];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const Sn=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function On(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,r=wn(i),o="border-box"===r.boxSizing,s=kn(r,"padding"),a=kn(r,"border","width"),{x:l,y:c,box:h}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:r,offsetY:o}=n;let s,a,l=!1;if(Sn(r,o,t.target))s=r,a=o;else{const t=e.getBoundingClientRect();s=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:s,y:a,box:l}}(t,i),u=s.left+(h&&a.left),d=s.top+(h&&a.top);let{width:f,height:p}=e;return o&&(f-=s.width+a.width,p-=s.height+a.height),{x:Math.round((l-u)/f*i.width/n),y:Math.round((c-d)/p*i.height/n)}}const Mn=t=>Math.round(10*t)/10;function An(t,e,i,n){const r=wn(t),o=kn(r,"margin"),s=xn(r.maxWidth,t,"clientWidth")||Me,a=xn(r.maxHeight,t,"clientHeight")||Me,l=function(t,e,i){let n,r;if(void 0===e||void 0===i){const o=vn(t);if(o){const t=o.getBoundingClientRect(),s=wn(o),a=kn(s,"border","width"),l=kn(s,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=xn(s.maxWidth,o,"clientWidth"),r=xn(s.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||Me,maxHeight:r||Me}}(t,e,i);let{width:c,height:h}=l;if("content-box"===r.boxSizing){const t=kn(r,"border","width"),e=kn(r,"padding");c-=e.width+t.width,h-=e.height+t.height}c=Math.max(0,c-o.width),h=Math.max(0,n?c/n:h-o.height),c=Mn(Math.min(c,s,l.maxWidth)),h=Mn(Math.min(h,a,l.maxHeight)),c&&!h&&(h=Mn(c/2));return(void 0!==e||void 0!==i)&&n&&l.height&&h>l.height&&(h=l.height,c=Mn(Math.floor(h*n))),{width:c,height:h}}function Pn(t,e,i){const n=e||1,r=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const s=t.canvas;return s.style&&(i||!s.style.height&&!s.style.width)&&(s.style.height=`${t.height}px`,s.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||s.height!==r||s.width!==o)&&(t.currentDevicePixelRatio=n,s.height=r,s.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Cn=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function En(t,e){const i=function(t,e){return wn(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Ln(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Rn(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function Dn(t,e,i,n){const r={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},s=Ln(t,r,i),a=Ln(r,o,i),l=Ln(o,e,i),c=Ln(s,a,i),h=Ln(a,l,i);return Ln(c,h,i)}function In(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Tn(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Nn(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function jn(t){return"angle"===t?{between:Ue,compare:He,normalize:We}:{between:$e,compare:(t,e)=>t-e,normalize:t=>t}}function Fn({start:t,end:e,count:i,loop:n,style:r}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:r}}function zn(t,e,i){if(!i)return[t];const{property:n,start:r,end:o}=i,s=e.length,{compare:a,between:l,normalize:c}=jn(n),{start:h,end:u,loop:d,style:f}=function(t,e,i){const{property:n,start:r,end:o}=i,{between:s,normalize:a}=jn(n),l=e.length;let c,h,{start:u,end:d,loop:f}=t;if(f){for(u+=l,d+=l,c=0,h=l;c<h&&s(a(e[u%l][n]),r,o);++c)u--,d--;u%=l,d%=l}return d<u&&(d+=l),{start:u,end:d,loop:f,style:t.style}}(t,e,i),p=[];let g,m,y,b=!1,v=null;const x=()=>b||l(r,y,g)&&0!==a(r,y),w=()=>!b||0===a(o,g)||l(o,y,g);for(let t=h,i=h;t<=u;++t)m=e[t%s],m.skip||(g=c(m[n]),g!==y&&(b=l(g,r,o),null===v&&x()&&(v=0===a(g,r)?t:i),null!==v&&w()&&(p.push(Fn({start:v,end:t,loop:d,count:s,style:f})),v=null),i=t,y=g));return null!==v&&p.push(Fn({start:v,end:u,loop:d,count:s,style:f})),p}function Vn(t,e){const i=[],n=t.segments;for(let r=0;r<n.length;r++){const o=zn(n[r],t.points,e);o.length&&i.push(...o)}return i}function Bn(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const r=t._chart.getContext(),o=Hn(t.options),{_datasetIndex:s,options:{spanGaps:a}}=t,l=i.length,c=[];let h=o,u=e[0].start,d=u;function f(t,e,n,r){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:n,style:r}),h=r,u=e%l)}}for(const t of e){u=a?u:t.start;let e,o=i[u%l];for(d=u+1;d<=t.end;d++){const a=i[d%l];e=Hn(n.setContext(Xi(r,{type:"segment",p0:o,p1:a,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:s}))),Wn(e,h)&&f(u,d-1,t.loop,h),o=a,h=e}u<d-1&&f(u,d-1,t.loop,h)}return c}(t,e,i,n):e}function Hn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Wn(t,e){if(!e)return!1;const i=[],n=function(t,e){return ci(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
class Un{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const r=e.listeners[n],o=e.duration;r.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=Qe.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const r=i.items;let o,s=r.length-1,a=!1;for(;s>=0;--s)o=r[s],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(r[s]=r[r.length-1],r.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),r.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var Yn=new Un;const $n="transparent",Kn={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=hi(t||$n),r=n.valid&&hi(e||$n);return r&&r.valid?r.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class Gn{constructor(t,e,i,n){const r=e[i];n=Gi([t.to,n,r,t.from]);const o=Gi([t.from,r,n]);this._active=!0,this._fn=t.fn||Kn[t.type||typeof o],this._easing=li[t.easing]||li.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],r=i-this._start,o=this._duration-r;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=Gi([t.to,e,n,t.from]),this._from=Gi([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,r=this._from,o=this._loop,s=this._to;let a;if(this._active=r!==s&&(o||e<i),!this._active)return this._target[n]=s,void this._notify(!0);e<0?this._target[n]=r:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(r,s,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Xn{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!ne(t))return;const e=Object.keys(ki.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const r=t[n];if(!ne(r))return;const o={};for(const t of e)o[t]=r[t];(ie(r.properties)&&r.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!n)return[];const r=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const r=t[n[e]];r&&r.active()&&i.push(r.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),r}_createAnimations(t,e){const i=this._properties,n=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),s=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const c=e[l];let h=r[l];const u=i.get(l);if(h){if(u&&h.active()){h.update(u,c,s);continue}h.cancel()}u&&u.duration?(r[l]=h=new Gn(u,t,l,c),n.push(h)):t[l]=c}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(Yn.add(this._chart,i),!0):void 0}}function qn(t,e){const i=t&&t.options||{},n=i.reverse,r=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:r,end:n?r:o}}function Jn(t,e){const i=[],n=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=n.length;r<o;++r)i.push(n[r].index);return i}function Zn(t,e,i,n={}){const r=t.keys,o="single"===n.mode;let s,a,l,c;if(null!==e){for(s=0,a=r.length;s<a;++s){if(l=+r[s],l===i){if(n.all)continue;break}c=t.values[l],re(c)&&(o||0===e||Re(e)===Re(c))&&(e+=c)}return e}}function Qn(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function tr(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function er(t,e,i,n){for(const r of e.getMatchingVisibleMetas(n).reverse()){const e=t[r.index];if(i&&e>0||!i&&e<0)return r.index}return null}function ir(t,e){const{chart:i,_cachedMeta:n}=t,r=i._stacks||(i._stacks={}),{iScale:o,vScale:s,index:a}=n,l=o.axis,c=s.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,s,n),u=e.length;let d;for(let t=0;t<u;++t){const i=e[t],{[l]:o,[c]:u}=i;d=(i._stacks||(i._stacks={}))[c]=tr(r,h,o),d[a]=u,d._top=er(d,s,!0,n.type),d._bottom=er(d,s,!1,n.type);(d._visualValues||(d._visualValues={}))[a]=u}}function nr(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function rr(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const or=t=>"reset"===t||"none"===t,sr=(t,e)=>e?t:Object.assign({},t);class ar{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Qn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&rr(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,r=e.xAxisID=se(i.xAxisID,nr(t,"x")),o=e.yAxisID=se(i.yAxisID,nr(t,"y")),s=e.rAxisID=se(i.rAxisID,nr(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,r,o,s),c=e.vAxisID=n(a,o,r,s);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(s),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Je(this._data,this),t._stacked&&rr(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(ne(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,r,o;for(n=0,r=e.length;n<r;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){Je(i,this);const t=this._cachedMeta;rr(t),t._parsed=[]}e&&Object.isExtensible(e)&&(r=this,(n=e)._chartjs?n._chartjs.listeners.push(r):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[r]}}),qe.forEach((t=>{const e="_onData"+ve(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const r=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),r}})})))),this._syncList=[],this._data=e}var n,r}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const r=e._stacked;e._stacked=Qn(e.vScale,e),e.stack!==i.stack&&(n=!0,rr(e),e.stack=i.stack),this._resyncElements(t),(n||r!==e._stacked)&&ir(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:r,_stacked:o}=i,s=r.axis;let a,l,c,h=0===t&&e===n.length||i._sorted,u=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,c=n;else{c=ie(n[t])?this.parseArrayData(i,n,t,e):ne(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const r=()=>null===l[s]||u&&l[s]<u[s];for(a=0;a<e;++a)i._parsed[a+t]=l=c[a],h&&(r()&&(h=!1),u=l);i._sorted=h}o&&ir(this,c)}parsePrimitiveData(t,e,i,n){const{iScale:r,vScale:o}=t,s=r.axis,a=o.axis,l=r.getLabels(),c=r===o,h=new Array(n);let u,d,f;for(u=0,d=n;u<d;++u)f=u+i,h[u]={[s]:c||r.parse(l[f],f),[a]:o.parse(e[f],f)};return h}parseArrayData(t,e,i,n){const{xScale:r,yScale:o}=t,s=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],s[a]={x:r.parse(h[0],c),y:o.parse(h[1],c)};return s}parseObjectData(t,e,i,n){const{xScale:r,yScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let c,h,u,d;for(c=0,h=n;c<h;++c)u=c+i,d=e[u],l[c]={x:r.parse(be(d,s),u),y:o.parse(be(d,a),u)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,r=this._cachedMeta,o=e[t.axis];return Zn({keys:Jn(n,!0),values:e._stacks[t.axis]._visualValues},o,r.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const r=i[e.axis];let o=null===r?NaN:r;const s=n&&i._stacks[e.axis];n&&s&&(n.values=s,o=Zn(n,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,r=i._sorted&&t===i.iScale,o=n.length,s=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Jn(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:i,minDefined:n,maxDefined:r}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:r?i:Number.POSITIVE_INFINITY}}(s);let u,d;function f(){d=n[u];const e=d[s.axis];return!re(d[t.axis])||c>e||h<e}for(u=0;u<o&&(f()||(this.updateRangeFromParsed(l,t,d,a),!r));++u);if(r)for(u=o-1;u>=0;--u)if(!f()){this.updateRangeFromParsed(l,t,d,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,r,o;for(n=0,r=e.length;n<r;++n)o=e[n][t.axis],re(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,r=this.getParsed(t);return{label:i?""+i.getLabelForValue(r[i.axis]):"",value:n?""+n.getLabelForValue(r[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,r;return ne(t)?(e=t.top,i=t.right,n=t.bottom,r=t.left):e=i=n=r=t,{top:e,right:i,bottom:n,left:r,disabled:!1===t}}(se(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=qn(t,i),r=qn(e,i);return{top:r.end,right:n.end,bottom:r.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],r=e.chartArea,o=[],s=this._drawStart||0,a=this._drawCount||n.length-s,l=this.options.drawActiveElementsOnTop;let c;for(i.dataset&&i.dataset.draw(t,r,s,a),c=s;c<s+a;++c){const e=n[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,r))}for(c=0;c<o.length;++c)o[c].draw(t,r)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,i){return Xi(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=n.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return Xi(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=n,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=i,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,r=this._cachedDataOpts,o=t+"-"+e,s=r[o],a=this.enableOptionSharing&&xe(i);if(s)return sr(s,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),h=n?[`${t}Hover`,"hover",t,""]:[t,""],u=l.getOptionScopes(this.getDataset(),c),d=Object.keys(ki.elements[t]),f=l.resolveNamedOptions(u,d,(()=>this.getContext(i,n,e)),h);return f.$shared&&(f.$shared=a,r[o]=Object.freeze(sr(f,a))),f}_resolveAnimations(t,e,i){const n=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,s=r[o];if(s)return s;let a;if(!1!==n.options.animation){const n=this.chart.config,r=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),r);a=n.createResolver(o,this.getContext(t,i,e))}const l=new Xn(n,a&&a.animations);return a&&a._cacheable&&(r[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||or(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,r=this.getSharedOptions(i),o=this.includeOptions(e,r)||r!==n;return this.updateSharedOptions(r,e,i),{sharedOptions:r,includeOptions:o}}updateElement(t,e,i,n){or(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!or(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const r=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,r=e.length,o=Math.min(r,n);o&&this.parse(0,o),r>n?this._insertElements(n,r-n,t):r<n&&this._removeElements(r,n-r)}_insertElements(t,e,i=!0){const n=this._cachedMeta,r=n.data,o=t+e;let s;const a=t=>{for(t.length+=e,s=t.length-1;s>=o;s--)t[s]=t[s-e]};for(a(r),s=t;s<o;++s)r[s]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(r,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&rr(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function lr(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,r=i.length;e<r;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=Ze(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,r,o,s,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(xe(s)&&(a=Math.min(a,Math.abs(o-s)||a)),s=o)};for(n=0,r=i.length;n<r;++n)o=e.getPixelForValue(i[n]),l();for(s=void 0,n=0,r=e.ticks.length;n<r;++n)o=e.getPixelForTick(n),l();return a}function cr(t,e,i,n){return ie(t)?function(t,e,i,n){const r=i.parse(t[0],n),o=i.parse(t[1],n),s=Math.min(r,o),a=Math.max(r,o);let l=s,c=a;Math.abs(s)>Math.abs(a)&&(l=a,c=s),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:r,end:o,min:s,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function hr(t,e,i,n){const r=t.iScale,o=t.vScale,s=r.getLabels(),a=r===o,l=[];let c,h,u,d;for(c=i,h=i+n;c<h;++c)d=e[c],u={},u[r.axis]=a||r.parse(s[c],c),l.push(cr(d,u,o,c));return l}function ur(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function dr(t,e,i,n){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);if(!0===r)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:s,end:a,reverse:l,top:c,bottom:h}=function(t){let e,i,n,r,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(r="end",o="start"):(r="start",o="end"),{start:i,end:n,reverse:e,top:r,bottom:o}}(t);"middle"===r&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?r=c:(i._bottom||0)===n?r=h:(o[fr(h,s,a,l)]=!0,r=c)),o[fr(r,s,a,l)]=!0,t.borderSkipped=o}function fr(t,e,i,n){var r,o,s;return n?(s=i,t=pr(t=(r=t)===(o=e)?s:r===s?o:r,i,e)):t=pr(t,e,i),t}function pr(t,e,i){return"start"===t?e:"end"===t?i:t}function gr(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class mr extends ar{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,r)=>{const o=t.getDatasetMeta(0).controller.getStyle(r);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(r),index:r}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let r,o,s=t=>+i[t];if(ne(i[t])){const{key:t="value"}=this._parsing;s=e=>+be(i[e],t)}for(r=t,o=t+e;r<o;++r)n._parsed[r]=s(r)}}_getRotation(){return je(this.options.rotation-90)}_getCircumference(){return je(this.options.circumference)}_getRotationExtents(){let t=Se,e=-Se;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,r=n._getRotation(),o=n._getCircumference();t=Math.min(t,r),e=Math.max(e,r+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,r=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,s=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((l=this.options.cutout,c=s,"string"==typeof l&&l.endsWith("%")?parseFloat(l)/100:+l/c),1);var l,c;const h=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,i){let n=1,r=1,o=0,s=0;if(e<Se){const a=t,l=a+e,c=Math.cos(a),h=Math.sin(a),u=Math.cos(l),d=Math.sin(l),f=(t,e,n)=>Ue(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>Ue(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=f(0,c,u),m=f(Pe,h,d),y=p(ke,c,u),b=p(ke+Pe,h,d);n=(g-y)/2,r=(m-b)/2,o=-(g+y)/2,s=-(m+b)/2}return{ratioX:n,ratioY:r,offsetX:o,offsetY:s}}(d,u,a),y=(i.width-o)/f,b=(i.height-o)/p,v=Math.max(Math.min(y,b)/2,0),x=ae(this.options.radius,v),w=(x-Math.max(x*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*x,this.offsetY=m*x,n.total=this.calculateTotal(),this.outerRadius=x-w*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-w*h,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,r=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*r/Se)}updateElements(t,e,i,n){const r="reset"===n,o=this.chart,s=o.chartArea,a=o.options.animation,l=(s.left+s.right)/2,c=(s.top+s.bottom)/2,h=r&&a.animateScale,u=h?0:this.innerRadius,d=h?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,r);for(g=e;g<e+i;++g){const e=this._circumference(g,r),i=t[g],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:d,innerRadius:u};p&&(o.options=f||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const r=t._parsed[i];null===r||isNaN(r)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(r))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Se*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],r=gi(e._parsed[t],i.options.locale);return{label:n[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,r,o,s,a;if(!t)for(n=0,r=i.data.datasets.length;n<r;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,s=o.controller;break}if(!t)return 0;for(n=0,r=t.length;n<r;++n)a=s.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(se(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class yr extends ar{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,r)=>{const o=t.getDatasetMeta(0).controller.getStyle(r);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(r),index:r}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],r=gi(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:r}}parseObjectData(t,e,i,n){return hn.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(n/2,0),o=(r-Math.max(i.cutoutPercentage?r/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const r="reset"===n,o=this.chart,s=o.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,c=a.yCenter,h=a.getIndexAngle(0)-.5*ke;let u,d=h;const f=360/this.countVisibleElements();for(u=0;u<e;++u)d+=this._computeAngle(u,n,f);for(u=e;u<e+i;u++){const e=t[u];let i=d,p=d+this._computeAngle(u,n,f),g=o.getDataVisibility(u)?a.getDistanceFromCenterForValue(this.getParsed(u).r):0;d=p,r&&(s.animateScale&&(g=0),s.animateRotate&&(i=p=h));const m={x:l,y:c,innerRadius:0,outerRadius:g,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(u,e.active?"active":n)};this.updateElement(e,u,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?je(this.resolveDataElementOptions(t,e).angle||i):0}}var br=Object.freeze({__proto__:null,BarController:class extends ar{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return hr(t,e,i,n)}parseArrayData(t,e,i,n){return hr(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:r,vScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l="x"===r.axis?s:a,c="x"===o.axis?s:a,h=[];let u,d,f,p;for(u=i,d=i+n;u<d;++u)p=e[u],f={},f[r.axis]=r.parse(be(p,l),u),h.push(cr(be(p,c),f,o,u));return h}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const r=i._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,r=this.getParsed(t),o=r._custom,s=ur(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(r[n.axis]);return{label:""+i.getLabelForValue(r[i.axis]),value:s}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const r="reset"===n,{index:o,_cachedMeta:{vScale:s}}=this,a=s.getBasePixel(),l=s.isHorizontal(),c=this._getRuler(),{sharedOptions:h,includeOptions:u}=this._getSharedOptions(e,n);for(let d=e;d<e+i;d++){const e=this.getParsed(d),i=r||ee(e[s.axis])?{base:a,head:a}:this._calculateBarValuePixels(d),f=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[s.axis],g={horizontal:l,base:i.base,enableBorderRadius:!p||ur(e._custom)||o===p._top||o===p._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};u&&(g.options=h||this.resolveDataElementOptions(d,t[d].active?"active":n));const m=g.options||t[d].options;dr(g,m,p,o),gr(g,m,c.ratio),this.updateElement(t[d],d,g,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),r=i.options.stacked,o=[],s=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(ee(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!s(i))&&((!1===r||-1===o.indexOf(i.stack)||void 0===r&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),r=void 0!==e?n.indexOf(e):-1;return-1===r?n.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let r,o;for(r=0,o=e.data.length;r<o;++r)n.push(i.getPixelForValue(this.getParsed(r)[i.axis],r));const s=t.barThickness;return{min:s||lr(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:r,minBarLength:o}}=this,s=r||0,a=this.getParsed(t),l=a._custom,c=ur(l);let h,u,d=a[e.axis],f=0,p=i?this.applyStack(e,a,i):d;p!==d&&(f=p-d,p=d),c&&(d=l.barStart,p=l.barEnd-l.barStart,0!==d&&Re(d)!==Re(l.barEnd)&&(f=0),f+=d);const g=ee(r)||c?f:r;let m=e.getPixelForValue(g);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,u=h-m,Math.abs(u)<o){u=function(t,e,i){return 0!==t?Re(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(u,e,s)*o,d===s&&(m-=u/2);const t=e.getPixelForDecimal(0),r=e.getPixelForDecimal(1),l=Math.min(t,r),f=Math.max(t,r);m=Math.max(Math.min(m,f),l),h=m+u,i&&!c&&(a._stacks[e.axis]._visualValues[n]=e.getValueForPixel(h)-e.getValueForPixel(m))}if(m===e.getPixelForValue(s)){const t=Re(u)*e.getLineWidthForValue(s)/2;m+=t,u-=t}return{size:u,base:m,head:h,center:h+u/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,r=n.skipNull,o=se(n.maxBarThickness,1/0);let s,a;if(e.grouped){const i=r?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const r=e.pixels,o=r[t];let s=t>0?r[t-1]:null,a=t<r.length-1?r[t+1]:null;const l=i.categoryPercentage;null===s&&(s=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-s);const c=o-(o-Math.min(s,a))/2*l;return{chunk:Math.abs(a-s)/2*l/n,ratio:i.barPercentage,start:c}}(t,e,n,i):function(t,e,i,n){const r=i.barThickness;let o,s;return ee(r)?(o=e.min*i.categoryPercentage,s=i.barPercentage):(o=r*n,s=1),{chunk:o/n,ratio:s,start:e.pixels[t]-o/2}}(t,e,n,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);s=l.start+l.chunk*c+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else s=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:s-a/2,head:s+a/2,center:s,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let r=0;for(;r<n;++r)null!==this.getParsed(r)[e.axis]&&i[r].draw(this._ctx)}},BubbleController:class extends ar{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const r=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+i).radius;return r}parseArrayData(t,e,i,n){const r=super.parseArrayData(t,e,i,n);for(let t=0;t<r.length;t++){const n=e[i+t];r[t]._custom=se(n[2],this.resolveDataElementOptions(t+i).radius)}return r}parseObjectData(t,e,i,n){const r=super.parseObjectData(t,e,i,n);for(let t=0;t<r.length;t++){const n=e[i+t];r[t]._custom=se(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:r}=e,o=this.getParsed(t),s=n.getLabelForValue(o.x),a=r.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+s+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const r="reset"===n,{iScale:o,vScale:s}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),c=o.axis,h=s.axis;for(let u=e;u<e+i;u++){const e=t[u],i=!r&&this.getParsed(u),d={},f=d[c]=r?o.getPixelForDecimal(.5):o.getPixelForValue(i[c]),p=d[h]=r?s.getBasePixel():s.getPixelForValue(i[h]);d.skip=isNaN(f)||isNaN(p),l&&(d.options=a||this.resolveDataElementOptions(u,e.active?"active":n),r&&(d.options.radius=0)),this.updateElement(e,u,d,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const r=n.radius;return"active"!==e&&(n.radius=0),n.radius+=se(i&&i._custom,r),n}},DoughnutController:mr,LineController:class extends ar{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:r}=e,o=this.chart._animationsDisabled;let{start:s,count:a}=ni(e,n,o);this._drawStart=s,this._drawCount=a,ri(e)&&(s=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!r._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,s,a,t)}updateElements(t,e,i,n){const r="reset"===n,{iScale:o,vScale:s,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:h}=this._getSharedOptions(e,n),u=o.axis,d=s.axis,{spanGaps:f,segment:p}=this.options,g=Te(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||r||"none"===n,y=e+i,b=t.length;let v=e>0&&this.getParsed(e-1);for(let i=0;i<b;++i){const f=t[i],b=m?f:{};if(i<e||i>=y){b.skip=!0;continue}const x=this.getParsed(i),w=ee(x[d]),_=b[u]=o.getPixelForValue(x[u],i),k=b[d]=r||w?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,x,a):x[d],i);b.skip=isNaN(_)||isNaN(k)||w,b.stop=i>0&&Math.abs(x[u]-v[u])>g,p&&(b.parsed=x,b.raw=l.data[i]),h&&(b.options=c||this.resolveDataElementOptions(i,f.active?"active":n)),m||this.updateElement(f,i,b,n),v=x}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const r=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,r,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends mr{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:yr,RadarController:class extends ar{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return hn.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],r=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:r.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const r=this._cachedMeta.rScale,o="reset"===n;for(let s=e;s<e+i;s++){const e=t[s],i=this.resolveDataElementOptions(s,e.active?"active":n),a=r.getPointPositionForValue(s,this.getParsed(s).r),l=o?r.xCenter:a.x,c=o?r.yCenter:a.y,h={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,s,h,n)}}},ScatterController:class extends ar{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:r}=e,o=this.getParsed(t),s=n.getLabelForValue(o.x),a=r.getLabelForValue(o.y);return{label:i[t]||"",value:"("+s+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:r,count:o}=ni(e,i,n);if(this._drawStart=r,this._drawCount=o,ri(e)&&(r=0,o=i.length),this.options.showLine){const{dataset:r,_dataset:o}=e;r._chart=this.chart,r._datasetIndex=this.index,r._decimated=!!o._decimated,r.points=i;const s=this.resolveDatasetElementOptions(t);s.segment=this.options.segment,this.updateElement(r,void 0,{animated:!n,options:s},t)}this.updateElements(i,r,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const r="reset"===n,{iScale:o,vScale:s,_stacked:a,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,n),h=this.getSharedOptions(c),u=this.includeOptions(n,h),d=o.axis,f=s.axis,{spanGaps:p,segment:g}=this.options,m=Te(p)?p:Number.POSITIVE_INFINITY,y=this.chart._animationsDisabled||r||"none"===n;let b=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),p=y?e:{},v=ee(i[f]),x=p[d]=o.getPixelForValue(i[d],c),w=p[f]=r||v?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,i,a):i[f],c);p.skip=isNaN(x)||isNaN(w)||v,p.stop=c>0&&Math.abs(i[d]-b[d])>m,g&&(p.parsed=i,p.raw=l.data[c]),u&&(p.options=h||this.resolveDataElementOptions(c,e.active?"active":n)),y||this.updateElement(e,c,p,n),b=i}this.updateSharedOptions(h,n,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const r=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,r,o)/2}}});function vr(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class xr{static override(t){Object.assign(xr.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return vr()}parse(){return vr()}format(){return vr()}add(){return vr()}diff(){return vr()}startOf(){return vr()}endOf(){return vr()}}var wr=xr;function _r(t,e,i,n){const{controller:r,data:o,_sorted:s}=t,a=r._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&s&&o.length){const t=a._reversePixels?Xe:Ge;if(!n)return t(o,e,i);if(r._sharedOptions){const n=o[0],r="function"==typeof n.getRange&&n.getRange(e);if(r){const n=t(o,e,i-r),s=t(o,e,i+r);return{lo:n.lo,hi:s.hi}}}}return{lo:0,hi:o.length-1}}function kr(t,e,i,n,r){const o=t.getSortedVisibleDatasetMetas(),s=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:c}=_r(o[t],e,s,r);for(let t=l;t<=c;++t){const e=a[t];e.skip||n(e,i,t)}}}function Sr(t,e,i,n,r){const o=[];if(!r&&!t.isPointInArea(e))return o;return kr(t,i,e,(function(i,s,a){(r||Ei(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&o.push({element:i,datasetIndex:s,index:a})}),!0),o}function Or(t,e,i,n,r,o){let s=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const r=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return kr(t,i,e,(function(i,c,h){const u=i.inRange(e.x,e.y,r);if(n&&!u)return;const d=i.getCenterPoint(r);if(!(!!o||t.isPointInArea(d))&&!u)return;const f=a(e,d);f<l?(s=[{element:i,datasetIndex:c,index:h}],l=f):f===l&&s.push({element:i,datasetIndex:c,index:h})})),s}function Mr(t,e,i,n,r,o){return o||t.isPointInArea(e)?"r"!==i||n?Or(t,e,i,n,r,o):function(t,e,i,n){let r=[];return kr(t,i,e,(function(t,i,o){const{startAngle:s,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=Ve(t,{x:e.x,y:e.y});Ue(l,s,a)&&r.push({element:t,datasetIndex:i,index:o})})),r}(t,e,i,r):[]}function Ar(t,e,i,n,r){const o=[],s="x"===i?"inXRange":"inYRange";let a=!1;return kr(t,i,e,((t,n,l)=>{t[s](e[i],r)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,r))})),n&&!a?[]:o}var Pr={evaluateInteractionItems:kr,modes:{index(t,e,i,n){const r=On(e,t),o=i.axis||"x",s=i.includeInvisible||!1,a=i.intersect?Sr(t,r,o,n,s):Mr(t,r,o,!1,n,s),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const r=On(e,t),o=i.axis||"xy",s=i.includeInvisible||!1;let a=i.intersect?Sr(t,r,o,n,s):Mr(t,r,o,!1,n,s);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>Sr(t,On(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const r=On(e,t),o=i.axis||"xy",s=i.includeInvisible||!1;return Mr(t,r,o,i.intersect,n,s)},x:(t,e,i,n)=>Ar(t,On(e,t),"x",i.intersect,n),y:(t,e,i,n)=>Ar(t,On(e,t),"y",i.intersect,n)}};const Cr=["left","top","right","bottom"];function Er(t,e){return t.filter((t=>t.pos===e))}function Lr(t,e){return t.filter((t=>-1===Cr.indexOf(t.pos)&&t.box.axis===e))}function Rr(t,e){return t.sort(((t,i)=>{const n=e?i:t,r=e?t:i;return n.weight===r.weight?n.index-r.index:n.weight-r.weight}))}function Dr(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:r}=i;if(!t||!Cr.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:r}=e;let o,s,a;for(o=0,s=t.length;o<s;++o){a=t[o];const{fullSize:s}=a.box,l=i[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*n:s&&e.availableWidth,a.height=r):(a.width=n,a.height=c?c*r:s&&e.availableHeight)}return i}function Ir(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function Tr(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Nr(t,e,i,n){const{pos:r,box:o}=i,s=t.maxPadding;if(!ne(r)){i.size&&(t[r]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[r]+=i.size}o.getPadding&&Tr(s,o.getPadding());const a=Math.max(0,e.outerWidth-Ir(s,t,"left","right")),l=Math.max(0,e.outerHeight-Ir(s,t,"top","bottom")),c=a!==t.w,h=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:c,other:h}:{same:h,other:c}}function jr(t,e){const i=e.maxPadding;function n(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}return n(t?["left","right"]:["top","bottom"])}function Fr(t,e,i,n){const r=[];let o,s,a,l,c,h;for(o=0,s=t.length,c=0;o<s;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,jr(a.horizontal,e));const{same:s,other:u}=Nr(e,i,a,n);c|=s&&r.length,h=h||u,l.fullSize||r.push(a)}return c&&Fr(r,e,i,n)||h}function zr(t,e,i,n,r){t.top=i,t.left=e,t.right=e+n,t.bottom=i+r,t.width=n,t.height=r}function Vr(t,e,i,n){const r=i.padding;let{x:o,y:s}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*c,o=l.size||t.height;xe(l.start)&&(s=l.start),t.fullSize?zr(t,r.left,s,i.outerWidth-r.right-r.left,o):zr(t,e.left+l.placed,s,n,o),l.start=s,l.placed+=n,s=t.bottom}else{const n=e.h*c,s=l.size||t.width;xe(l.start)&&(o=l.start),t.fullSize?zr(t,o,r.top,s,i.outerHeight-r.bottom-r.top):zr(t,o,e.top+l.placed,s,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=s}var Br={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const r=$i(t.options.layout.padding),o=Math.max(e-r.width,0),s=Math.max(i-r.height,0),a=function(t){const e=function(t){const e=[];let i,n,r,o,s,a;for(i=0,n=(t||[]).length;i<n;++i)r=t[i],({position:o,options:{stack:s,stackWeight:a=1}}=r),e.push({index:i,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:s&&o+s,stackWeight:a});return e}(t),i=Rr(e.filter((t=>t.box.fullSize)),!0),n=Rr(Er(e,"left"),!0),r=Rr(Er(e,"right")),o=Rr(Er(e,"top"),!0),s=Rr(Er(e,"bottom")),a=Lr(e,"x"),l=Lr(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:r.concat(l).concat(s).concat(a),chartArea:Er(e,"chartArea"),vertical:n.concat(r).concat(l),horizontal:o.concat(s).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;ce(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,u=Object.freeze({outerWidth:e,outerHeight:i,padding:r,availableWidth:o,availableHeight:s,vBoxMaxWidth:o/2/h,hBoxMaxHeight:s/2}),d=Object.assign({},r);Tr(d,$i(n));const f=Object.assign({maxPadding:d,w:o,h:s,x:r.left,y:r.top},r),p=Dr(l.concat(c),u);Fr(a.fullSize,f,u,p),Fr(l,f,u,p),Fr(c,f,u,p)&&Fr(l,f,u,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),Vr(a.leftAndTop,f,u,p),f.x+=f.w,f.y+=f.h,Vr(a.rightAndBottom,f,u,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},ce(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Hr{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class Wr extends Hr{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Ur="$chartjs",Yr={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},$r=t=>null===t||""===t;const Kr=!!Cn&&{passive:!0};function Gr(t,e,i){t.canvas.removeEventListener(e,i,Kr)}function Xr(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function qr(t,e,i){const n=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Xr(i.addedNodes,n),e=e&&!Xr(i.removedNodes,n);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}function Jr(t,e,i){const n=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Xr(i.removedNodes,n),e=e&&!Xr(i.addedNodes,n);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}const Zr=new Map;let Qr=0;function to(){const t=window.devicePixelRatio;t!==Qr&&(Qr=t,Zr.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function eo(t,e,i){const n=t.canvas,r=n&&vn(n);if(!r)return;const o=ti(((t,e)=>{const n=r.clientWidth;i(t,e),n<r.clientWidth&&i()}),window),s=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||o(i,n)}));return s.observe(r),function(t,e){Zr.size||window.addEventListener("resize",to),Zr.set(t,e)}(t,o),s}function io(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Zr.delete(t),Zr.size||window.removeEventListener("resize",to)}(t)}function no(t,e,i){const n=t.canvas,r=ti((e=>{null!==t.ctx&&i(function(t,e){const i=Yr[t.type]||t.type,{x:n,y:r}=On(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==r?r:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,Kr)}(n,e,r),r}class ro extends Hr{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),r=t.getAttribute("width");if(t[Ur]={initial:{height:n,width:r,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",$r(r)){const e=En(t,"width");void 0!==e&&(t.width=e)}if($r(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=En(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[Ur])return!1;const i=e[Ur].initial;["height","width"].forEach((t=>{const n=i[t];ee(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[Ur],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),r={attach:qr,detach:Jr,resize:eo}[e]||no;n[e]=r(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];if(!n)return;({attach:io,detach:io,resize:io}[e]||Gr)(t,e,n),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return An(t,e,i,n)}isAttached(t){const e=vn(t);return!(!e||!e.isConnected)}}class oo{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Te(this.x)&&Te(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function so(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),r=t._maxLength/i;return Math.floor(Math.min(n,r))}(t),r=Math.min(i.maxTicksLimit||n,n),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],s=o.length,a=o[0],l=o[s-1],c=[];if(s>r)return function(t,e,i,n){let r,o=0,s=i[0];for(n=Math.ceil(n),r=0;r<t.length;r++)r===s&&(e.push(t[r]),o++,s=i[o*n])}(e,c,o,s/r),c;const h=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),r=e.length/i;if(!n)return Math.max(r,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(o,e,r);if(s>0){let t,i;const n=s>1?Math.round((l-a)/(s-1)):null;for(ao(e,c,h,ee(n)?0:a-n,a),t=0,i=s-1;t<i;t++)ao(e,c,h,o[t],o[t+1]);return ao(e,c,h,l,ee(n)?e.length:l+n),c}return ao(e,c,h),c}function ao(t,e,i,n,r){const o=se(n,0),s=Math.min(se(r,t.length),t.length);let a,l,c,h=0;for(i=Math.ceil(i),r&&(a=r-n,i=a/Math.floor(a/i)),c=o;c<0;)h++,c=Math.round(o+h*i);for(l=Math.max(o,0);l<s;l++)l===c&&(e.push(t[l]),h++,c=Math.round(o+h*i))}const lo=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,co=(t,e)=>Math.min(e||t,t);function ho(t,e){const i=[],n=t.length/e,r=t.length;let o=0;for(;o<r;o+=n)i.push(t[Math.floor(o)]);return i}function uo(t,e,i){const n=t.ticks.length,r=Math.min(e,n-1),o=t._startPixel,s=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(r);if(!(i&&(l=1===n?Math.max(c-o,s-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(r-1))/2,c+=r<e?l:-l,c<o-a||c>s+a)))return c}function fo(t){return t.drawTicks?t.tickLength:0}function po(t,e){if(!t.display)return 0;const i=Ki(t.font,e),n=$i(t.padding);return(ie(t.text)?t.text.length:1)*i.lineHeight+n.height}function go(t,e,i){let n=ei(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class mo extends oo{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=oe(t,Number.POSITIVE_INFINITY),e=oe(e,Number.NEGATIVE_INFINITY),i=oe(i,Number.POSITIVE_INFINITY),n=oe(n,Number.NEGATIVE_INFINITY),{min:oe(t,i),max:oe(e,n),minDefined:re(t),maxDefined:re(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:i,max:n};const s=this.getMatchingVisibleMetas();for(let a=0,l=s.length;a<l;++a)e=s[a].controller.getMinMax(this,t),r||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=r&&i>n?i:n,{min:oe(i,oe(n,i)),max:oe(n,oe(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){le(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:r,ticks:o}=this.options,s=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:r}=t,o=ae(e,(r-n)/2),s=(t,e)=>i&&0===t?0:t+e;return{min:s(n,-Math.abs(o)),max:s(r,o)}}(this,r,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=s<this.ticks.length;this._convertTicksToLabels(a?ho(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=so(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){le(this.options.afterUpdate,[this])}beforeSetDimensions(){le(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){le(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),le(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){le(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,r;for(i=0,n=t.length;i<n;i++)r=t[i],r.label=le(e.callback,[r.value,i,t],this)}afterTickToLabelConversion(){le(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){le(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=co(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,r=e.maxRotation;let o,s,a,l=n;if(!this._isVisible()||!e.display||n>=r||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const c=this._getLabelSizes(),h=c.widest.width,u=c.highest.height,d=Ye(this.chart.width-h,0,this.maxWidth);o=t.offset?this.maxWidth/i:d/(i-1),h+6>o&&(o=d/(i-(t.offset?.5:1)),s=this.maxHeight-fo(t.grid)-e.padding-po(t.title,this.chart.options.font),a=Math.sqrt(h*h+u*u),l=Fe(Math.min(Math.asin(Ye((c.highest.height+6)/o,-1,1)),Math.asin(Ye(s/a,-1,1))-Math.asin(Ye(u/a,-1,1)))),l=Math.max(n,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){le(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){le(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:r}}=this,o=this._isVisible(),s=this.isHorizontal();if(o){const o=po(n,e.options.font);if(s?(t.width=this.maxWidth,t.height=fo(r)+o):(t.height=this.maxHeight,t.width=fo(r)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:r,highest:o}=this._getLabelSizes(),a=2*i.padding,l=je(this.labelRotation),c=Math.cos(l),h=Math.sin(l);if(s){const e=i.mirror?0:h*r.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:c*r.width+h*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,h,c)}}this._handleMargins(),s?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:r,padding:o},position:s}=this.options,a=0!==this.labelRotation,l="top"!==s&&"x"===this.axis;if(this.isHorizontal()){const s=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,u=0;a?l?(h=n*t.width,u=i*e.height):(h=i*t.height,u=n*e.width):"start"===r?u=e.width:"end"===r?h=t.width:"inner"!==r&&(h=t.width/2,u=e.width/2),this.paddingLeft=Math.max((h-s+o)*this.width/(this.width-s),0),this.paddingRight=Math.max((u-c+o)*this.width/(this.width-c),0)}else{let i=e.height/2,n=t.height/2;"start"===r?(i=0,n=t.height):"end"===r&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){le(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)ee(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=ho(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:r}=this,o=[],s=[],a=Math.floor(e/co(e,i));let l,c,h,u,d,f,p,g,m,y,b,v=0,x=0;for(l=0;l<e;l+=a){if(u=t[l].label,d=this._resolveTickFontOptions(l),n.font=f=d.string,p=r[f]=r[f]||{data:{},gc:[]},g=d.lineHeight,m=y=0,ee(u)||ie(u)){if(ie(u))for(c=0,h=u.length;c<h;++c)b=u[c],ee(b)||ie(b)||(m=Si(n,p.data,p.gc,m,b),y+=g)}else m=Si(n,p.data,p.gc,m,u),y=g;o.push(m),s.push(y),v=Math.max(m,v),x=Math.max(y,x)}!function(t,e){ce(t,(t=>{const i=t.gc,n=i.length/2;let r;if(n>e){for(r=0;r<n;++r)delete t.data[i[r]];i.splice(0,n)}}))}(r,e);const w=o.indexOf(v),_=s.indexOf(x),k=t=>({width:o[t]||0,height:s[t]||0});return{first:k(0),last:k(e-1),widest:k(w),highest:k(_),widths:o,heights:s}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Ye(this._alignToPixels?Mi(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Xi(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Xi(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=je(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,s=r?r.widest.width+o:0,a=r?r.highest.height+o:0;return this.isHorizontal()?a*i>s*n?s/i:a/n:a*n<s*i?a/i:s/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:r,position:o,border:s}=n,a=r.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),h=fo(r),u=[],d=s.setContext(this.getContext()),f=d.display?d.width:0,p=f/2,g=function(t){return Mi(i,t,f)};let m,y,b,v,x,w,_,k,S,O,M,A;if("top"===o)m=g(this.bottom),w=this.bottom-h,k=m-p,O=g(t.top)+p,A=t.bottom;else if("bottom"===o)m=g(this.top),O=t.top,A=g(t.bottom)-p,w=m+p,k=this.top+h;else if("left"===o)m=g(this.right),x=this.right-h,_=m-p,S=g(t.left)+p,M=t.right;else if("right"===o)m=g(this.left),S=t.left,M=g(t.right)-p,x=m+p,_=this.left+h;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if(ne(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}O=t.top,A=t.bottom,w=m+p,k=w+h}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if(ne(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}x=m-p,_=x-h,S=t.left,M=t.right}const P=se(n.ticks.maxTicksLimit,c),C=Math.max(1,Math.ceil(c/P));for(y=0;y<c;y+=C){const t=this.getContext(y),e=r.setContext(t),n=s.setContext(t),o=e.lineWidth,c=e.color,h=n.dash||[],d=n.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;b=uo(this,y,a),void 0!==b&&(v=Mi(i,b,o),l?x=_=S=M=v:w=k=O=A=v,u.push({tx1:x,ty1:w,tx2:_,ty2:k,x1:S,y1:O,x2:M,y2:A,width:o,color:c,borderDash:h,borderDashOffset:d,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=c,this._borderValue=m,u}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:r}=i,o=this.isHorizontal(),s=this.ticks,{align:a,crossAlign:l,padding:c,mirror:h}=r,u=fo(i.grid),d=u+c,f=h?-c:d,p=-je(this.labelRotation),g=[];let m,y,b,v,x,w,_,k,S,O,M,A,P="middle";if("top"===n)w=this.bottom-f,_=this._getXAxisLabelAlignment();else if("bottom"===n)w=this.top+f,_=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(u);_=t.textAlign,x=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(u);_=t.textAlign,x=t.x}else if("x"===e){if("center"===n)w=(t.top+t.bottom)/2+d;else if(ne(n)){const t=Object.keys(n)[0],e=n[t];w=this.chart.scales[t].getPixelForValue(e)+d}_=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)x=(t.left+t.right)/2-d;else if(ne(n)){const t=Object.keys(n)[0],e=n[t];x=this.chart.scales[t].getPixelForValue(e)}_=this._getYAxisLabelAlignment(u).textAlign}"y"===e&&("start"===a?P="top":"end"===a&&(P="bottom"));const C=this._getLabelSizes();for(m=0,y=s.length;m<y;++m){b=s[m],v=b.label;const t=r.setContext(this.getContext(m));k=this.getPixelForTick(m)+r.labelOffset,S=this._resolveTickFontOptions(m),O=S.lineHeight,M=ie(v)?v.length:1;const e=M/2,i=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let u,d=_;if(o?(x=k,"inner"===_&&(d=m===y-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),A="top"===n?"near"===l||0!==p?-M*O+O/2:"center"===l?-C.highest.height/2-e*O+O:-C.highest.height+O/2:"near"===l||0!==p?O/2:"center"===l?C.highest.height/2-e*O:C.highest.height-M*O,h&&(A*=-1),0===p||t.showLabelBackdrop||(x+=O/2*Math.sin(p))):(w=k,A=(1-M)*O/2),t.showLabelBackdrop){const e=$i(t.backdropPadding),i=C.heights[m],n=C.widths[m];let r=A-e.top,o=0-e.left;switch(P){case"middle":r-=i/2;break;case"bottom":r-=i}switch(_){case"center":o-=n/2;break;case"right":o-=n}u={left:o,top:r,width:n+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:v,font:S,textOffset:A,options:{rotation:p,color:i,strokeColor:a,strokeWidth:c,textAlign:d,textBaseline:P,translation:[x,w],backdrop:u}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-je(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:r}}=this.options,o=t+r,s=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+r,"near"===i?a="left":"center"===i?(a="center",l+=s/2):(a="right",l+=s)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=s/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+r,"near"===i?a="right":"center"===i?(a="center",l-=s/2):(a="left",l-=s)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=s/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const s=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(r=0,o=n.length;r<o;++r){const t=n[r];e.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,r=i.setContext(this.getContext()),o=i.display?r.width:0;if(!o)return;const s=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,h,u;this.isHorizontal()?(l=Mi(t,this.left,o)-o/2,c=Mi(t,this.right,s)+s/2,h=u=a):(h=Mi(t,this.top,o)-o/2,u=Mi(t,this.bottom,s)+s/2,l=c=a),e.save(),e.lineWidth=r.width,e.strokeStyle=r.color,e.beginPath(),e.moveTo(l,h),e.lineTo(c,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Li(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;ji(e,t.label,0,t.textOffset,n,i)}i&&Ri(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const r=Ki(i.font),o=$i(i.padding),s=i.align;let a=r.lineHeight/2;"bottom"===e||"center"===e||ne(e)?(a+=o.bottom,ie(i.text)&&(a+=r.lineHeight*(i.text.length-1))):a+=o.top;const{titleX:l,titleY:c,maxWidth:h,rotation:u}=function(t,e,i,n){const{top:r,left:o,bottom:s,right:a,chart:l}=t,{chartArea:c,scales:h}=l;let u,d,f,p=0;const g=s-r,m=a-o;if(t.isHorizontal()){if(d=ii(n,o,a),ne(i)){const t=Object.keys(i)[0],n=i[t];f=h[t].getPixelForValue(n)+g-e}else f="center"===i?(c.bottom+c.top)/2+g-e:lo(t,i,e);u=a-o}else{if(ne(i)){const t=Object.keys(i)[0],n=i[t];d=h[t].getPixelForValue(n)-m+e}else d="center"===i?(c.left+c.right)/2-m+e:lo(t,i,e);f=ii(n,s,r),p="left"===i?-Pe:Pe}return{titleX:d,titleY:f,maxWidth:u,rotation:p}}(this,a,e,s);ji(t,i.text,0,0,r,{color:i.color,maxWidth:h,rotation:u,textAlign:go(s,e,n),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=se(t.grid&&t.grid.z,-1),n=se(t.border&&t.border.z,0);return this._isVisible()&&this.draw===mo.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return Ki(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class yo{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in n||(n[r]=t,function(t,e,i){const n=pe(Object.create(null),[i?ki.get(i):{},ki.get(e),t.defaults]);ki.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),r=n.pop(),o=[t].concat(n).join("."),s=e[i].split("."),a=s.pop(),l=s.join(".");ki.route(o,r,l,a)}))}(e,t.defaultRoutes);t.descriptors&&ki.describe(e,t.descriptors)}(t,o,i),this.override&&ki.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in ki[n]&&(delete ki[n][i],this.override&&delete bi[i])}}class bo{constructor(){this.controllers=new yo(ar,"datasets",!0),this.elements=new yo(oo,"elements"),this.plugins=new yo(Object,"plugins"),this.scales=new yo(mo,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):ce(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=ve(t);le(i["before"+n],[],i),e[t](i),le(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var vo=new bo;class xo{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(r,t,e,i);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const r of t){const t=r.plugin;if(!1===le(t[i],[e,n,r.options],t)&&n.cancelable)return!1}return!0}invalidate(){ee(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=se(i.options&&i.options.plugins,{}),r=function(t){const e={},i=[],n=Object.keys(vo.plugins.items);for(let t=0;t<n.length;t++)i.push(vo.getPlugin(n[t]));const r=t.plugins||[];for(let t=0;t<r.length;t++){const n=r[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,r){const o=[],s=t.getContext();for(const a of e){const e=a.id,l=wo(n[e],r);null!==l&&o.push({plugin:a,options:_o(t.config,{plugin:a,local:i[e]},l,s)})}return o}(t,r,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function wo(t,e){return e||!1!==t?!0===t?{}:t:null}function _o(t,{plugin:e,local:i},n,r){const o=t.pluginScopeKeys(e),s=t.getOptionScopes(n,o);return i&&e.defaults&&s.push(e.defaults),t.createResolver(s,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function ko(t,e){const i=ki.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function So(t){if("x"===t||"y"===t||"r"===t)return t}function Oo(t,...e){if(So(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&So(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Mo(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function Ao(t,e){const i=bi[t.type]||{scales:{}},n=e.scales||{},r=ko(t.type,e),o=Object.create(null);return Object.keys(n).forEach((e=>{const s=n[e];if(!ne(s))return console.error(`Invalid scale configuration for scale: ${e}`);if(s._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=Oo(e,s,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Mo(t,"x",i[0])||Mo(t,"y",i[0])}return{}}(e,t),ki.scales[s.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,r),c=i.scales||{};o[e]=ge(Object.create(null),[{axis:a},s,c[a],c[l]])})),t.data.datasets.forEach((i=>{const r=i.type||t.type,s=i.indexAxis||ko(r,e),a=(bi[r]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,s),r=i[e+"AxisID"]||e;o[r]=o[r]||Object.create(null),ge(o[r],[{axis:e},n[r],a[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];ge(e,[ki.scales[e.type],ki.scale])})),o}function Po(t){const e=t.options||(t.options={});e.plugins=se(e.plugins,{}),e.scales=Ao(t,e)}function Co(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Eo=new Map,Lo=new Set;function Ro(t,e){let i=Eo.get(t);return i||(i=e(),Eo.set(t,i),Lo.add(i)),i}const Do=(t,e,i)=>{const n=be(e,i);void 0!==n&&t.add(n)};class Io{constructor(t){this._config=function(t){return(t=t||{}).data=Co(t.data),Po(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Co(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Po(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Ro(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Ro(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Ro(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Ro(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:r}=this,o=this._cachedScopes(t,i),s=o.get(e);if(s)return s;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>Do(a,t,e)))),e.forEach((t=>Do(a,n,t))),e.forEach((t=>Do(a,bi[r]||{},t))),e.forEach((t=>Do(a,ki,t))),e.forEach((t=>Do(a,vi,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),Lo.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,bi[e]||{},ki.datasets[e]||{},{type:e},ki,vi]}resolveNamedOptions(t,e,i,n=[""]){const r={$shared:!0},{resolver:o,subPrefixes:s}=To(this._resolverCache,t,n);let a=o;if(function(t,e){const{isScriptable:i,isIndexable:n}=Zi(t);for(const r of e){const e=i(r),o=n(r),s=(o||e)&&t[r];if(e&&(we(s)||No(s))||o&&ie(s))return!0}return!1}(o,e)){r.$shared=!1;a=Ji(o,i=we(i)?i():i,this.createResolver(t,i,s))}for(const t of e)r[t]=a[t];return r}createResolver(t,e,i=[""],n){const{resolver:r}=To(this._resolverCache,t,i);return ne(e)?Ji(r,e,void 0,n):r}}function To(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const r=i.join();let o=n.get(r);if(!o){o={resolver:qi(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(r,o)}return o}const No=t=>ne(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||we(t[i])),!1);const jo=["top","bottom","left","right","chartArea"];function Fo(t,e){return"top"===t||"bottom"===t||-1===jo.indexOf(t)&&"x"===e}function zo(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Vo(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),le(i&&i.onComplete,[t],e)}function Bo(t){const e=t.chart,i=e.options.animation;le(i&&i.onProgress,[t],e)}function Ho(t){return bn()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Wo={},Uo=t=>{const e=Ho(t);return Object.values(Wo).filter((t=>t.canvas===e)).pop()};function Yo(t,e,i){const n=Object.keys(t);for(const r of n){const n=+r;if(n>=e){const o=t[r];delete t[r],(i>0||n>e)&&(t[n+i]=o)}}}class $o{static defaults=ki;static instances=Wo;static overrides=bi;static registry=vo;static version="4.3.0";static getChart=Uo;static register(...t){vo.add(...t),Ko()}static unregister(...t){vo.remove(...t),Ko()}constructor(t,e){const i=this.config=new Io(e),n=Ho(t),r=Uo(n);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!bn()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Wr:ro}(n)),this.platform.updateConfig(i);const s=this.platform.acquireContext(n,o.aspectRatio),a=s&&s.canvas,l=a&&a.height,c=a&&a.width;this.id=te(),this.ctx=s,this.canvas=a,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new xo,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Wo[this.id]=this,s&&a?(Yn.listen(this,"complete",Vo),Yn.listen(this,"progress",Bo),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:r}=this;return ee(t)?e&&r?r:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return vo}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Pn(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Ai(this.canvas,this.ctx),this}stop(){return Yn.stop(this),this}resize(t,e){Yn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,r=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,r),s=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Pn(this,s,!0)&&(this.notifyPlugins("resize",{size:o}),le(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){ce(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const i=e[t],n=Oo(t,i),r="r"===n,o="x"===n;return{options:i,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),ce(r,(e=>{const r=e.options,o=r.id,s=Oo(o,r),a=se(r.type,e.dtype);void 0!==r.position&&Fo(r.position,s)===Fo(e.dposition)||(r.position=e.dposition),n[o]=!0;let l=null;if(o in i&&i[o].type===a)l=i[o];else{l=new(vo.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[l.id]=l}l.init(r,t)})),ce(n,((t,e)=>{t||delete i[e]})),ce(i,(t=>{Br.configure(this,t,t.options),Br.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(zo("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let r=this.getDatasetMeta(i);const o=n.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(i),r=this.getDatasetMeta(i)),r.type=o,r.indexAxis=n.indexAxis||ko(o,this.options),r.order=n.order||0,r.index=i,r.label=""+n.label,r.visible=this.isDatasetVisible(i),r.controller)r.controller.updateIndex(i),r.controller.linkScales();else{const e=vo.getController(o),{datasetElementType:n,dataElementType:s}=ki.datasets[o];Object.assign(e,{dataElementType:vo.getElement(s),datasetElementType:n&&vo.getElement(n)}),r.controller=new e(this,i),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){ce(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===r.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||ce(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(zo("z","_idx"));const{_active:s,_lastEvent:a}=this;a?this._eventHandler(a,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){ce(this.scales,(t=>{Br.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);_e(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:r}of e){Yo(t,n,"_removeElements"===i?-r:r)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!_e(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Br.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],ce(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,we(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Yn.has(this)?this.attached&&!Yn.running(this)&&Yn.start(this):(this.draw(),Vo({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,r;for(n=0,r=e.length;n<r;++n){const r=e[n];t&&!r.visible||i.push(r)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,r=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Li(e,{left:!1===i.left?0:r.left-i.left,right:!1===i.right?this.width:r.right+i.right,top:!1===i.top?0:r.top-i.top,bottom:!1===i.bottom?this.height:r.bottom+i.bottom}),t.controller.draw(),n&&Ri(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return Ei(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const r=Pr.modes[e];return"function"==typeof r?r(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=Xi(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,n);xe(e)?(r.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(r,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Yn.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Ai(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Wo[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};ce(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const s=()=>{n("attach",s),this.attached=!0,this.resize(),i("resize",r),i("detach",o)};o=()=>{this.attached=!1,n("resize",r),this._stop(),this._resize(0,0),i("attach",s)},e.isAttached(this.canvas)?s():o()}unbindEvents(){ce(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},ce(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let r,o,s,a;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+n+"DatasetHoverStyle"]()),s=0,a=t.length;s<a;++s){o=t[s];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!he(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),s=i?t:r(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),s.length&&n.mode&&this.updateHoverStyle(s,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const r=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(r||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:r}=this,o=e,s=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,le(r.onHover,[t,s,this],this),a&&le(r.onClick,[t,s,this],this));const c=!he(s,n);return(c||e)&&(this._active=s,this._updateHoverStyles(s,n,e)),this._lastEvent=l,c}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,n)}}function Ko(){return ce($o.instances,(t=>t._plugins.invalidate()))}function Go(t,e,i,n){const r=Wi(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const o=(i-e)/2,s=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return Ye(t,0,Math.min(o,e))};return{outerStart:a(r.outerStart),outerEnd:a(r.outerEnd),innerStart:Ye(r.innerStart,0,s),innerEnd:Ye(r.innerEnd,0,s)}}function Xo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function qo(t,e,i,n,r,o){const{x:s,y:a,startAngle:l,pixelMargin:c,innerRadius:h}=e,u=Math.max(e.outerRadius+n+i-c,0),d=h>0?h+n+i+c:0;let f=0;const p=r-l;if(n){const t=((h>0?h-n:0)+(u>0?u-n:0))/2;f=(p-(0!==t?p*t/(t+n):p))/2}const g=(p-Math.max(.001,p*u-i/ke)/u)/2,m=l+g+f,y=r-g-f,{outerStart:b,outerEnd:v,innerStart:x,innerEnd:w}=Go(e,d,u,y-m),_=u-b,k=u-v,S=m+b/_,O=y-v/k,M=d+x,A=d+w,P=m+x/M,C=y-w/A;if(t.beginPath(),o){const e=(S+O)/2;if(t.arc(s,a,u,S,e),t.arc(s,a,u,e,O),v>0){const e=Xo(k,O,s,a);t.arc(e.x,e.y,v,O,y+Pe)}const i=Xo(A,y,s,a);if(t.lineTo(i.x,i.y),w>0){const e=Xo(A,C,s,a);t.arc(e.x,e.y,w,y+Pe,C+Math.PI)}const n=(y-w/d+(m+x/d))/2;if(t.arc(s,a,d,y-w/d,n,!0),t.arc(s,a,d,n,m+x/d,!0),x>0){const e=Xo(M,P,s,a);t.arc(e.x,e.y,x,P+Math.PI,m-Pe)}const r=Xo(_,m,s,a);if(t.lineTo(r.x,r.y),b>0){const e=Xo(_,S,s,a);t.arc(e.x,e.y,b,m-Pe,S)}}else{t.moveTo(s,a);const e=Math.cos(S)*u+s,i=Math.sin(S)*u+a;t.lineTo(e,i);const n=Math.cos(O)*u+s,r=Math.sin(O)*u+a;t.lineTo(n,r)}t.closePath()}function Jo(t,e,i,n,r){const{fullCircles:o,startAngle:s,circumference:a,options:l}=e,{borderWidth:c,borderJoinStyle:h,borderDash:u,borderDashOffset:d}=l,f="inner"===l.borderAlign;if(!c)return;t.setLineDash(u||[]),t.lineDashOffset=d,f?(t.lineWidth=2*c,t.lineJoin=h||"round"):(t.lineWidth=c,t.lineJoin=h||"bevel");let p=e.endAngle;if(o){qo(t,e,i,n,p,r);for(let e=0;e<o;++e)t.stroke();isNaN(a)||(p=s+(a%Se||Se))}f&&function(t,e,i){const{startAngle:n,pixelMargin:r,x:o,y:s,outerRadius:a,innerRadius:l}=e;let c=r/a;t.beginPath(),t.arc(o,s,a,n-c,i+c),l>r?(c=r/l,t.arc(o,s,l,i+c,n-c,!0)):t.arc(o,s,r,i+Pe,n-Pe),t.closePath(),t.clip()}(t,e,p),o||(qo(t,e,i,n,p,r),t.stroke())}function Zo(t,e,i=e){t.lineCap=se(i.borderCapStyle,e.borderCapStyle),t.setLineDash(se(i.borderDash,e.borderDash)),t.lineDashOffset=se(i.borderDashOffset,e.borderDashOffset),t.lineJoin=se(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=se(i.borderWidth,e.borderWidth),t.strokeStyle=se(i.borderColor,e.borderColor)}function Qo(t,e,i){t.lineTo(i.x,i.y)}function ts(t,e,i={}){const n=t.length,{start:r=0,end:o=n-1}=i,{start:s,end:a}=e,l=Math.max(r,s),c=Math.min(o,a),h=r<s&&o<s||r>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:c<l&&!h?n+c-l:c-l}}function es(t,e,i,n){const{points:r,options:o}=e,{count:s,start:a,loop:l,ilen:c}=ts(r,i,n),h=function(t){return t.stepped?Di:t.tension||"monotone"===t.cubicInterpolationMode?Ii:Qo}(o);let u,d,f,{move:p=!0,reverse:g}=n||{};for(u=0;u<=c;++u)d=r[(a+(g?c-u:u))%s],d.skip||(p?(t.moveTo(d.x,d.y),p=!1):h(t,f,d,g,o.stepped),f=d);return l&&(d=r[(a+(g?c:0))%s],h(t,f,d,g,o.stepped)),!!l}function is(t,e,i,n){const r=e.points,{count:o,start:s,ilen:a}=ts(r,i,n),{move:l=!0,reverse:c}=n||{};let h,u,d,f,p,g,m=0,y=0;const b=t=>(s+(c?a-t:t))%o,v=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(u=r[b(0)],t.moveTo(u.x,u.y)),h=0;h<=a;++h){if(u=r[b(h)],u.skip)continue;const e=u.x,i=u.y,n=0|e;n===d?(i<f?f=i:i>p&&(p=i),m=(y*m+e)/++y):(v(),t.lineTo(e,i),d=n,y=0,f=p=i),g=i}v()}function ns(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?is:es}const rs="function"==typeof Path2D;function os(t,e,i,n){rs&&!e.options.segment?function(t,e,i,n){let r=e._path;r||(r=e._path=new Path2D,e.path(r,i,n)&&r.closePath()),Zo(t,e.options),t.stroke(r)}(t,e,i,n):function(t,e,i,n){const{segments:r,options:o}=e,s=ns(e);for(const a of r)Zo(t,o,a.style),t.beginPath(),s(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}class ss extends oo{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;yn(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,r=i.length;if(!r)return[];const o=!!t._loop,{start:s,end:a}=function(t,e,i,n){let r=0,o=e-1;if(i&&!n)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,i&&(o+=r);o>r&&t[o%e].skip;)o--;return o%=e,{start:r,end:o}}(i,r,o,n);return Bn(t,!0===n?[{start:s,end:a,loop:o}]:function(t,e,i,n){const r=t.length,o=[];let s,a=e,l=t[e];for(s=e+1;s<=i;++s){const i=t[s%r];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%r,end:(s-1)%r,loop:n}),e=a=i.stop?s:null):(a=s,l.skip&&(e=s)),l=i}return null!==a&&o.push({start:e%r,end:a%r,loop:n}),o}(i,s,a<s?a+r:a,!!t._fullLoop&&0===s&&a===r-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],r=this.points,o=Vn(this,{property:e,start:n,end:n});if(!o.length)return;const s=[],a=function(t){return t.stepped?Rn:t.tension||"monotone"===t.cubicInterpolationMode?Dn:Ln}(i);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:h}=o[l],u=r[c],d=r[h];if(u===d){s.push(u);continue}const f=a(u,d,Math.abs((n-u[e])/(d[e]-u[e])),i.stepped);f[e]=t[e],s.push(f)}return 1===s.length?s[0]:s}pathSegment(t,e,i){return ns(this)(t,this,e,i)}path(t,e,i){const n=this.segments,r=ns(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const s of n)o&=r(t,this,s,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),os(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function as(t,e,i,n){const r=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<r.radius+r.hitRadius}function ls(t,e){const{x:i,y:n,base:r,width:o,height:s}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,u;return t.horizontal?(u=s/2,a=Math.min(i,r),l=Math.max(i,r),c=n-u,h=n+u):(u=o/2,a=i-u,l=i+u,c=Math.min(n,r),h=Math.max(n,r)),{left:a,top:c,right:l,bottom:h}}function cs(t,e,i,n){return t?0:Ye(e,i,n)}function hs(t){const e=ls(t),i=e.right-e.left,n=e.bottom-e.top,r=function(t,e,i){const n=t.options.borderWidth,r=t.borderSkipped,o=Ui(n);return{t:cs(r.top,o.top,0,i),r:cs(r.right,o.right,0,e),b:cs(r.bottom,o.bottom,0,i),l:cs(r.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=Yi(r),s=Math.min(e,i),a=t.borderSkipped,l=n||ne(r);return{topLeft:cs(!l||a.top||a.left,o.topLeft,0,s),topRight:cs(!l||a.top||a.right,o.topRight,0,s),bottomLeft:cs(!l||a.bottom||a.left,o.bottomLeft,0,s),bottomRight:cs(!l||a.bottom||a.right,o.bottomRight,0,s)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:i-r.l-r.r,h:n-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}function us(t,e,i,n){const r=null===e,o=null===i,s=t&&!(r&&o)&&ls(t,n);return s&&(r||$e(e,s.left,s.right))&&(o||$e(i,s.top,s.bottom))}function ds(t,e){t.rect(e.x,e.y,e.w,e.h)}function fs(t,e,i={}){const n=t.x!==i.x?-e:0,r=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,s=(t.y+t.h!==i.y+i.h?e:0)-r;return{x:t.x+n,y:t.y+r,w:t.w+o,h:t.h+s,radius:t.radius}}var ps=Object.freeze({__proto__:null,ArcElement:class extends oo{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:r,distance:o}=Ve(n,{x:t,y:e}),{startAngle:s,endAngle:a,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=(this.options.spacing+this.options.borderWidth)/2,d=se(h,a-s)>=Se||Ue(r,s,a),f=$e(o,l+u,c+u);return d&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:r,innerRadius:o,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,c=(n+r)/2,h=(o+s+l+a)/2;return{x:e+Math.cos(c)*h,y:i+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,r=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>Se?Math.floor(i/Se):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const s=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(s)*n,Math.sin(s)*n);const a=n*(1-Math.sin(Math.min(ke,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,r){const{fullCircles:o,startAngle:s,circumference:a}=e;let l=e.endAngle;if(o){qo(t,e,i,n,l,r);for(let e=0;e<o;++e)t.fill();isNaN(a)||(l=s+(a%Se||Se))}qo(t,e,i,n,l,r),t.fill()}(t,this,a,r,o),Jo(t,this,a,r,o),t.restore()}},BarElement:class extends oo{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:r,outer:o}=hs(this),s=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Fi:ds;var a;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),s(t,fs(o,e,r)),t.clip(),s(t,fs(r,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),s(t,fs(r,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return us(this,t,e,i)}inXRange(t,e){return us(this,t,null,e)}inYRange(t,e){return us(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+n)/2:e,y:r?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:ss,PointElement:class extends oo{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:r,y:o}=this.getProps(["x","y"],i);return Math.pow(t-r,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return as(this,t,"x",e)}inYRange(t,e){return as(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Ei(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Pi(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const gs=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],ms=gs.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function ys(t){return gs[t%gs.length]}function bs(t){return ms[t%ms.length]}function vs(t){let e=0;return(i,n)=>{const r=t.getDatasetMeta(n).controller;r instanceof mr?e=function(t,e){return t.backgroundColor=t.data.map((()=>ys(e++))),e}(i,e):r instanceof yr?e=function(t,e){return t.backgroundColor=t.data.map((()=>bs(e++))),e}(i,e):r&&(e=function(t,e){return t.borderColor=ys(e),t.backgroundColor=bs(e),++e}(i,e))}}function xs(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var ws={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:r}=t.config,{elements:o}=r;if(!i.forceOverride&&(xs(n)||(s=r)&&(s.borderColor||s.backgroundColor)||o&&xs(o)))return;var s;const a=vs(t);n.forEach(a)}};function _s(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function ks(t){t.data.datasets.forEach((t=>{_s(t)}))}var Ss={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void ks(t);const n=t.width;t.data.datasets.forEach(((e,r)=>{const{_data:o,indexAxis:s}=e,a=t.getDatasetMeta(r),l=o||e.data;if("y"===Gi([s,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const c=t.scales[a.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let{start:h,count:u}=function(t,e){const i=e.length;let n,r=0;const{iScale:o}=t,{min:s,max:a,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(r=Ye(Ge(e,o.axis,s).lo,0,i-1)),n=c?Ye(Ge(e,o.axis,a).hi+1,r,i)-r:i-r,{start:r,count:n}}(a,l);if(u<=(i.threshold||4*n))return void _s(e);let d;switch(ee(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,n,r){const o=r.samples||n;if(o>=i)return t.slice(e,e+i);const s=[],a=(i-2)/(o-2);let l=0;const c=e+i-1;let h,u,d,f,p,g=e;for(s[l++]=t[g],h=0;h<o-2;h++){let n,r=0,o=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,i)+e,y=m-c;for(n=c;n<m;n++)r+=t[n].x,o+=t[n].y;r/=y,o/=y;const b=Math.floor(h*a)+1+e,v=Math.min(Math.floor((h+1)*a)+1,i)+e,{x,y:w}=t[g];for(d=f=-1,n=b;n<v;n++)f=.5*Math.abs((x-r)*(t[n].y-w)-(x-t[n].x)*(o-w)),f>d&&(d=f,u=t[n],p=n);s[l++]=u,g=p}return s[l++]=t[c],s}(l,h,u,n,i);break;case"min-max":d=function(t,e,i,n){let r,o,s,a,l,c,h,u,d,f,p=0,g=0;const m=[],y=e+i-1,b=t[e].x,v=t[y].x-b;for(r=e;r<e+i;++r){o=t[r],s=(o.x-b)/v*n,a=o.y;const e=0|s;if(e===l)a<d?(d=a,c=r):a>f&&(f=a,h=r),p=(g*p+o.x)/++g;else{const i=r-1;if(!ee(c)&&!ee(h)){const e=Math.min(c,h),n=Math.max(c,h);e!==u&&e!==i&&m.push({...t[e],x:p}),n!==u&&n!==i&&m.push({...t[n],x:p})}r>0&&i!==u&&m.push(t[i]),m.push(o),l=e,g=0,d=f=a,c=h=u=r}}return m}(l,h,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}))},destroy(t){ks(t)}};function Os(t,e,i,n){if(n)return;let r=e[t],o=i[t];return"angle"===t&&(r=We(r),o=We(o)),{property:t,start:r,end:o}}function Ms(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function As(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Ps(t,e){let i=[],n=!1;return ie(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},r=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Ms(t,e,r);const s=r[t],a=r[e];null!==n?(o.push({x:s.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:s.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new ss({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function Cs(t){return t&&!1!==t.fill}function Es(t,e,i){let n=t[e].fill;const r=[e];let o;if(!i)return n;for(;!1!==n&&-1===r.indexOf(n);){if(!re(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;r.push(n),n=o.fill}return!1}function Ls(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=se(i&&i.target,i);void 0===n&&(n=!!e.backgroundColor);if(!1===n||null===n)return!1;if(!0===n)return"origin";return n}(t);if(ne(n))return!isNaN(n.value)&&n;let r=parseFloat(n);return re(r)&&Math.floor(r)===r?function(t,e,i,n){"-"!==t&&"+"!==t||(i=e+i);if(i===e||i<0||i>=n)return!1;return i}(n[0],e,r,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function Rs(t,e,i){const n=[];for(let r=0;r<i.length;r++){const o=i[r],{first:s,last:a,point:l}=Ds(o,e,"x");if(!(!l||s&&a))if(s)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function Ds(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const r=n[i],o=t.segments,s=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=s[e.start][i],c=s[e.end][i];if($e(r,n,c)){a=r===n,l=r===c;break}}return{first:a,last:l,point:n}}class Is{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:r,radius:o}=this;return e=e||{start:0,end:Se},t.arc(n,r,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,r=t.angle;return{x:e+Math.cos(r)*n,y:i+Math.sin(r)*n,angle:r}}}function Ts(t){const{chart:e,fill:i,line:n}=t;if(re(i))return function(t,e){const i=t.getDatasetMeta(e),n=i&&t.isDatasetVisible(e);return n?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,r=[],o=n.segments,s=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const r=n[t];if(r.index===e)break;r.hidden||i.unshift(r.dataset)}return i}(e,i);a.push(Ps({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Rs(r,s[t],a)}return new ss({points:r,options:{}})}(t);if("shape"===i)return!0;const r=function(t){const e=t.scale||{};if(e.getPointPositionForValue)return function(t){const{scale:e,fill:i}=t,n=e.options,r=e.getLabels().length,o=n.reverse?e.max:e.min,s=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:ne(t)?t.value:e.getBaseValue(),n}(i,e,o),a=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,o);return new Is({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(s)})}for(let t=0;t<r;++t)a.push(e.getPointPositionForValue(t,s));return a}(t);return function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:ne(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(re(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return r instanceof Is?r:Ps(r,n)}function Ns(t,e,i){const n=Ts(e),{line:r,scale:o,axis:s}=e,a=r.options,l=a.fill,c=a.backgroundColor,{above:h=c,below:u=c}=l||{};n&&r.points.length&&(Li(t,i),function(t,e){const{line:i,target:n,above:r,below:o,area:s,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==r&&(js(t,n,s.top),Fs(t,{line:i,target:n,color:r,scale:a,property:l}),t.restore(),t.save(),js(t,n,s.bottom));Fs(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:r,target:n,above:h,below:u,area:i,scale:o,axis:s}),Ri(t))}function js(t,e,i){const{segments:n,points:r}=e;let o=!0,s=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,c=r[n],h=r[Ms(n,l,r)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,i),t.lineTo(c.x,c.y)),s=!!e.pathSegment(t,a,{move:s}),s?t.closePath():t.lineTo(h.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Fs(t,e){const{line:i,target:n,property:r,color:o,scale:s}=e,a=function(t,e,i){const n=t.segments,r=t.points,o=e.points,s=[];for(const t of n){let{start:n,end:a}=t;a=Ms(n,a,r);const l=Os(i,r[n],r[a],t.loop);if(!e.segments){s.push({source:t,target:l,start:r[n],end:r[a]});continue}const c=Vn(e,l);for(const e of c){const n=Os(i,o[e.start],o[e.end],e.loop),a=zn(t,r,n);for(const t of a)s.push({source:t,target:e,start:{[i]:As(l,n,"start",Math.max)},end:{[i]:As(l,n,"end",Math.min)}})}}return s}(i,n,r);for(const{source:e,target:l,start:c,end:h}of a){const{style:{backgroundColor:a=o}={}}=e,u=!0!==n;t.save(),t.fillStyle=a,zs(t,s,u&&Os(r,c,h)),t.beginPath();const d=!!i.pathSegment(t,e);let f;if(u){d?t.closePath():Vs(t,n,h,r);const e=!!n.pathSegment(t,l,{move:d,reverse:!0});f=d&&e,f||Vs(t,n,c,r)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function zs(t,e,i){const{top:n,bottom:r}=e.chart.chartArea,{property:o,start:s,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(s,n,a-s,r-n),t.clip())}function Vs(t,e,i,n){const r=e.interpolate(i,n);r&&t.lineTo(r.x,r.y)}var Bs={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,r=[];let o,s,a,l;for(s=0;s<n;++s)o=t.getDatasetMeta(s),a=o.dataset,l=null,a&&a.options&&a instanceof ss&&(l={visible:t.isDatasetVisible(s),index:s,fill:Ls(a,s,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,r.push(l);for(s=0;s<n;++s)l=r[s],l&&!1!==l.fill&&(l.fill=Es(r,s,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,r=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=r.length-1;e>=0;--e){const i=r[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&Ns(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;Cs(i)&&Ns(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;Cs(n)&&"beforeDatasetDraw"===i.drawTime&&Ns(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Hs=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class Ws extends oo{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=le(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=Ki(i.font),r=n.size,o=this._computeTitleHeight(),{boxWidth:s,itemHeight:a}=Hs(i,r);let l,c;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,r,s,a)+10):(c=this.maxHeight,l=this._fitCols(o,n,s,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:r,maxWidth:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=n+s;let h=t;r.textAlign="left",r.textBaseline="middle";let u=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=i+e/2+r.measureText(t.text).width;(0===f||l[l.length-1]+p+2*s>o)&&(h+=c,l[l.length-(f>0?0:1)]=0,d+=c,u++),a[f]={left:0,top:d,row:u,width:p,height:n},l[l.length-1]+=p+s})),h}_fitCols(t,e,i,n){const{ctx:r,maxHeight:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let h=s,u=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,r){const o=function(t,e,i,n){let r=t.text;r&&"string"!=typeof r&&(r=r.reduce(((t,e)=>t.length>e.length?t:e)));return e+i.size/2+n.measureText(r).width}(n,t,e,i),s=function(t,e,i){let n=t;"string"!=typeof e.text&&(n=Us(e,i));return n}(r,n,e.lineHeight);return{itemWidth:o,itemHeight:s}}(i,e,r,t,n);o>0&&d+m+2*s>c&&(h+=u+s,l.push({width:u,height:d}),f+=u+s,p++,u=d=0),a[o]={left:f,top:d,col:p,width:g,height:m},u=Math.max(u,g),d+=m+s})),h+=u,l.push({width:u,height:d}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:r}}=this,o=In(r,this.left,this.width);if(this.isHorizontal()){let r=0,s=ii(i,this.left+n,this.right-this.lineWidths[r]);for(const a of e)r!==a.row&&(r=a.row,s=ii(i,this.left+n,this.right-this.lineWidths[r])),a.top+=this.top+t+n,a.left=o.leftForLtr(o.x(s),a.width),s+=a.width+n}else{let r=0,s=ii(i,this.top+t+n,this.bottom-this.columnSizes[r].height);for(const a of e)a.col!==r&&(r=a.col,s=ii(i,this.top+t+n,this.bottom-this.columnSizes[r].height)),a.top=s,a.left+=this.left+n,a.left=o.leftForLtr(o.x(a.left),a.width),s+=a.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Li(t,this),this._draw(),Ri(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:r,labels:o}=t,s=ki.color,a=In(t.rtl,this.left,this.width),l=Ki(o.font),{padding:c}=o,h=l.size,u=h/2;let d;this.drawTitle(),n.textAlign=a.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Hs(o,h),m=this.isHorizontal(),y=this._computeTitleHeight();d=m?{x:ii(r,this.left+c,this.right-i[0]),y:this.top+c+y,line:0}:{x:this.left+c,y:ii(r,this.top+y+c,this.bottom-e[0].height),line:0},Tn(this.ctx,t.textDirection);const b=g+c;this.legendItems.forEach(((v,x)=>{n.strokeStyle=v.fontColor,n.fillStyle=v.fontColor;const w=n.measureText(v.text).width,_=a.textAlign(v.textAlign||(v.textAlign=o.textAlign)),k=f+u+w;let S=d.x,O=d.y;a.setWidth(this.width),m?x>0&&S+k+c>this.right&&(O=d.y+=b,d.line++,S=d.x=ii(r,this.left+c,this.right-i[d.line])):x>0&&O+b>this.bottom&&(S=d.x=S+e[d.line].width+c,d.line++,O=d.y=ii(r,this.top+y+c,this.bottom-e[d.line].height));if(function(t,e,i){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();const r=se(i.lineWidth,1);if(n.fillStyle=se(i.fillStyle,s),n.lineCap=se(i.lineCap,"butt"),n.lineDashOffset=se(i.lineDashOffset,0),n.lineJoin=se(i.lineJoin,"miter"),n.lineWidth=r,n.strokeStyle=se(i.strokeStyle,s),n.setLineDash(se(i.lineDash,[])),o.usePointStyle){const s={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:r},l=a.xPlus(t,f/2);Ci(n,s,l,e+u,o.pointStyleWidth&&f)}else{const o=e+Math.max((h-p)/2,0),s=a.leftForLtr(t,f),l=Yi(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?Fi(n,{x:s,y:o,w:f,h:p,radius:l}):n.rect(s,o,f,p),n.fill(),0!==r&&n.stroke()}n.restore()}(a.x(S),O,v),S=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(_,S+f+u,m?S+k:this.right,t.rtl),function(t,e,i){ji(n,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:a.textAlign(i.textAlign)})}(a.x(S),O,v),m)d.x+=k+c;else if("string"!=typeof v.text){const t=l.lineHeight;d.y+=Us(v,t)}else d.y+=b})),Nn(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Ki(e.font),n=$i(e.padding);if(!e.display)return;const r=In(t.rtl,this.left,this.width),o=this.ctx,s=e.position,a=i.size/2,l=n.top+a;let c,h=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),c=this.top+l,h=ii(t.align,h,this.right-u);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+ii(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=ii(s,h,h+u);o.textAlign=r.textAlign(ei(s)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,ji(o,e.text,d,c,i)}_computeTitleHeight(){const t=this.options.title,e=Ki(t.font),i=$i(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,r;if($e(t,this.left,this.right)&&$e(e,this.top,this.bottom))for(r=this.legendHitBoxes,i=0;i<r.length;++i)if(n=r[i],$e(t,n.left,n.left+n.width)&&$e(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){if(("mousemove"===t||"mouseout"===t)&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const n=this._hoveredItem,r=((t,e)=>null!==t&&null!==e&&t.datasetIndex===e.datasetIndex&&t.index===e.index)(n,i);n&&!r&&le(e.onLeave,[t,n,this],this),this._hoveredItem=i,i&&!r&&le(e.onHover,[t,i,this],this)}else i&&le(e.onClick,[t,i,this],this)}}function Us(t,e){return e*(t.text?t.text.length+.5:0)}var Ys={id:"legend",_element:Ws,start(t,e,i){const n=t.legend=new Ws({ctx:t.ctx,options:i,chart:t});Br.configure(t,n,i),Br.addBox(t,n)},stop(t){Br.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Br.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,r=i.chart;r.isDatasetVisible(n)?(r.hide(n),e.hidden=!0):(r.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:r,color:o,useBorderRadius:s,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),c=$i(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:r||l.textAlign,borderRadius:s&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class $s extends oo{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=ie(i.text)?i.text.length:1;this._padding=$i(i.padding);const r=n*Ki(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:r,options:o}=this,s=o.align;let a,l,c,h=0;return this.isHorizontal()?(l=ii(s,i,r),c=e+t,a=r-i):("left"===o.position?(l=i+t,c=ii(s,n,e),h=-.5*ke):(l=r-t,c=ii(s,e,n),h=.5*ke),a=n-e),{titleX:l,titleY:c,maxWidth:a,rotation:h}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Ki(e.font),n=i.lineHeight/2+this._padding.top,{titleX:r,titleY:o,maxWidth:s,rotation:a}=this._drawArgs(n);ji(t,e.text,0,0,i,{color:e.color,maxWidth:s,rotation:a,textAlign:ei(e.align),textBaseline:"middle",translation:[r,o]})}}var Ks={id:"title",_element:$s,start(t,e,i){!function(t,e){const i=new $s({ctx:t.ctx,options:e,chart:t});Br.configure(t,i,e),Br.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Br.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Br.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Gs=new WeakMap;var Xs={id:"subtitle",start(t,e,i){const n=new $s({ctx:t.ctx,options:i,chart:t});Br.configure(t,n,i),Br.addBox(t,n),Gs.set(t,n)},stop(t){Br.removeBox(t,Gs.get(t)),Gs.delete(t)},beforeUpdate(t,e,i){const n=Gs.get(t);Br.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const qs={average(t){if(!t.length)return!1;let e,i,n=0,r=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,r+=t.y,++o}}return{x:n/o,y:r/o}},nearest(t,e){if(!t.length)return!1;let i,n,r,o=e.x,s=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=Be(e,n.getCenterPoint());t<a&&(a=t,r=n)}}if(r){const t=r.tooltipPosition();o=t.x,s=t.y}return{x:o,y:s}}};function Js(t,e){return e&&(ie(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Zs(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Qs(t,e){const{element:i,datasetIndex:n,index:r}=e,o=t.getDatasetMeta(n).controller,{label:s,value:a}=o.getLabelAndValue(r);return{chart:t,label:s,parsed:o.getParsed(r),raw:t.data.datasets[n].data[r],formattedValue:a,dataset:o.getDataset(),dataIndex:r,datasetIndex:n,element:i}}function ta(t,e){const i=t.chart.ctx,{body:n,footer:r,title:o}=t,{boxWidth:s,boxHeight:a}=e,l=Ki(e.bodyFont),c=Ki(e.titleFont),h=Ki(e.footerFont),u=o.length,d=r.length,f=n.length,p=$i(e.padding);let g=p.height,m=0,y=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(y+=t.beforeBody.length+t.afterBody.length,u&&(g+=u*c.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),y){g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(y-f)*l.lineHeight+(y-1)*e.bodySpacing}d&&(g+=e.footerMarginTop+d*h.lineHeight+(d-1)*e.footerSpacing);let b=0;const v=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=c.string,ce(t.title,v),i.font=l.string,ce(t.beforeBody.concat(t.afterBody),v),b=e.displayColors?s+2+e.boxPadding:0,ce(n,(t=>{ce(t.before,v),ce(t.lines,v),ce(t.after,v)})),b=0,i.font=h.string,ce(t.footer,v),i.restore(),m+=p.width,{width:m,height:g}}function ea(t,e,i,n){const{x:r,width:o}=i,{width:s,chartArea:{left:a,right:l}}=t;let c="center";return"center"===n?c=r<=(a+l)/2?"left":"right":r<=o/2?c="left":r>=s-o/2&&(c="right"),function(t,e,i,n){const{x:r,width:o}=n,s=i.caretSize+i.caretPadding;return"left"===t&&r+o+s>e.width||"right"===t&&r-o-s<0||void 0}(c,t,e,i)&&(c="center"),c}function ia(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||ea(t,e,i,n),yAlign:n}}function na(t,e,i,n){const{caretSize:r,caretPadding:o,cornerRadius:s}=t,{xAlign:a,yAlign:l}=i,c=r+o,{topLeft:h,topRight:u,bottomLeft:d,bottomRight:f}=Yi(s);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:r}=t;return"top"===e?n+=i:n-="bottom"===e?r+i:r/2,n}(e,l,c);return"center"===l?"left"===a?p+=c:"right"===a&&(p-=c):"left"===a?p-=Math.max(h,d)+r:"right"===a&&(p+=Math.max(u,f)+r),{x:Ye(p,0,n.width-e.width),y:Ye(g,0,n.height-e.height)}}function ra(t,e,i){const n=$i(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function oa(t){return Js([],Zs(t))}function sa(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const aa={beforeTitle:Qt,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:Qt,beforeBody:Qt,beforeLabel:Qt,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return ee(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:Qt,afterBody:Qt,beforeFooter:Qt,footer:Qt,afterFooter:Qt};function la(t,e,i,n){const r=t[e].call(i,n);return void 0===r?aa[e].call(i,n):r}class ca extends oo{static positioners=qs;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,r=new Xn(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,Xi(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,n=la(i,"beforeTitle",this,t),r=la(i,"title",this,t),o=la(i,"afterTitle",this,t);let s=[];return s=Js(s,Zs(n)),s=Js(s,Zs(r)),s=Js(s,Zs(o)),s}getBeforeBody(t,e){return oa(la(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return ce(t,(t=>{const e={before:[],lines:[],after:[]},r=sa(i,t);Js(e.before,Zs(la(r,"beforeLabel",this,t))),Js(e.lines,la(r,"label",this,t)),Js(e.after,Zs(la(r,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return oa(la(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=la(i,"beforeFooter",this,t),r=la(i,"footer",this,t),o=la(i,"afterFooter",this,t);let s=[];return s=Js(s,Zs(n)),s=Js(s,Zs(r)),s=Js(s,Zs(o)),s}_createItems(t){const e=this._active,i=this.chart.data,n=[],r=[],o=[];let s,a,l=[];for(s=0,a=e.length;s<a;++s)l.push(Qs(this.chart,e[s]));return t.filter&&(l=l.filter(((e,n,r)=>t.filter(e,n,r,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),ce(l,(e=>{const i=sa(t.callbacks,e);n.push(la(i,"labelColor",this,e)),r.push(la(i,"labelPointStyle",this,e)),o.push(la(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let r,o=[];if(n.length){const t=qs[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=ta(this,i),s=Object.assign({},t,e),a=ia(this.chart,i,s),l=na(i,s,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const r=this.getCaretPosition(t,i,n);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:r}=this,{caretSize:o,cornerRadius:s}=i,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:h}=Yi(s),{x:u,y:d}=t,{width:f,height:p}=e;let g,m,y,b,v,x;return"center"===r?(v=d+p/2,"left"===n?(g=u,m=g-o,b=v+o,x=v-o):(g=u+f,m=g+o,b=v-o,x=v+o),y=g):(m="left"===n?u+Math.max(a,c)+o:"right"===n?u+f-Math.max(l,h)-o:this.caretX,"top"===r?(b=d,v=b-o,g=m-o,y=m+o):(b=d+p,v=b+o,g=m+o,y=m-o),x=b),{x1:g,x2:m,x3:y,y1:b,y2:v,y3:x}}drawTitle(t,e,i){const n=this.title,r=n.length;let o,s,a;if(r){const l=In(i.rtl,this.x,this.width);for(t.x=ra(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Ki(i.titleFont),s=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<r;++a)e.fillText(n[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+s,a+1===r&&(t.y+=i.titleMarginBottom-s)}}_drawColorBox(t,e,i,n,r){const o=this.labelColors[i],s=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=r,c=Ki(r.bodyFont),h=ra(this,"left",r),u=n.x(h),d=a<c.lineHeight?(c.lineHeight-a)/2:0,f=e.y+d;if(r.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},i=n.leftForLtr(u,l)+l/2,c=f+a/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,Pi(t,e,i,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,Pi(t,e,i,c)}else{t.lineWidth=ne(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(u,l),i=n.leftForLtr(n.xPlus(u,1),l-2),s=Yi(o.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,Fi(t,{x:e,y:f,w:l,h:a,radius:s}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Fi(t,{x:i,y:f+1,w:l-2,h:a-2,radius:s}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:r,bodyAlign:o,displayColors:s,boxHeight:a,boxWidth:l,boxPadding:c}=i,h=Ki(i.bodyFont);let u=h.lineHeight,d=0;const f=In(i.rtl,this.x,this.width),p=function(i){e.fillText(i,f.x(t.x+d),t.y+u/2),t.y+=u+r},g=f.textAlign(o);let m,y,b,v,x,w,_;for(e.textAlign=o,e.textBaseline="middle",e.font=h.string,t.x=ra(this,g,i),e.fillStyle=i.bodyColor,ce(this.beforeBody,p),d=s&&"right"!==g?"center"===o?l/2+c:l+2+c:0,v=0,w=n.length;v<w;++v){for(m=n[v],y=this.labelTextColors[v],e.fillStyle=y,ce(m.before,p),b=m.lines,s&&b.length&&(this._drawColorBox(e,t,v,f,i),u=Math.max(h.lineHeight,a)),x=0,_=b.length;x<_;++x)p(b[x]),u=h.lineHeight;ce(m.after,p)}d=0,u=h.lineHeight,ce(this.afterBody,p),t.y-=r}drawFooter(t,e,i){const n=this.footer,r=n.length;let o,s;if(r){const a=In(i.rtl,this.x,this.width);for(t.x=ra(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=Ki(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,s=0;s<r;++s)e.fillText(n[s],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:r,yAlign:o}=this,{x:s,y:a}=t,{width:l,height:c}=i,{topLeft:h,topRight:u,bottomLeft:d,bottomRight:f}=Yi(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(s+h,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(s+l-u,a),e.quadraticCurveTo(s+l,a,s+l,a+u),"center"===o&&"right"===r&&this.drawCaret(t,e,i,n),e.lineTo(s+l,a+c-f),e.quadraticCurveTo(s+l,a+c,s+l-f,a+c),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(s+d,a+c),e.quadraticCurveTo(s,a+c,s,a+c-d),"center"===o&&"left"===r&&this.drawCaret(t,e,i,n),e.lineTo(s,a+h),e.quadraticCurveTo(s,a,s+h,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,r=i&&i.y;if(n||r){const i=qs[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=ta(this,t),s=Object.assign({},i,this._size),a=ia(e,t,s),l=na(t,s,a,e);n._to===l.x&&r._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},r={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=$i(e.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&s&&(t.save(),t.globalAlpha=i,this.drawBackground(r,t,n,e),Tn(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),Nn(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),r=!he(i,n),o=this._positionChanged(n,e);(r||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,i),s=this._positionChanged(o,t),a=e||!he(o,r)||s;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const r=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,r.mode,r,i);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:r}=this,o=qs[r.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var ha={id:"tooltip",_element:ca,positioners:qs,afterInit(t,e,i){i&&(t.tooltip=new ca({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:aa},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},ua=Object.freeze({__proto__:null,Colors:ws,Decimation:Ss,Filler:Bs,Legend:Ys,SubTitle:Xs,Title:Ks,Tooltip:ha});function da(t,e,i,n){const r=t.indexOf(e);if(-1===r)return((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n);return r!==t.lastIndexOf(e)?i:r}function fa(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function pa(t,e){const i=[],{bounds:n,step:r,min:o,max:s,precision:a,count:l,maxTicks:c,maxDigits:h,includeBounds:u}=t,d=r||1,f=c-1,{min:p,max:g}=e,m=!ee(o),y=!ee(s),b=!ee(l),v=(g-p)/(h+1);let x,w,_,k,S=Ie((g-p)/f/d)*d;if(S<1e-14&&!m&&!y)return[{value:p},{value:g}];k=Math.ceil(g/S)-Math.floor(p/S),k>f&&(S=Ie(k*S/f/d)*d),ee(a)||(x=Math.pow(10,a),S=Math.ceil(S*x)/x),"ticks"===n?(w=Math.floor(p/S)*S,_=Math.ceil(g/S)*S):(w=p,_=g),m&&y&&r&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((s-o)/r,S/1e3)?(k=Math.round(Math.min((s-o)/S,c)),S=(s-o)/k,w=o,_=s):b?(w=m?o:w,_=y?s:_,k=l-1,S=(_-w)/k):(k=(_-w)/S,k=De(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const O=Math.max(ze(S),ze(w));x=Math.pow(10,ee(a)?O:a),w=Math.round(w*x)/x,_=Math.round(_*x)/x;let M=0;for(m&&(u&&w!==o?(i.push({value:o}),w<o&&M++,De(Math.round((w+M*S)*x)/x,o,ga(o,v,t))&&M++):w<o&&M++);M<k;++M){const t=Math.round((w+M*S)*x)/x;if(y&&t>s)break;i.push({value:t})}return y&&u&&_!==s?i.length&&De(i[i.length-1].value,s,ga(s,v,t))?i[i.length-1].value=s:i.push({value:s}):y&&_!==s||i.push({value:_}),i}function ga(t,e,{horizontal:i,minRotation:n}){const r=je(n),o=(i?Math.sin(r):Math.cos(r))||.001,s=.75*e*(""+t).length;return Math.min(e/o,s)}class ma extends mo{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return ee(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:r}=this;const o=t=>n=e?n:t,s=t=>r=i?r:t;if(t){const t=Re(n),e=Re(r);t<0&&e<0?s(0):t>0&&e>0&&o(0)}if(n===r){let e=0===r?1:Math.abs(.05*r);s(r+e),t||o(n-e)}this.min=n,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=pa({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Ne(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return gi(t,this.chart.options.locale,this.options.ticks.format)}}class ya extends ma{static id="linear";static defaults={ticks:{callback:yi.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=re(t)?t:0,this.max=re(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=je(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const ba=t=>Math.floor(Le(t)),va=(t,e)=>Math.pow(10,ba(t)+e);function xa(t){return 1===t/Math.pow(10,ba(t))}function wa(t,e,i){const n=Math.pow(10,i),r=Math.floor(t/n);return Math.ceil(e/n)-r}function _a(t,{min:e,max:i}){e=oe(t.min,e);const n=[],r=ba(e);let o=function(t,e){let i=ba(e-t);for(;wa(t,e,i)>10;)i++;for(;wa(t,e,i)<10;)i--;return Math.min(i,ba(t))}(e,i),s=o<0?Math.pow(10,Math.abs(o)):1;const a=Math.pow(10,o),l=r>o?Math.pow(10,r):0,c=Math.round((e-l)*s)/s,h=Math.floor((e-l)/a/10)*a*10;let u=Math.floor((c-h)/Math.pow(10,o)),d=oe(t.min,Math.round((l+h+u*Math.pow(10,o))*s)/s);for(;d<i;)n.push({value:d,major:xa(d),significand:u}),u>=10?u=u<15?15:20:u++,u>=20&&(o++,u=2,s=o>=0?1:s),d=Math.round((l+h+u*Math.pow(10,o))*s)/s;const f=oe(t.max,d);return n.push({value:f,major:xa(f),significand:u}),n}class ka extends mo{static id="logarithmic";static defaults={ticks:{callback:yi.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=ma.prototype.parse.apply(this,[t,e]);if(0!==i)return re(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=re(t)?Math.max(0,t):null,this.max=re(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!re(this._userMin)&&(this.min=t===va(this.min,0)?va(this.min,-1):va(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const r=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(r(1),o(10)):(r(va(i,-1)),o(va(n,1)))),i<=0&&r(va(n,-1)),n<=0&&o(va(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=_a({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Ne(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":gi(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Le(t),this._valueRange=Le(this.max)-Le(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Le(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Sa(t){const e=t.ticks;if(e.display&&t.display){const t=$i(e.backdropPadding);return se(e.font&&e.font.size,ki.font.size)+t.height}return 0}function Oa(t,e,i,n,r){return t===n||t===r?{start:e-i/2,end:e+i/2}:t<n||t>r?{start:e-i,end:e}:{start:e,end:e+i}}function Ma(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],r=[],o=t._pointLabels.length,s=t.options.pointLabels,a=s.centerPointLabels?ke/o:0;for(let u=0;u<o;u++){const o=s.setContext(t.getPointLabelContext(u));r[u]=o.padding;const d=t.getPointPosition(u,t.drawingArea+r[u],a),f=Ki(o.font),p=(l=t.ctx,c=f,h=ie(h=t._pointLabels[u])?h:[h],{w:Oi(l,c.string,h),h:h.length*c.lineHeight});n[u]=p;const g=We(t.getIndexAngle(u)+a),m=Math.round(Fe(g));Aa(i,e,g,Oa(m,d.x,p.w,0,180),Oa(m,d.y,p.h,90,270))}var l,c,h;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],r=t._pointLabels.length,o=t.options,{centerPointLabels:s,display:a}=o.pointLabels,l={extra:Sa(o)/2,additionalAngle:s?ke/r:0};let c;for(let o=0;o<r;o++){l.padding=i[o],l.size=e[o];const r=Pa(t,o,l);n.push(r),"auto"===a&&(r.visible=Ca(r,c),r.visible&&(c=r))}return n}(t,n,r)}function Aa(t,e,i,n,r){const o=Math.abs(Math.sin(i)),s=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),r.start<e.t?(l=(e.t-r.start)/s,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/s,t.b=Math.max(t.b,e.b+l))}function Pa(t,e,i){const n=t.drawingArea,{extra:r,additionalAngle:o,padding:s,size:a}=i,l=t.getPointPosition(e,n+r+s,o),c=Math.round(Fe(We(l.angle+Pe))),h=function(t,e,i){90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e);return t}(l.y,a.h,c),u=function(t){if(0===t||180===t)return"center";if(t<180)return"left";return"right"}(c),d=function(t,e,i){"right"===i?t-=e:"center"===i&&(t-=e/2);return t}(l.x,a.w,u);return{visible:!0,x:l.x,y:h,textAlign:u,left:d,top:h,right:d+a.w,bottom:h+a.h}}function Ca(t,e){if(!e)return!0;const{left:i,top:n,right:r,bottom:o}=t;return!(Ei({x:i,y:n},e)||Ei({x:i,y:o},e)||Ei({x:r,y:n},e)||Ei({x:r,y:o},e))}function Ea(t,e,i){const{left:n,top:r,right:o,bottom:s}=i,{backdropColor:a}=e;if(!ee(a)){const i=Yi(e.borderRadius),l=$i(e.backdropPadding);t.fillStyle=a;const c=n-l.left,h=r-l.top,u=o-n+l.width,d=s-r+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),Fi(t,{x:c,y:h,w:u,h:d,radius:i}),t.fill()):t.fillRect(c,h,u,d)}}function La(t,e,i,n){const{ctx:r}=t;if(i)r.arc(t.xCenter,t.yCenter,e,0,Se);else{let i=t.getPointPosition(0,e);r.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),r.lineTo(i.x,i.y)}}class Ra extends ma{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:yi.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=$i(Sa(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=re(t)&&!isNaN(t)?t:0,this.max=re(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Sa(this.options))}generateTickLabels(t){ma.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=le(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?Ma(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return We(t*(Se/(this._pointLabels.length||1))+je(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(ee(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(ee(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Xi(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-Pe+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:r}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),La(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:r}=e,o=this._pointLabels.length;let s,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let r=e-1;r>=0;r--){const e=t._pointLabelItems[r];if(!e.visible)continue;const o=n.setContext(t.getPointLabelContext(r));Ea(i,o,e);const s=Ki(o.font),{x:a,y:l,textAlign:c}=e;ji(i,t._pointLabels[r],a,l+s.lineHeight/2,s,{color:o.color,textAlign:c,textBaseline:"middle"})}}(this,o),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),s=n.setContext(i),l=r.setContext(i);!function(t,e,i,n,r){const o=t.ctx,s=e.circular,{color:a,lineWidth:l}=e;!s&&!n||!a||!l||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(r.dash),o.lineDashOffset=r.dashOffset,o.beginPath(),La(t,i,s,n),o.closePath(),o.stroke(),o.restore())}(this,s,a,o,l)}})),i.display){for(t.save(),s=o-1;s>=0;s--){const n=i.setContext(this.getPointLabelContext(s)),{color:r,lineWidth:o}=n;o&&r&&(t.lineWidth=o,t.strokeStyle=r,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(s,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,s)=>{if(0===s&&!e.reverse)return;const a=i.setContext(this.getContext(s)),l=Ki(a.font);if(r=this.getDistanceFromCenterForValue(this.ticks[s].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=$i(a.backdropPadding);t.fillRect(-o/2-e.left,-r-l.size/2-e.top,o+e.width,l.size+e.height)}ji(t,n.label,0,-r,l,{color:a.color})})),t.restore()}drawTitle(){}}const Da={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Ia=Object.keys(Da);function Ta(t,e){return t-e}function Na(t,e){if(ee(e))return null;const i=t._adapter,{parser:n,round:r,isoWeekday:o}=t._parseOpts;let s=e;return"function"==typeof n&&(s=n(s)),re(s)||(s="string"==typeof n?i.parse(s,n):i.parse(s)),null===s?null:(r&&(s="week"!==r||!Te(o)&&!0!==o?i.startOf(s,r):i.startOf(s,"isoWeek",o)),+s)}function ja(t,e,i,n){const r=Ia.length;for(let o=Ia.indexOf(t);o<r-1;++o){const t=Da[Ia[o]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(r*t.size))<=n)return Ia[o]}return Ia[r-1]}function Fa(t,e,i){if(i){if(i.length){const{lo:n,hi:r}=Ke(i,e);t[i[n]>=e?i[n]:i[r]]=!0}}else t[e]=!0}function za(t,e,i){const n=[],r={},o=e.length;let s,a;for(s=0;s<o;++s)a=e[s],r[a]=s,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const r=t._adapter,o=+r.startOf(e[0].value,n),s=e[e.length-1].value;let a,l;for(a=o;a<=s;a=+r.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,r,i):n}class Va extends mo{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new wr(t.adapters.date);n.init(e),ge(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Na(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:r,minDefined:o,maxDefined:s}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),s||isNaN(t.max)||(r=Math.max(r,t.max))}o&&s||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=re(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),r=re(r)&&!isNaN(r)?r:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,r-1),this.max=Math.max(n+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const r=this.min,o=function(t,e,i){let n=0,r=t.length;for(;n<r&&t[n]<e;)n++;for(;r>n&&t[r-1]>i;)r--;return n>0||r<t.length?t.slice(n,r):t}(n,r,this.max);return this._unit=e.unit||(i.autoSkip?ja(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,i,n,r){for(let o=Ia.length-1;o>=Ia.indexOf(i);o--){const i=Ia[o];if(Da[i].common&&t._adapter.diff(r,n,i)>=e-1)return i}return Ia[i?Ia.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Ia.indexOf(t)+1,i=Ia.length;e<i;++e)if(Da[Ia[e]].common)return Ia[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),za(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),r=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=Ye(n,0,o),r=Ye(r,0,o),this._offsets={start:n,end:r,factor:1/(n+1+r)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,r=n.time,o=r.unit||ja(r.minUnit,e,i,this._getLabelCapacity(e)),s=se(n.ticks.stepSize,1),a="week"===o&&r.isoWeekday,l=Te(a)||!0===a,c={};let h,u,d=e;if(l&&(d=+t.startOf(d,"isoWeek",a)),d=+t.startOf(d,l?"day":o),t.diff(i,e,o)>1e5*s)throw new Error(e+" and "+i+" are too far apart with stepSize of "+s+" "+o);const f="data"===n.ticks.source&&this.getDataTimestamps();for(h=d,u=0;h<i;h=+t.add(h,s,o),u++)Fa(c,h,f);return h!==i&&"ticks"!==n.bounds&&1!==u||Fa(c,h,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,r=e||i[n];return this._adapter.format(t,r)}_tickFormatFunction(t,e,i,n){const r=this.options,o=r.ticks.callback;if(o)return le(o,[t,e,i],this);const s=r.time.displayFormats,a=this._unit,l=this._majorUnit,c=a&&s[a],h=l&&s[l],u=i[e],d=l&&h&&u&&u.major;return this._adapter.format(t,n||(d?h:c))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=je(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(n),o=Math.sin(n),s=this._resolveTickFontOptions(0).size;return{w:i*r+s*o,h:i*o+s*r}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,r=this._tickFormatFunction(t,0,za(this,[t],this._majorUnit),n),o=this._getLabelSize(r),s=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return s>0?s:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(Na(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Ze(t.sort(Ta))}}function Ba(t,e,i){let n,r,o,s,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=Ge(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:r,time:s}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=Ge(t,"time",e)),({time:n,pos:o}=t[a]),({time:r,pos:s}=t[l]));const c=r-n;return c?o+(s-o)*(e-n)/c:o}var Ha=Object.freeze({__proto__:null,CategoryScale:class extends mo{static id="category";static defaults={ticks:{callback:fa}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(ee(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Ye(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:da(i,t,se(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return fa.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:ya,LogarithmicScale:ka,RadialLinearScale:Ra,TimeScale:Va,TimeSeriesScale:class extends Va{static id="timeseries";static defaults=Va.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Ba(e,this.min),this._tableRange=Ba(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],r=[];let o,s,a,l,c;for(o=0,s=t.length;o<s;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,s=n.length;o<s;++o)c=n[o+1],a=n[o-1],l=n[o],Math.round((c+a)/2)!==l&&r.push({time:l,pos:o/(s-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Ba(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Ba(this._table,i*this._tableRange+this._minPos,!0)}}});const Wa=[br,ps,ua,Ha];$o.register(...Wa);const Ua=$o;function Ya(t){return Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ya(t)}function $a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ka(t){var e=function(t,e){if("object"!==Ya(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==Ya(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ya(e)?e:String(e)}function Ga(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ka(n.key),n)}}function Xa(t,e,i){return e&&Ga(t.prototype,e),i&&Ga(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function qa(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ja(t,e){return Ja=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ja(t,e)}function Za(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ja(t,e)}function Qa(t,e){if(e&&("object"===Ya(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return qa(t)}function tl(t){return tl=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},tl(t)}function el(t,e,i){return(e=Ka(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function il(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function nl(t){return function(t){if(Array.isArray(t))return t}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return il(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?il(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rl(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function ol(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?rl(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):rl(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}var sl={type:"logger",log:function(t){this.output("log",t)},warn:function(t){this.output("warn",t)},error:function(t){this.output("error",t)},output:function(t,e){console&&console[t]&&console[t].apply(console,e)}},al=new(function(){function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};$a(this,t),this.init(e,i)}return Xa(t,[{key:"init",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=e.prefix||"i18next:",this.logger=t||sl,this.options=e,this.debug=e.debug}},{key:"setDebug",value:function(t){this.debug=t}},{key:"log",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"log","",!0)}},{key:"warn",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"warn","",!0)}},{key:"error",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"error","")}},{key:"deprecate",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(t,e,i,n){return n&&!this.debug?null:("string"==typeof t[0]&&(t[0]="".concat(i).concat(this.prefix," ").concat(t[0])),this.logger[e](t))}},{key:"create",value:function(e){return new t(this.logger,ol(ol({},{prefix:"".concat(this.prefix,":").concat(e,":")}),this.options))}},{key:"clone",value:function(e){return(e=e||this.options).prefix=e.prefix||this.prefix,new t(this.logger,e)}}]),t}()),ll=function(){function t(){$a(this,t),this.observers={}}return Xa(t,[{key:"on",value:function(t,e){var i=this;return t.split(" ").forEach((function(t){i.observers[t]=i.observers[t]||[],i.observers[t].push(e)})),this}},{key:"off",value:function(t,e){this.observers[t]&&(e?this.observers[t]=this.observers[t].filter((function(t){return t!==e})):delete this.observers[t])}},{key:"emit",value:function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];this.observers[t]&&[].concat(this.observers[t]).forEach((function(t){t.apply(void 0,i)}));this.observers["*"]&&[].concat(this.observers["*"]).forEach((function(e){e.apply(e,[t].concat(i))}))}}]),t}();function cl(){var t,e,i=new Promise((function(i,n){t=i,e=n}));return i.resolve=t,i.reject=e,i}function hl(t){return null==t?"":""+t}function ul(t,e,i){function n(t){return t&&t.indexOf("###")>-1?t.replace(/###/g,"."):t}function r(){return!t||"string"==typeof t}for(var o="string"!=typeof e?[].concat(e):e.split(".");o.length>1;){if(r())return{};var s=n(o.shift());!t[s]&&i&&(t[s]=new i),t=Object.prototype.hasOwnProperty.call(t,s)?t[s]:{}}return r()?{}:{obj:t,k:n(o.shift())}}function dl(t,e,i){var n=ul(t,e,Object);n.obj[n.k]=i}function fl(t,e){var i=ul(t,e),n=i.obj,r=i.k;if(n)return n[r]}function pl(t,e,i){for(var n in e)"__proto__"!==n&&"constructor"!==n&&(n in t?"string"==typeof t[n]||t[n]instanceof String||"string"==typeof e[n]||e[n]instanceof String?i&&(t[n]=e[n]):pl(t[n],e[n],i):t[n]=e[n]);return t}function gl(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var ml={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function yl(t){return"string"==typeof t?t.replace(/[&<>"'\/]/g,(function(t){return ml[t]})):t}var bl="undefined"!=typeof window&&window.navigator&&void 0===window.navigator.userAgentData&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,vl=[" ",",","?","!",";"];function xl(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(t){if(t[e])return t[e];for(var n=e.split(i),r=t,o=0;o<n.length;++o){if(!r)return;if("string"==typeof r[n[o]]&&o+1<n.length)return;if(void 0===r[n[o]]){for(var s=2,a=n.slice(o,o+s).join(i),l=r[a];void 0===l&&n.length>o+s;)s++,l=r[a=n.slice(o,o+s).join(i)];if(void 0===l)return;if(null===l)return null;if(e.endsWith(a)){if("string"==typeof l)return l;if(a&&"string"==typeof l[a])return l[a]}var c=n.slice(o+s).join(i);return c?xl(l,c,i):void 0}r=r[n[o]]}return r}}function wl(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function _l(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?wl(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):wl(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function kl(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=tl(t);if(e){var r=tl(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return Qa(this,i)}}var Sl=function(t){Za(i,t);var e=kl(i);function i(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return $a(this,i),n=e.call(this),bl&&ll.call(qa(n)),n.data=t||{},n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator="."),void 0===n.options.ignoreJSONStructure&&(n.options.ignoreJSONStructure=!0),n}return Xa(i,[{key:"addNamespaces",value:function(t){this.options.ns.indexOf(t)<0&&this.options.ns.push(t)}},{key:"removeNamespaces",value:function(t){var e=this.options.ns.indexOf(t);e>-1&&this.options.ns.splice(e,1)}},{key:"getResource",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,o=void 0!==n.ignoreJSONStructure?n.ignoreJSONStructure:this.options.ignoreJSONStructure,s=[t,e];i&&"string"!=typeof i&&(s=s.concat(i)),i&&"string"==typeof i&&(s=s.concat(r?i.split(r):i)),t.indexOf(".")>-1&&(s=t.split("."));var a=fl(this.data,s);return a||!o||"string"!=typeof i?a:xl(this.data&&this.data[t]&&this.data[t][e],i,r)}},{key:"addResource",value:function(t,e,i,n){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},o=this.options.keySeparator;void 0===o&&(o=".");var s=[t,e];i&&(s=s.concat(o?i.split(o):i)),t.indexOf(".")>-1&&(n=e,e=(s=t.split("."))[1]),this.addNamespaces(e),dl(this.data,s,n),r.silent||this.emit("added",t,e,i,n)}},{key:"addResources",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var r in i)"string"!=typeof i[r]&&"[object Array]"!==Object.prototype.toString.apply(i[r])||this.addResource(t,e,r,i[r],{silent:!0});n.silent||this.emit("added",t,e,i)}},{key:"addResourceBundle",value:function(t,e,i,n,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[t,e];t.indexOf(".")>-1&&(n=i,i=e,e=(s=t.split("."))[1]),this.addNamespaces(e);var a=fl(this.data,s)||{};n?pl(a,i,r):a=_l(_l({},a),i),dl(this.data,s,a),o.silent||this.emit("added",t,e,i)}},{key:"removeResourceBundle",value:function(t,e){this.hasResourceBundle(t,e)&&delete this.data[t][e],this.removeNamespaces(e),this.emit("removed",t,e)}},{key:"hasResourceBundle",value:function(t,e){return void 0!==this.getResource(t,e)}},{key:"getResourceBundle",value:function(t,e){return e||(e=this.options.defaultNS),"v1"===this.options.compatibilityAPI?_l(_l({},{}),this.getResource(t,e)):this.getResource(t,e)}},{key:"getDataByLanguage",value:function(t){return this.data[t]}},{key:"hasLanguageSomeTranslations",value:function(t){var e=this.getDataByLanguage(t);return!!(e&&Object.keys(e)||[]).find((function(t){return e[t]&&Object.keys(e[t]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),i}(ll),Ol={processors:{},addPostProcessor:function(t){this.processors[t.name]=t},handle:function(t,e,i,n,r){var o=this;return t.forEach((function(t){o.processors[t]&&(e=o.processors[t].process(e,i,n,r))})),e}};function Ml(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Al(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Ml(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Ml(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Pl(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=tl(t);if(e){var r=tl(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return Qa(this,i)}}var Cl={},El=function(t){Za(i,t);var e=Pl(i);function i(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $a(this,i),n=e.call(this),bl&&ll.call(qa(n)),function(t,e,i){t.forEach((function(t){e[t]&&(i[t]=e[t])}))}(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],t,qa(n)),n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n.logger=al.create("translator"),n}return Xa(i,[{key:"changeLanguage",value:function(t){t&&(this.language=t)}},{key:"exists",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==t)return!1;var i=this.resolve(t,e);return i&&void 0!==i.res}},{key:"extractFromKey",value:function(t,e){var i=void 0!==e.nsSeparator?e.nsSeparator:this.options.nsSeparator;void 0===i&&(i=":");var n=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,r=e.ns||this.options.defaultNS||[],o=i&&t.indexOf(i)>-1,s=!(this.options.userDefinedKeySeparator||e.keySeparator||this.options.userDefinedNsSeparator||e.nsSeparator||function(t,e,i){e=e||"",i=i||"";var n=vl.filter((function(t){return e.indexOf(t)<0&&i.indexOf(t)<0}));if(0===n.length)return!0;var r=new RegExp("(".concat(n.map((function(t){return"?"===t?"\\?":t})).join("|"),")")),o=!r.test(t);if(!o){var s=t.indexOf(i);s>0&&!r.test(t.substring(0,s))&&(o=!0)}return o}(t,i,n));if(o&&!s){var a=t.match(this.interpolator.nestingRegexp);if(a&&a.length>0)return{key:t,namespaces:r};var l=t.split(i);(i!==n||i===n&&this.options.ns.indexOf(l[0])>-1)&&(r=l.shift()),t=l.join(n)}return"string"==typeof r&&(r=[r]),{key:t,namespaces:r}}},{key:"translate",value:function(t,e,n){var r=this;if("object"!==Ya(e)&&this.options.overloadTranslationOptionHandler&&(e=this.options.overloadTranslationOptionHandler(arguments)),"object"===Ya(e)&&(e=Al({},e)),e||(e={}),null==t)return"";Array.isArray(t)||(t=[String(t)]);var o=void 0!==e.returnDetails?e.returnDetails:this.options.returnDetails,s=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,a=this.extractFromKey(t[t.length-1],e),l=a.key,c=a.namespaces,h=c[c.length-1],u=e.lng||this.language,d=e.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(u&&"cimode"===u.toLowerCase()){if(d){var f=e.nsSeparator||this.options.nsSeparator;return o?{res:"".concat(h).concat(f).concat(l),usedKey:l,exactUsedKey:l,usedLng:u,usedNS:h}:"".concat(h).concat(f).concat(l)}return o?{res:l,usedKey:l,exactUsedKey:l,usedLng:u,usedNS:h}:l}var p=this.resolve(t,e),g=p&&p.res,m=p&&p.usedKey||l,y=p&&p.exactUsedKey||l,b=Object.prototype.toString.apply(g),v=void 0!==e.joinArrays?e.joinArrays:this.options.joinArrays,x=!this.i18nFormat||this.i18nFormat.handleAsObject;if(x&&g&&("string"!=typeof g&&"boolean"!=typeof g&&"number"!=typeof g)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(b)<0&&("string"!=typeof v||"[object Array]"!==b)){if(!e.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");var w=this.options.returnedObjectHandler?this.options.returnedObjectHandler(m,g,Al(Al({},e),{},{ns:c})):"key '".concat(l," (").concat(this.language,")' returned an object instead of string.");return o?(p.res=w,p):w}if(s){var _="[object Array]"===b,k=_?[]:{},S=_?y:m;for(var O in g)if(Object.prototype.hasOwnProperty.call(g,O)){var M="".concat(S).concat(s).concat(O);k[O]=this.translate(M,Al(Al({},e),{joinArrays:!1,ns:c})),k[O]===M&&(k[O]=g[O])}g=k}}else if(x&&"string"==typeof v&&"[object Array]"===b)(g=g.join(v))&&(g=this.extendTranslation(g,t,e,n));else{var A=!1,P=!1,C=void 0!==e.count&&"string"!=typeof e.count,E=i.hasDefaultValue(e),L=C?this.pluralResolver.getSuffix(u,e.count,e):"",R=e["defaultValue".concat(L)]||e.defaultValue;!this.isValidLookup(g)&&E&&(A=!0,g=R),this.isValidLookup(g)||(P=!0,g=l);var D=(e.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&P?void 0:g,I=E&&R!==g&&this.options.updateMissing;if(P||A||I){if(this.logger.log(I?"updateKey":"missingKey",u,h,l,I?R:g),s){var T=this.resolve(l,Al(Al({},e),{},{keySeparator:!1}));T&&T.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var N=[],j=this.languageUtils.getFallbackCodes(this.options.fallbackLng,e.lng||this.language);if("fallback"===this.options.saveMissingTo&&j&&j[0])for(var F=0;F<j.length;F++)N.push(j[F]);else"all"===this.options.saveMissingTo?N=this.languageUtils.toResolveHierarchy(e.lng||this.language):N.push(e.lng||this.language);var z=function(t,i,n){var o=E&&n!==g?n:D;r.options.missingKeyHandler?r.options.missingKeyHandler(t,h,i,o,I,e):r.backendConnector&&r.backendConnector.saveMissing&&r.backendConnector.saveMissing(t,h,i,o,I,e),r.emit("missingKey",t,h,i,g)};this.options.saveMissing&&(this.options.saveMissingPlurals&&C?N.forEach((function(t){r.pluralResolver.getSuffixes(t,e).forEach((function(i){z([t],l+i,e["defaultValue".concat(i)]||R)}))})):z(N,l,R))}g=this.extendTranslation(g,t,e,p,n),P&&g===l&&this.options.appendNamespaceToMissingKey&&(g="".concat(h,":").concat(l)),(P||A)&&this.options.parseMissingKeyHandler&&(g="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?"".concat(h,":").concat(l):l,A?g:void 0):this.options.parseMissingKeyHandler(g))}return o?(p.res=g,p):g}},{key:"extendTranslation",value:function(t,e,i,n,r){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)t=this.i18nFormat.parse(t,Al(Al({},this.options.interpolation.defaultVariables),i),n.usedLng,n.usedNS,n.usedKey,{resolved:n});else if(!i.skipInterpolation){i.interpolation&&this.interpolator.init(Al(Al({},i),{interpolation:Al(Al({},this.options.interpolation),i.interpolation)}));var s,a="string"==typeof t&&(i&&i.interpolation&&void 0!==i.interpolation.skipOnVariables?i.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(a){var l=t.match(this.interpolator.nestingRegexp);s=l&&l.length}var c=i.replace&&"string"!=typeof i.replace?i.replace:i;if(this.options.interpolation.defaultVariables&&(c=Al(Al({},this.options.interpolation.defaultVariables),c)),t=this.interpolator.interpolate(t,c,i.lng||this.language,i),a){var h=t.match(this.interpolator.nestingRegexp);s<(h&&h.length)&&(i.nest=!1)}!i.lng&&"v1"!==this.options.compatibilityAPI&&n&&n.res&&(i.lng=n.usedLng),!1!==i.nest&&(t=this.interpolator.nest(t,(function(){for(var t=arguments.length,n=new Array(t),s=0;s<t;s++)n[s]=arguments[s];return r&&r[0]===n[0]&&!i.context?(o.logger.warn("It seems you are nesting recursively key: ".concat(n[0]," in key: ").concat(e[0])),null):o.translate.apply(o,n.concat([e]))}),i)),i.interpolation&&this.interpolator.reset()}var u=i.postProcess||this.options.postProcess,d="string"==typeof u?[u]:u;return null!=t&&d&&d.length&&!1!==i.applyPostProcessor&&(t=Ol.handle(d,t,e,this.options&&this.options.postProcessPassResolved?Al({i18nResolved:n},i):i,this)),t}},{key:"resolve",value:function(t){var e,i,n,r,o,s=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof t&&(t=[t]),t.forEach((function(t){if(!s.isValidLookup(e)){var l=s.extractFromKey(t,a),c=l.key;i=c;var h=l.namespaces;s.options.fallbackNS&&(h=h.concat(s.options.fallbackNS));var u=void 0!==a.count&&"string"!=typeof a.count,d=u&&!a.ordinal&&0===a.count&&s.pluralResolver.shouldUseIntlApi(),f=void 0!==a.context&&("string"==typeof a.context||"number"==typeof a.context)&&""!==a.context,p=a.lngs?a.lngs:s.languageUtils.toResolveHierarchy(a.lng||s.language,a.fallbackLng);h.forEach((function(t){s.isValidLookup(e)||(o=t,!Cl["".concat(p[0],"-").concat(t)]&&s.utils&&s.utils.hasLoadedNamespace&&!s.utils.hasLoadedNamespace(o)&&(Cl["".concat(p[0],"-").concat(t)]=!0,s.logger.warn('key "'.concat(i,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(o,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(i){if(!s.isValidLookup(e)){r=i;var o,l=[c];if(s.i18nFormat&&s.i18nFormat.addLookupKeys)s.i18nFormat.addLookupKeys(l,c,i,t,a);else{var h;u&&(h=s.pluralResolver.getSuffix(i,a.count,a));var p="".concat(s.options.pluralSeparator,"zero");if(u&&(l.push(c+h),d&&l.push(c+p)),f){var g="".concat(c).concat(s.options.contextSeparator).concat(a.context);l.push(g),u&&(l.push(g+h),d&&l.push(g+p))}}for(;o=l.pop();)s.isValidLookup(e)||(n=o,e=s.getResource(i,t,o,a))}})))}))}})),{res:e,usedKey:i,exactUsedKey:n,usedLng:r,usedNS:o}}},{key:"isValidLookup",value:function(t){return!(void 0===t||!this.options.returnNull&&null===t||!this.options.returnEmptyString&&""===t)}},{key:"getResource",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(t,e,i,n):this.resourceStore.getResource(t,e,i,n)}}],[{key:"hasDefaultValue",value:function(t){var e="defaultValue";for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&e===i.substring(0,12)&&void 0!==t[i])return!0;return!1}}]),i}(ll);function Ll(t){return t.charAt(0).toUpperCase()+t.slice(1)}var Rl=function(){function t(e){$a(this,t),this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=al.create("languageUtils")}return Xa(t,[{key:"getScriptPartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return null;var e=t.split("-");return 2===e.length?null:(e.pop(),"x"===e[e.length-1].toLowerCase()?null:this.formatLanguageCode(e.join("-")))}},{key:"getLanguagePartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return t;var e=t.split("-");return this.formatLanguageCode(e[0])}},{key:"formatLanguageCode",value:function(t){if("string"==typeof t&&t.indexOf("-")>-1){var e=["hans","hant","latn","cyrl","cans","mong","arab"],i=t.split("-");return this.options.lowerCaseLng?i=i.map((function(t){return t.toLowerCase()})):2===i.length?(i[0]=i[0].toLowerCase(),i[1]=i[1].toUpperCase(),e.indexOf(i[1].toLowerCase())>-1&&(i[1]=Ll(i[1].toLowerCase()))):3===i.length&&(i[0]=i[0].toLowerCase(),2===i[1].length&&(i[1]=i[1].toUpperCase()),"sgn"!==i[0]&&2===i[2].length&&(i[2]=i[2].toUpperCase()),e.indexOf(i[1].toLowerCase())>-1&&(i[1]=Ll(i[1].toLowerCase())),e.indexOf(i[2].toLowerCase())>-1&&(i[2]=Ll(i[2].toLowerCase()))),i.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?t.toLowerCase():t}},{key:"isSupportedCode",value:function(t){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(t=this.getLanguagePartFromCode(t)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(t)>-1}},{key:"getBestMatchFromCodes",value:function(t){var e,i=this;return t?(t.forEach((function(t){if(!e){var n=i.formatLanguageCode(t);i.options.supportedLngs&&!i.isSupportedCode(n)||(e=n)}})),!e&&this.options.supportedLngs&&t.forEach((function(t){if(!e){var n=i.getLanguagePartFromCode(t);if(i.isSupportedCode(n))return e=n;e=i.options.supportedLngs.find((function(t){return t===n?t:t.indexOf("-")<0&&n.indexOf("-")<0?void 0:0===t.indexOf(n)?t:void 0}))}})),e||(e=this.getFallbackCodes(this.options.fallbackLng)[0]),e):null}},{key:"getFallbackCodes",value:function(t,e){if(!t)return[];if("function"==typeof t&&(t=t(e)),"string"==typeof t&&(t=[t]),"[object Array]"===Object.prototype.toString.apply(t))return t;if(!e)return t.default||[];var i=t[e];return i||(i=t[this.getScriptPartFromCode(e)]),i||(i=t[this.formatLanguageCode(e)]),i||(i=t[this.getLanguagePartFromCode(e)]),i||(i=t.default),i||[]}},{key:"toResolveHierarchy",value:function(t,e){var i=this,n=this.getFallbackCodes(e||this.options.fallbackLng||[],t),r=[],o=function(t){t&&(i.isSupportedCode(t)?r.push(t):i.logger.warn("rejecting language code not found in supportedLngs: ".concat(t)))};return"string"==typeof t&&t.indexOf("-")>-1?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(t)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(t)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(t))):"string"==typeof t&&o(this.formatLanguageCode(t)),n.forEach((function(t){r.indexOf(t)<0&&o(i.formatLanguageCode(t))})),r}}]),t}(),Dl=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],Il={1:function(t){return Number(t>1)},2:function(t){return Number(1!=t)},3:function(t){return 0},4:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},5:function(t){return Number(0==t?0:1==t?1:2==t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5)},6:function(t){return Number(1==t?0:t>=2&&t<=4?1:2)},7:function(t){return Number(1==t?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},8:function(t){return Number(1==t?0:2==t?1:8!=t&&11!=t?2:3)},9:function(t){return Number(t>=2)},10:function(t){return Number(1==t?0:2==t?1:t<7?2:t<11?3:4)},11:function(t){return Number(1==t||11==t?0:2==t||12==t?1:t>2&&t<20?2:3)},12:function(t){return Number(t%10!=1||t%100==11)},13:function(t){return Number(0!==t)},14:function(t){return Number(1==t?0:2==t?1:3==t?2:3)},15:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2)},16:function(t){return Number(t%10==1&&t%100!=11?0:0!==t?1:2)},17:function(t){return Number(1==t||t%10==1&&t%100!=11?0:1)},18:function(t){return Number(0==t?0:1==t?1:2)},19:function(t){return Number(1==t?0:0==t||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3)},20:function(t){return Number(1==t?0:0==t||t%100>0&&t%100<20?1:2)},21:function(t){return Number(t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0)},22:function(t){return Number(1==t?0:2==t?1:(t<0||t>10)&&t%10==0?2:3)}},Tl=["v1","v2","v3"],Nl={zero:0,one:1,two:2,few:3,many:4,other:5};var jl=function(){function t(e){var i,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};$a(this,t),this.languageUtils=e,this.options=n,this.logger=al.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=(i={},Dl.forEach((function(t){t.lngs.forEach((function(e){i[e]={numbers:t.nr,plurals:Il[t.fc]}}))})),i)}return Xa(t,[{key:"addRule",value:function(t,e){this.rules[t]=e}},{key:"getRule",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(t,{type:e.ordinal?"ordinal":"cardinal"})}catch(t){return}return this.rules[t]||this.rules[this.languageUtils.getLanguagePartFromCode(t)]}},{key:"needsPlural",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this.getRule(t,e);return this.shouldUseIntlApi()?i&&i.resolvedOptions().pluralCategories.length>1:i&&i.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(t,i).map((function(t){return"".concat(e).concat(t)}))}},{key:"getSuffixes",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(t,i);return n?this.shouldUseIntlApi()?n.resolvedOptions().pluralCategories.sort((function(t,e){return Nl[t]-Nl[e]})).map((function(t){return"".concat(e.options.prepend).concat(t)})):n.numbers.map((function(n){return e.getSuffix(t,n,i)})):[]}},{key:"getSuffix",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=this.getRule(t,i);return n?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(n.select(e)):this.getSuffixRetroCompatible(n,e):(this.logger.warn("no plural rule found for: ".concat(t)),"")}},{key:"getSuffixRetroCompatible",value:function(t,e){var i=this,n=t.noAbs?t.plurals(e):t.plurals(Math.abs(e)),r=t.numbers[n];this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]&&(2===r?r="plural":1===r&&(r=""));var o=function(){return i.options.prepend&&r.toString()?i.options.prepend+r.toString():r.toString()};return"v1"===this.options.compatibilityJSON?1===r?"":"number"==typeof r?"_plural_".concat(r.toString()):o():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]?o():this.options.prepend&&n.toString()?this.options.prepend+n.toString():n.toString()}},{key:"shouldUseIntlApi",value:function(){return!Tl.includes(this.options.compatibilityJSON)}}]),t}();function Fl(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function zl(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Fl(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Fl(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Vl(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=function(t,e,i){var n=fl(t,i);return void 0!==n?n:fl(e,i)}(t,e,i);return!o&&r&&"string"==typeof i&&void 0===(o=xl(t,i,n))&&(o=xl(e,i,n)),o}var Bl=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$a(this,t),this.logger=al.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||function(t){return t},this.init(e)}return Xa(t,[{key:"init",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.interpolation||(t.interpolation={escapeValue:!0});var e=t.interpolation;this.escape=void 0!==e.escape?e.escape:yl,this.escapeValue=void 0===e.escapeValue||e.escapeValue,this.useRawValueToEscape=void 0!==e.useRawValueToEscape&&e.useRawValueToEscape,this.prefix=e.prefix?gl(e.prefix):e.prefixEscaped||"{{",this.suffix=e.suffix?gl(e.suffix):e.suffixEscaped||"}}",this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||",",this.unescapePrefix=e.unescapeSuffix?"":e.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":e.unescapeSuffix||"",this.nestingPrefix=e.nestingPrefix?gl(e.nestingPrefix):e.nestingPrefixEscaped||gl("$t("),this.nestingSuffix=e.nestingSuffix?gl(e.nestingSuffix):e.nestingSuffixEscaped||gl(")"),this.nestingOptionsSeparator=e.nestingOptionsSeparator?e.nestingOptionsSeparator:e.nestingOptionsSeparator||",",this.maxReplaces=e.maxReplaces?e.maxReplaces:1e3,this.alwaysFormat=void 0!==e.alwaysFormat&&e.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var t="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(t,"g");var e="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(e,"g");var i="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(i,"g")}},{key:"interpolate",value:function(t,e,i,n){var r,o,s,a=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function c(t){return t.replace(/\$/g,"$$$$")}var h=function(t){if(t.indexOf(a.formatSeparator)<0){var r=Vl(e,l,t,a.options.keySeparator,a.options.ignoreJSONStructure);return a.alwaysFormat?a.format(r,void 0,i,zl(zl(zl({},n),e),{},{interpolationkey:t})):r}var o=t.split(a.formatSeparator),s=o.shift().trim(),c=o.join(a.formatSeparator).trim();return a.format(Vl(e,l,s,a.options.keySeparator,a.options.ignoreJSONStructure),c,i,zl(zl(zl({},n),e),{},{interpolationkey:s}))};this.resetRegExp();var u=n&&n.missingInterpolationHandler||this.options.missingInterpolationHandler,d=n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(t){return c(t)}},{regex:this.regexp,safeValue:function(t){return a.escapeValue?c(a.escape(t)):c(t)}}].forEach((function(e){for(s=0;r=e.regex.exec(t);){var i=r[1].trim();if(void 0===(o=h(i)))if("function"==typeof u){var l=u(t,r,n);o="string"==typeof l?l:""}else if(n&&Object.prototype.hasOwnProperty.call(n,i))o="";else{if(d){o=r[0];continue}a.logger.warn("missed to pass in variable ".concat(i," for interpolating ").concat(t)),o=""}else"string"==typeof o||a.useRawValueToEscape||(o=hl(o));var c=e.safeValue(o);if(t=t.replace(r[0],c),d?(e.regex.lastIndex+=o.length,e.regex.lastIndex-=r[0].length):e.regex.lastIndex=0,++s>=a.maxReplaces)break}})),t}},{key:"nest",value:function(t,e){var i,n,r,o=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function a(t,e){var i=this.nestingOptionsSeparator;if(t.indexOf(i)<0)return t;var n=t.split(new RegExp("".concat(i,"[ ]*{"))),o="{".concat(n[1]);t=n[0];var s=(o=this.interpolate(o,r)).match(/'/g),a=o.match(/"/g);(s&&s.length%2==0&&!a||a.length%2!=0)&&(o=o.replace(/'/g,'"'));try{r=JSON.parse(o),e&&(r=zl(zl({},e),r))}catch(e){return this.logger.warn("failed parsing options string in nesting for key ".concat(t),e),"".concat(t).concat(i).concat(o)}return delete r.defaultValue,t}for(;i=this.nestingRegexp.exec(t);){var l=[];(r=(r=zl({},s)).replace&&"string"!=typeof r.replace?r.replace:r).applyPostProcessor=!1,delete r.defaultValue;var c=!1;if(-1!==i[0].indexOf(this.formatSeparator)&&!/{.*}/.test(i[1])){var h=i[1].split(this.formatSeparator).map((function(t){return t.trim()}));i[1]=h.shift(),l=h,c=!0}if((n=e(a.call(this,i[1].trim(),r),r))&&i[0]===t&&"string"!=typeof n)return n;"string"!=typeof n&&(n=hl(n)),n||(this.logger.warn("missed to resolve ".concat(i[1]," for nesting ").concat(t)),n=""),c&&(n=l.reduce((function(t,e){return o.format(t,e,s.lng,zl(zl({},s),{},{interpolationkey:i[1].trim()}))}),n.trim())),t=t.replace(i[0],n),this.regexp.lastIndex=0}return t}}]),t}();function Hl(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Wl(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Hl(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Hl(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Ul(t){var e={};return function(i,n,r){var o=n+JSON.stringify(r),s=e[o];return s||(s=t(n,r),e[o]=s),s(i)}}var Yl=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$a(this,t),this.logger=al.create("formatter"),this.options=e,this.formats={number:Ul((function(t,e){var i=new Intl.NumberFormat(t,Wl({},e));return function(t){return i.format(t)}})),currency:Ul((function(t,e){var i=new Intl.NumberFormat(t,Wl(Wl({},e),{},{style:"currency"}));return function(t){return i.format(t)}})),datetime:Ul((function(t,e){var i=new Intl.DateTimeFormat(t,Wl({},e));return function(t){return i.format(t)}})),relativetime:Ul((function(t,e){var i=new Intl.RelativeTimeFormat(t,Wl({},e));return function(t){return i.format(t,e.range||"day")}})),list:Ul((function(t,e){var i=new Intl.ListFormat(t,Wl({},e));return function(t){return i.format(t)}}))},this.init(e)}return Xa(t,[{key:"init",value:function(t){var e=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||","}},{key:"add",value:function(t,e){this.formats[t.toLowerCase().trim()]=e}},{key:"addCached",value:function(t,e){this.formats[t.toLowerCase().trim()]=Ul(e)}},{key:"format",value:function(t,e,i){var n=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=e.split(this.formatSeparator).reduce((function(t,e){var o=function(t){var e=t.toLowerCase().trim(),i={};if(t.indexOf("(")>-1){var n=t.split("(");e=n[0].toLowerCase().trim();var r=n[1].substring(0,n[1].length-1);"currency"===e&&r.indexOf(":")<0?i.currency||(i.currency=r.trim()):"relativetime"===e&&r.indexOf(":")<0?i.range||(i.range=r.trim()):r.split(";").forEach((function(t){if(t){var e=nl(t.split(":")),n=e[0],r=e.slice(1).join(":").trim().replace(/^'+|'+$/g,"");i[n.trim()]||(i[n.trim()]=r),"false"===r&&(i[n.trim()]=!1),"true"===r&&(i[n.trim()]=!0),isNaN(r)||(i[n.trim()]=parseInt(r,10))}}))}return{formatName:e,formatOptions:i}}(e),s=o.formatName,a=o.formatOptions;if(n.formats[s]){var l=t;try{var c=r&&r.formatParams&&r.formatParams[r.interpolationkey]||{},h=c.locale||c.lng||r.locale||r.lng||i;l=n.formats[s](t,h,Wl(Wl(Wl({},a),r),c))}catch(t){n.logger.warn(t)}return l}return n.logger.warn("there was no format function for ".concat(s)),t}),t);return o}}]),t}();function $l(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Kl(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?$l(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):$l(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Gl(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=tl(t);if(e){var r=tl(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return Qa(this,i)}}var Xl=function(t){Za(i,t);var e=Gl(i);function i(t,n,r){var o,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return $a(this,i),o=e.call(this),bl&&ll.call(qa(o)),o.backend=t,o.store=n,o.services=r,o.languageUtils=r.languageUtils,o.options=s,o.logger=al.create("backendConnector"),o.waitingReads=[],o.maxParallelReads=s.maxParallelReads||10,o.readingCalls=0,o.maxRetries=s.maxRetries>=0?s.maxRetries:5,o.retryTimeout=s.retryTimeout>=1?s.retryTimeout:350,o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(r,s.backend,s),o}return Xa(i,[{key:"queueLoad",value:function(t,e,i,n){var r=this,o={},s={},a={},l={};return t.forEach((function(t){var n=!0;e.forEach((function(e){var a="".concat(t,"|").concat(e);!i.reload&&r.store.hasResourceBundle(t,e)?r.state[a]=2:r.state[a]<0||(1===r.state[a]?void 0===s[a]&&(s[a]=!0):(r.state[a]=1,n=!1,void 0===s[a]&&(s[a]=!0),void 0===o[a]&&(o[a]=!0),void 0===l[e]&&(l[e]=!0)))})),n||(a[t]=!0)})),(Object.keys(o).length||Object.keys(s).length)&&this.queue.push({pending:s,pendingCount:Object.keys(s).length,loaded:{},errors:[],callback:n}),{toLoad:Object.keys(o),pending:Object.keys(s),toLoadLanguages:Object.keys(a),toLoadNamespaces:Object.keys(l)}}},{key:"loaded",value:function(t,e,i){var n=t.split("|"),r=n[0],o=n[1];e&&this.emit("failedLoading",r,o,e),i&&this.store.addResourceBundle(r,o,i),this.state[t]=e?-1:2;var s={};this.queue.forEach((function(i){!function(t,e,i,n){var r=ul(t,e,Object),o=r.obj,s=r.k;o[s]=o[s]||[],n&&(o[s]=o[s].concat(i)),n||o[s].push(i)}(i.loaded,[r],o),function(t,e){void 0!==t.pending[e]&&(delete t.pending[e],t.pendingCount--)}(i,t),e&&i.errors.push(e),0!==i.pendingCount||i.done||(Object.keys(i.loaded).forEach((function(t){s[t]||(s[t]={});var e=i.loaded[t];e.length&&e.forEach((function(e){void 0===s[t][e]&&(s[t][e]=!0)}))})),i.done=!0,i.errors.length?i.callback(i.errors):i.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((function(t){return!t.done}))}},{key:"read",value:function(t,e,i){var n=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,s=arguments.length>5?arguments[5]:void 0;if(!t.length)return s(null,{});if(this.readingCalls>=this.maxParallelReads)this.waitingReads.push({lng:t,ns:e,fcName:i,tried:r,wait:o,callback:s});else{this.readingCalls++;var a=function(a,l){if(n.readingCalls--,n.waitingReads.length>0){var c=n.waitingReads.shift();n.read(c.lng,c.ns,c.fcName,c.tried,c.wait,c.callback)}a&&l&&r<n.maxRetries?setTimeout((function(){n.read.call(n,t,e,i,r+1,2*o,s)}),o):s(a,l)},l=this.backend[i].bind(this.backend);if(2!==l.length)return l(t,e,a);try{var c=l(t,e);c&&"function"==typeof c.then?c.then((function(t){return a(null,t)})).catch(a):a(null,c)}catch(t){a(t)}}}},{key:"prepareLoading",value:function(t,e){var i=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),r&&r();"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]);var o=this.queueLoad(t,e,n,r);if(!o.toLoad.length)return o.pending.length||r(),null;o.toLoad.forEach((function(t){i.loadOne(t)}))}},{key:"load",value:function(t,e,i){this.prepareLoading(t,e,{},i)}},{key:"reload",value:function(t,e,i){this.prepareLoading(t,e,{reload:!0},i)}},{key:"loadOne",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=t.split("|"),r=n[0],o=n[1];this.read(r,o,"read",void 0,void 0,(function(n,s){n&&e.logger.warn("".concat(i,"loading namespace ").concat(o," for language ").concat(r," failed"),n),!n&&s&&e.logger.log("".concat(i,"loaded namespace ").concat(o," for language ").concat(r),s),e.loaded(t,n,s)}))}},{key:"saveMissing",value:function(t,e,i,n,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:function(){};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(e))this.logger.warn('did not save key "'.concat(i,'" as the namespace "').concat(e,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=i&&""!==i){if(this.backend&&this.backend.create){var a=Kl(Kl({},o),{},{isUpdate:r}),l=this.backend.create.bind(this.backend);if(l.length<6)try{var c;(c=5===l.length?l(t,e,i,n,a):l(t,e,i,n))&&"function"==typeof c.then?c.then((function(t){return s(null,t)})).catch(s):s(null,c)}catch(t){s(t)}else l(t,e,i,n,s,a)}t&&t[0]&&this.store.addResource(t[0],e,i,n)}}}]),i}(ll);function ql(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(t){var e={};if("object"===Ya(t[1])&&(e=t[1]),"string"==typeof t[1]&&(e.defaultValue=t[1]),"string"==typeof t[2]&&(e.tDescription=t[2]),"object"===Ya(t[2])||"object"===Ya(t[3])){var i=t[3]||t[2];Object.keys(i).forEach((function(t){e[t]=i[t]}))}return e},interpolation:{escapeValue:!0,format:function(t,e,i,n){return t},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function Jl(t){return"string"==typeof t.ns&&(t.ns=[t.ns]),"string"==typeof t.fallbackLng&&(t.fallbackLng=[t.fallbackLng]),"string"==typeof t.fallbackNS&&(t.fallbackNS=[t.fallbackNS]),t.supportedLngs&&t.supportedLngs.indexOf("cimode")<0&&(t.supportedLngs=t.supportedLngs.concat(["cimode"])),t}function Zl(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Ql(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Zl(Object(i),!0).forEach((function(e){el(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Zl(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function tc(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=tl(t);if(e){var r=tl(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return Qa(this,i)}}function ec(){}var ic=function(t){Za(i,t);var e=tc(i);function i(){var t,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=arguments.length>1?arguments[1]:void 0;if($a(this,i),t=e.call(this),bl&&ll.call(qa(t)),t.options=Jl(r),t.services={},t.logger=al,t.modules={external:[]},n=qa(t),Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((function(t){"function"==typeof n[t]&&(n[t]=n[t].bind(n))})),o&&!t.isInitialized&&!r.isClone){if(!t.options.initImmediate)return t.init(r,o),Qa(t,qa(t));setTimeout((function(){t.init(r,o)}),0)}return t}return Xa(i,[{key:"init",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1?arguments[1]:void 0;"function"==typeof e&&(i=e,e={}),!e.defaultNS&&!1!==e.defaultNS&&e.ns&&("string"==typeof e.ns?e.defaultNS=e.ns:e.ns.indexOf("translation")<0&&(e.defaultNS=e.ns[0]));var n=ql();function r(t){return t?"function"==typeof t?new t:t:null}if(this.options=Ql(Ql(Ql({},n),this.options),Jl(e)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=Ql(Ql({},n.interpolation),this.options.interpolation)),void 0!==e.keySeparator&&(this.options.userDefinedKeySeparator=e.keySeparator),void 0!==e.nsSeparator&&(this.options.userDefinedNsSeparator=e.nsSeparator),!this.options.isClone){var o;this.modules.logger?al.init(r(this.modules.logger),this.options):al.init(null,this.options),this.modules.formatter?o=this.modules.formatter:"undefined"!=typeof Intl&&(o=Yl);var s=new Rl(this.options);this.store=new Sl(this.options.resources,this.options);var a=this.services;a.logger=al,a.resourceStore=this.store,a.languageUtils=s,a.pluralResolver=new jl(s,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!o||this.options.interpolation.format&&this.options.interpolation.format!==n.interpolation.format||(a.formatter=r(o),a.formatter.init(a,this.options),this.options.interpolation.format=a.formatter.format.bind(a.formatter)),a.interpolator=new Bl(this.options),a.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},a.backendConnector=new Xl(r(this.modules.backend),a.resourceStore,a,this.options),a.backendConnector.on("*",(function(e){for(var i=arguments.length,n=new Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];t.emit.apply(t,[e].concat(n))})),this.modules.languageDetector&&(a.languageDetector=r(this.modules.languageDetector),a.languageDetector.init&&a.languageDetector.init(a,this.options.detection,this.options)),this.modules.i18nFormat&&(a.i18nFormat=r(this.modules.i18nFormat),a.i18nFormat.init&&a.i18nFormat.init(this)),this.translator=new El(this.services,this.options),this.translator.on("*",(function(e){for(var i=arguments.length,n=new Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];t.emit.apply(t,[e].concat(n))})),this.modules.external.forEach((function(e){e.init&&e.init(t)}))}if(this.format=this.options.interpolation.format,i||(i=ec),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var l=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);l.length>0&&"dev"!==l[0]&&(this.options.lng=l[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((function(e){t[e]=function(){var i;return(i=t.store)[e].apply(i,arguments)}}));["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((function(e){t[e]=function(){var i;return(i=t.store)[e].apply(i,arguments),t}}));var c=cl(),h=function(){var e=function(e,n){t.isInitialized&&!t.initializedStoreOnce&&t.logger.warn("init: i18next is already initialized. You should call init just once!"),t.isInitialized=!0,t.options.isClone||t.logger.log("initialized",t.options),t.emit("initialized",t.options),c.resolve(n),i(e,n)};if(t.languages&&"v1"!==t.options.compatibilityAPI&&!t.isInitialized)return e(null,t.t.bind(t));t.changeLanguage(t.options.lng,e)};return this.options.resources||!this.options.initImmediate?h():setTimeout(h,0),c}},{key:"loadResources",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ec,n="string"==typeof t?t:this.language;if("function"==typeof t&&(i=t),!this.options.resources||this.options.partialBundledLanguages){if(n&&"cimode"===n.toLowerCase())return i();var r=[],o=function(t){t&&e.services.languageUtils.toResolveHierarchy(t).forEach((function(t){r.indexOf(t)<0&&r.push(t)}))};if(n)o(n);else this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((function(t){return o(t)}));this.options.preload&&this.options.preload.forEach((function(t){return o(t)})),this.services.backendConnector.load(r,this.options.ns,(function(t){t||e.resolvedLanguage||!e.language||e.setResolvedLanguage(e.language),i(t)}))}else i(null)}},{key:"reloadResources",value:function(t,e,i){var n=cl();return t||(t=this.languages),e||(e=this.options.ns),i||(i=ec),this.services.backendConnector.reload(t,e,(function(t){n.resolve(),i(t)})),n}},{key:"use",value:function(t){if(!t)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!t.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===t.type&&(this.modules.backend=t),("logger"===t.type||t.log&&t.warn&&t.error)&&(this.modules.logger=t),"languageDetector"===t.type&&(this.modules.languageDetector=t),"i18nFormat"===t.type&&(this.modules.i18nFormat=t),"postProcessor"===t.type&&Ol.addPostProcessor(t),"formatter"===t.type&&(this.modules.formatter=t),"3rdParty"===t.type&&this.modules.external.push(t),this}},{key:"setResolvedLanguage",value:function(t){if(t&&this.languages&&!(["cimode","dev"].indexOf(t)>-1))for(var e=0;e<this.languages.length;e++){var i=this.languages[e];if(!(["cimode","dev"].indexOf(i)>-1)&&this.store.hasLanguageSomeTranslations(i)){this.resolvedLanguage=i;break}}}},{key:"changeLanguage",value:function(t,e){var i=this;this.isLanguageChangingTo=t;var n=cl();this.emit("languageChanging",t);var r=function(t){i.language=t,i.languages=i.services.languageUtils.toResolveHierarchy(t),i.resolvedLanguage=void 0,i.setResolvedLanguage(t)},o=function(o){t||o||!i.services.languageDetector||(o=[]);var s="string"==typeof o?o:i.services.languageUtils.getBestMatchFromCodes(o);s&&(i.language||r(s),i.translator.language||i.translator.changeLanguage(s),i.services.languageDetector&&i.services.languageDetector.cacheUserLanguage&&i.services.languageDetector.cacheUserLanguage(s)),i.loadResources(s,(function(t){!function(t,o){o?(r(o),i.translator.changeLanguage(o),i.isLanguageChangingTo=void 0,i.emit("languageChanged",o),i.logger.log("languageChanged",o)):i.isLanguageChangingTo=void 0,n.resolve((function(){return i.t.apply(i,arguments)})),e&&e(t,(function(){return i.t.apply(i,arguments)}))}(t,s)}))};return t||!this.services.languageDetector||this.services.languageDetector.async?!t&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(o):this.services.languageDetector.detect(o):o(t):o(this.services.languageDetector.detect()),n}},{key:"getFixedT",value:function(t,e,i){var n=this,r=function t(e,r){var o;if("object"!==Ya(r)){for(var s=arguments.length,a=new Array(s>2?s-2:0),l=2;l<s;l++)a[l-2]=arguments[l];o=n.options.overloadTranslationOptionHandler([e,r].concat(a))}else o=Ql({},r);o.lng=o.lng||t.lng,o.lngs=o.lngs||t.lngs,o.ns=o.ns||t.ns,o.keyPrefix=o.keyPrefix||i||t.keyPrefix;var c,h=n.options.keySeparator||".";return c=o.keyPrefix&&Array.isArray(e)?e.map((function(t){return"".concat(o.keyPrefix).concat(h).concat(t)})):o.keyPrefix?"".concat(o.keyPrefix).concat(h).concat(e):e,n.t(c,o)};return"string"==typeof t?r.lng=t:r.lngs=t,r.ns=e,r.keyPrefix=i,r}},{key:"t",value:function(){var t;return this.translator&&(t=this.translator).translate.apply(t,arguments)}},{key:"exists",value:function(){var t;return this.translator&&(t=this.translator).exists.apply(t,arguments)}},{key:"setDefaultNamespace",value:function(t){this.options.defaultNS=t}},{key:"hasLoadedNamespace",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var n=i.lng||this.resolvedLanguage||this.languages[0],r=!!this.options&&this.options.fallbackLng,o=this.languages[this.languages.length-1];if("cimode"===n.toLowerCase())return!0;var s=function(t,i){var n=e.services.backendConnector.state["".concat(t,"|").concat(i)];return-1===n||2===n};if(i.precheck){var a=i.precheck(this,s);if(void 0!==a)return a}return!!this.hasResourceBundle(n,t)||(!(this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages))||!(!s(n,t)||r&&!s(o,t)))}},{key:"loadNamespaces",value:function(t,e){var i=this,n=cl();return this.options.ns?("string"==typeof t&&(t=[t]),t.forEach((function(t){i.options.ns.indexOf(t)<0&&i.options.ns.push(t)})),this.loadResources((function(t){n.resolve(),e&&e(t)})),n):(e&&e(),Promise.resolve())}},{key:"loadLanguages",value:function(t,e){var i=cl();"string"==typeof t&&(t=[t]);var n=this.options.preload||[],r=t.filter((function(t){return n.indexOf(t)<0}));return r.length?(this.options.preload=n.concat(r),this.loadResources((function(t){i.resolve(),e&&e(t)})),i):(e&&e(),Promise.resolve())}},{key:"dir",value:function(t){if(t||(t=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!t)return"rtl";var e=this.services&&this.services.languageUtils||new Rl(ql());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(e.getLanguagePartFromCode(t))>-1||t.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}},{key:"cloneInstance",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ec,r=Ql(Ql(Ql({},this.options),e),{isClone:!0}),o=new i(r);void 0===e.debug&&void 0===e.prefix||(o.logger=o.logger.clone(e));return["store","services","language"].forEach((function(e){o[e]=t[e]})),o.services=Ql({},this.services),o.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o.translator=new El(o.services,o.options),o.translator.on("*",(function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];o.emit.apply(o,[t].concat(i))})),o.init(r,n),o.translator.options=o.options,o.translator.backendConnector.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),i}(ll);el(ic,"createInstance",(function(){return new ic(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}));var nc=ic.createInstance();nc.createInstance=ic.createInstance;nc.createInstance,nc.dir,nc.init,nc.loadResources,nc.reloadResources,nc.use,nc.changeLanguage,nc.getFixedT,nc.t,nc.exists,nc.setDefaultNamespace,nc.hasLoadedNamespace,nc.loadNamespaces,nc.loadLanguages;function rc(t){return rc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},rc(t)}function oc(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(r=n.key,o=void 0,o=function(t,e){if("object"!==rc(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==rc(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(r,"string"),"symbol"===rc(o)?o:String(o)),n)}var r,o}var sc=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._data=e,this._options=i,this._canvas=t.createCanvas()}var e,i,n;return e=t,i=[{key:"addImageOverlay",value:function(t){var e=document.createElement("a");e.href="https://vindecoder.eu/";var i=document.createElement("img"),n=new Blob(['<svg height="396" viewBox="0 0 383 396" width="383" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" x1="50%" x2="50%" y1="-14.583939%" y2="24.327613%"><stop offset="0" stop-color="#008684" stop-opacity="0"/><stop offset="1" stop-color="#008684"/></linearGradient><g fill="none" fill-rule="evenodd"><g transform="translate(41)"><path d="m0 104.017895 26.3157895 13.09421v90.434737l122.8757895 61.141053 122.876316-61.141053v-90.434737l26.315789-13.09421v119.71421l-149.191579 74.235263s-99.4615787-49.49-149.192105-74.235263z" fill="url(#a)"/><path d="m149.192105 149.192105-149.192105-74.5963155v-74.5957895l149.192105 74.5957895 149.191579-74.5957895v74.5957895z" fill="#00c474"/></g><g fill="#008684" transform="translate(-1 337)"><path d="m31.5877895 57.1184842h-2.7109895l-27.82964211-55.72193683h13.30635791c5.2928842 10.56151583 10.586021 21.12328423 15.8789053 31.68480003l15.8789052-31.68480003h13.3280842z"/><path d="m63.6328421 57.9562105h11.9009684v-56.55966313h-11.9009684z"/><path d="m96.1932632 57.8791579h-11.9014737v-55.04412632l2.5288421-1.12623158 33.1048424 29.8085053v-30.19781056h11.979789v55.12117896c-.843789.3759158-1.687579.7515789-2.528842 1.1274947l-33.1831578-29.814821z"/><path d="m168.473684 1.39705263c7.318737.06366316 14.465684 3.08336842 19.664842 8.18905263l1.093895 1.20126314-8.367158 8.4578527c-5.153684-5.1334737-12.962526-7.5049264-19.65221-4.269979-7.664842 3.7066105-11.754948 13.7974737-7.520842 22.0400842 4.256842 8.2878316 16.395789 12.3837474 25.015578 5.2140632.351158-.2930527.692211-.5997474 1.023158-.9160421l1.144421-1.106779 8.33179 8.3108211-.949895 1.1305263c-11.115789 11.0571789-31.674947 11.4722526-42.641684-3.0538105-7.533474-9.9797053-7.381895-25.1184 1.053474-35.0928 5.262315-6.22231583 13.184842-10.03048425 21.440842-10.10425267.121263-.00025263.242526-.00025263.363789 0z"/><path d="m220.140632 58.1219368h-2.71099l-27.829642-55.7219368h13.306358c5.292884 10.5615158 10.586021 21.1232842 15.878905 31.6848l15.878905-31.6848h13.328085z" transform="matrix(-1 0 0 -1 437.592252 60.521936)"/><path d="m262.096421 57.9562105h-11.901474v-56.55966313c9.468632 0 18.934737-.024 28.403369.00025263 7.801263.06593684 15.344842 5.2224 18.078316 12.6990316 3.150315 8.6220631-.760421 19.389221-9.266527 23.8221473 0 0 11.552842 20.0382316 11.552842 20.0382316h-13.801263l-10.335158-17.8170947h-12.730105zm0-44.5813894v14.7155368c5.492211.0234947 10.984421.1025684 16.474105.0699789 4.693895-.0803368 8.574316-5.4666947 6.785685-10.0595368-1.061053-2.7271579-3.784422-4.6741895-6.785685-4.7254737-5.489684-.0305684-10.981894-.0005052-16.474105-.0005052z"/><path d="m306.567158 57.9562105h11.900968v-56.55966313h-11.900968z"/><path d="m355.686316 1.39705263c16.138105.13288421 30.841263 15.55578947 27.746526 33.42770527-2.526316 14.5877053-17.868631 25.6145684-33.559579 22.6128-18.386526-3.5178947-31.831579-28.6489263-15.337263-46.6853053 5.206737-5.69178944 12.530526-9.19856839 20.422737-9.35115786.242526-.00353685.485052-.0048.727579-.00404211zm-.288 11.97802107c-10.01179.0808421-19.374316 10.6115368-15.226105 22.0115368 2.963368 8.1362527 13.202526 13.1075369 21.918315 9.261979 9.999158-4.4112 14.101895-20.4803369 2.463158-28.5309474-2.657684-1.8381474-5.893895-2.7521684-9.155368-2.7425684z"/></g></g></svg>'],{type:"image/svg+xml"});i.src=URL.createObjectURL(n),i.style.position="absolute",i.style.right="40px",i.style.opacity="0.7",i.style.maxWidth="100%",i.style.top="130px",i.style.width="7%",i.style.height="auto",i.style.maxHeight="70px",i.style.zIndex="99",e.appendChild(i),t?t.appendChild(e):(console.warn("Container element not found."),document.body.appendChild(e))}},{key:"createTextElement",value:function(t){var e=document.createElement("p");return e.textContent=t,e}},{key:"createExplanatoryBox",value:function(t,e){var i=document.createElement("div");i.classList.add("chart-explanatory-box-container");var n=document.createElement("div");n.classList.add("chart-explanatory-box"),n.classList.add(e);var r=this.createTextElement(t);return i.appendChild(n),i.appendChild(r),i}},{key:"createTrendlineSign",value:function(){var t=document.createElement("div");t.classList.add("trend-line-sign-container");var e=document.createElement("div");e.classList.add("trend-line-sign");var i=this.createTextElement(nc.t("TRENDLINE"));return t.appendChild(e),t.appendChild(i),t}},{key:"wrapAndAddOverlay",value:function(t,e,i){t.style.position="relative",this.addImageOverlay(t),t.appendChild(e),i?i.appendChild(t):document.body.appendChild(t)}}],n=[{key:"createCanvas",value:function(){return document.createElement("canvas")}}],i&&oc(e.prototype,i),n&&oc(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function ac(t){return ac="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ac(t)}function lc(t){return function(t){if(Array.isArray(t))return cc(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return cc(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return cc(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cc(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function hc(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,gc(n.key),n)}}function uc(t,e){return uc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},uc(t,e)}function dc(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=pc(t);if(e){var r=pc(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return function(t,e){if(e&&("object"===ac(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return fc(t)}(this,i)}}function fc(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function pc(t){return pc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},pc(t)}function gc(t){var e=function(t,e){if("object"!==ac(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==ac(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ac(e)?e:String(e)}var mc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&uc(t,e)}(o,t);var e,i,n,r=dc(o);function o(){var t,e,i,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);for(var s=arguments.length,a=new Array(s),l=0;l<s;l++)a[l]=arguments[l];return t=r.call.apply(r,[this].concat(a)),e=fc(t),n=5,(i=gc(i="_minPriceVsOdoChartsResults"))in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,t}return e=o,i=[{key:"getTrendLineY",value:function(t,e){return e.m*t+e.b}},{key:"getPointColors",value:function(t,e,i){var n=this;return t.map((function(t,r){return e[r]>n.getTrendLineY(t,i)?"rgba(165,42,42,.5)":"rgba(61,133,106,.5)"}))}},{key:"prepareConfig",value:function(t){var e=this;return{type:"line",data:{labels:t.processedPriceValues,datasets:[{backgroundColor:"rgba(0, 0, 0, 0)",borderColor:"rgba(0, 0, 0, 0.5)",data:t.trendLineData,fill:!1,yAxisID:"left-y-axis",pointRadius:0,pointBackgroundColor:"#fff",borderWidth:3,hoverBackgroundColor:"rgba(0, 0, 0, 0.5)",hoverBorderColor:"rgba(0, 0, 0, 0.7)",hoverBorderWidth:5},{backgroundColor:"rgb(75, 192, 192)",data:t.processedOdometerValues.map((function(e,i){return{x:e,y:t.processedPriceValues[i]}})),fill:!1,yAxisID:"right-y-axis",pointRadius:3,pointHoverRadius:5,showLine:!1,pointBackgroundColor:t.pointColors}]},options:{aspectRatio:2,plugins:{legend:{display:!1},tooltip:{callbacks:{title:function(){return null},label:function(t){var i=t.dataIndex,n=t.dataset,r=n.data[i].y,o=n.data[i].x;return(0===t.datasetIndex?nc.t("TRENDLINE"):"")+" ".concat(Math.round(r).toLocaleString()," ").concat(e._options.currency," / ").concat(o.toLocaleString()," ").concat(e._options.lengthUnit)}}},backgroundImage:{image:"src/assets/logo.svg",x:0,y:0,width:"100%",height:"100%"}},interaction:{intersect:!1,mode:"nearest"},scales:{"left-y-axis":{type:"linear",position:"left",min:0,max:1e3*Math.ceil(1.1*Math.max.apply(Math,lc(t.processedPriceValues))/1e3),ticks:{stepSize:100*Math.ceil(1.1*Math.max.apply(Math,lc(t.processedPriceValues))/1e3)},title:{display:!0,text:nc.t("PRICE")+" ("+this._options.currency+")",padding:{top:0,left:0,right:0,bottom:10}}},"right-y-axis":{type:"linear",position:"right",display:!1,min:0,max:1e3*Math.ceil(1.1*Math.max.apply(Math,lc(t.processedPriceValues))/1e3),ticks:{stepSize:100*Math.ceil(1.1*Math.max.apply(Math,lc(t.processedPriceValues))/1e3),autoSkip:!1}},x:{ticks:{autoSkip:!0,maxTicksLimit:10},type:"linear",display:!0,max:t.maxOdoValue+.1*(t.maxOdoValue-t.minOdoValue),title:{display:!0,text:nc.t("ODOMETER")+" ("+this._options.lengthUnit+")",padding:{top:20,left:0,right:0,bottom:0}}}}}}}},{key:"prepareChartData",value:function(){var t=this,e=[],i=[];this._data.records.forEach((function(t){var n=new Date;n.setFullYear(n.getFullYear()-1),e.push(1e3*Math.floor(t.odometer/1e3)),i.push(Math.floor(t.price))}));for(var n=Math.min.apply(Math,e),r=Math.max.apply(Math,e),o=(new Set,[]),s=0;s<e.length;s++){var a=e[s],l=i[s];o.push({x:a,y:l})}var c=function(t){var e,i,n=t.length;if(1===n)e=0,i=t[0][1];else{for(var r,o,s,a=0,l=0,c=0,h=0,u=0;u<n;u++)a+=o=(r=t[u])[0],l+=s=r[1],c+=o*o,h+=o*s;i=l/n-(e=(n*h-a*l)/(n*c-a*a))*a/n}return{m:e,b:i}}(o.map((function(t){return[t.x,t.y]}))),h=o.map((function(e){return{x:e.x,y:t.getTrendLineY(e.x,c)}})),u=this.getPointColors(e,i,c);if(e.length<this._minPriceVsOdoChartsResults||i.length<this._minPriceVsOdoChartsResults)throw new Error("Not enough data to create chart.");return{pointColors:u,processedOdometerValues:e,processedPriceValues:i,minOdoValue:n,maxOdoValue:r,trendLineData:h}}},{key:"createCartHeader",value:function(t){var e=document.createElement("p");e.textContent="".concat(nc.t("VEHICLE_PRICE_MAP"),": ").concat(this._data.vehicle.make," ").concat(this._data.vehicle.model," ").concat(this._data.vehicle.model_year),e.classList.add("chartHeader");var i=document.createElement("div");i.classList.add("chart-explanatory"),i.appendChild(this.createTrendlineSign()),i.appendChild(this.createExplanatoryBox(nc.t("BELLOW_AVERAGE"),"chart-explanatory-box-green")),i.appendChild(this.createExplanatoryBox(nc.t("ABOVE_AVERAGE"),"chart-explanatory-box-red")),t.prepend(i),t.prepend(e)}},{key:"draw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;try{var e=this.prepareChartData(),i=document.createElement("div"),n=this._canvas.getContext("2d"),r=this.prepareConfig(e),o=new Ua(n,r);this.wrapAndAddOverlay(i,o.canvas,t),this.createCartHeader(i)}catch(t){console.error("Error creating chart: ".concat(t.message))}}}],i&&hc(e.prototype,i),n&&hc(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(sc);function yc(t){return yc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yc(t)}function bc(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(r=n.key,o=void 0,o=function(t,e){if("object"!==yc(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==yc(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(r,"string"),"symbol"===yc(o)?o:String(o)),n)}var r,o}function vc(t,e){return vc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},vc(t,e)}function xc(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=wc(t);if(e){var r=wc(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return function(t,e){if(e&&("object"===yc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function wc(t){return wc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},wc(t)}var _c=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&vc(t,e)}(o,t);var e,i,n,r=xc(o);function o(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),r.apply(this,arguments)}return e=o,i=[{key:"histogram",value:function(t,e){(e=e||{}).copy=void 0===e.copy||e.copy,e.pretty=void 0===e.pretty||e.pretty;var i=t;function n(t){var e=1+(i.length-1)*t,n=Math.floor(e),r=Math.ceil(e),o=e-n;return(1-o)*i[n]+o*i[r]}e.copy&&(i=i.slice()),i.sort((function(t,e){return t-e}));var r=2*(n(.75)-n(.25))*Math.pow(i.length,-1/3);function o(t){return r*Math.floor(t/r)}return e.pretty&&(r=function(t){var e=Math.pow(10,Math.floor(Math.log(t/10)/Math.LN10)),i=10/t*e;return i<=.15?e*=10:i<=.35?e*=5:i<=.75&&(e*=2),10*e}(r)),{size:r,fun:o,tickRange:function(t){var e=[o(i[0]),r+o(i[i.length-1])],n=Math.round((e[1]-e[0])/r),s=n>t?Math.round(n/t):1,a=n%s;return[e[0]+r*Math.floor(a/2),e[1]-r*Math.ceil(a/2)+.5*r,r*s]}}}},{key:"range",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,n=Math.floor((e-t)/i)+1;return Array(n).fill(void 0).map((function(e,n){return t+n*i}))}},{key:"calculatePercentile",value:function(t,e){return e.sort((function(t,e){return t-e})),e[Math.ceil(t*e.length)-1]}},{key:"getSegmentColor",value:function(t,e){var i=t.p0.parsed.x;return i<e.percentile15?"rgb(39, 255, 166,0.5)":i>e.percentile75?"rgb(165, 42, 42,0.5)":"rgb(243, 137, 1,0.5)"}},{key:"prepareConfig",value:function(t){var e=this;return{type:"line",data:{labels:t.binLabels,datasets:[{fill:!0,borderWidth:3,pointRadius:4,borderRadius:10,data:t.binCounts,tension:.4,pointBackgroundColor:"#fff",pointBorderColor:"#333",segment:{backgroundColor:function(i){return e.getSegmentColor(i,t)},borderColor:"#57B1CD"}}]},options:{aspectRatio:2,interaction:{intersect:!1,mode:"index"},scales:{y:{display:!0,title:{display:!0,text:nc.t("COUNT_OF_VEHICLES"),padding:10}},x:{type:"linear",ticks:{stepSize:t.binRange[2]},title:{display:!0,text:nc.t("PRICE")+" ("+this._options.currency+")",padding:10},max:Math.round(t.binRange[1])+t.binRange[2]}},plugins:{legend:{display:!1},tooltip:{callbacks:{title:function(t){return nc.t("NUMBERS_OF_VEHICLE_LISTING")}}}}}}}},{key:"prepareChartData",value:function(){for(var t=this._data.records.map((function(t){return Math.floor(t.price)})),e=this.histogram(t,{}),i=e.tickRange(5),n=this.range(i[0],Math.round(i[1]),i[2]),r=Array(n.length).fill(0),o=0;o<t.length;o++){var s=t[o];r[n.indexOf(e.fun(s))]++}return{prices:t,binLabels:n,binCounts:r,percentile15:this.calculatePercentile(.15,t),percentile75:this.calculatePercentile(.75,t),binRange:i}}},{key:"createCartHeader",value:function(t){var e=document.createElement("p");e.textContent="".concat(nc.t("VEHICLE_PRICE_DISTRIBUTION"),": ").concat(this._data.vehicle.make," ").concat(this._data.vehicle.model," ").concat(this._data.vehicle.model_year),e.classList.add("chartHeader");var i=document.createElement("div");i.classList.add("chart-explanatory"),i.appendChild(this.createExplanatoryBox(nc.t("BELLOW_AVERAGE"),"chart-explanatory-box-green")),i.appendChild(this.createExplanatoryBox(nc.t("AVERAGE"),"chart-explanatory-box-orange")),i.appendChild(this.createExplanatoryBox(nc.t("ABOVE_AVERAGE"),"chart-explanatory-box-red")),t.prepend(i),t.prepend(e)}},{key:"draw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;try{var e=this.prepareChartData();if(0===e.prices.length)throw new Error("No data to display");Ua.registry.getScale("linear")||Ua.register(ya);var i=document.createElement("div"),n=this._canvas.getContext("2d"),r=this.prepareConfig(e),o=new Ua(n,r);this.wrapAndAddOverlay(i,o.canvas,t),this.createCartHeader(i)}catch(t){console.error(t)}}}],i&&bc(e.prototype,i),n&&bc(e,n),Object.defineProperty(e,"prototype",{writable:!1}),o}(sc);const kc={VEHICLE_PRICE_DISTRIBUTION:"Vehicle Price Distribution",VEHICLE_PRICE_MAP:"Vehicle Price Map",PRICE:"Price",ODOMETER:"Odometer",TRENDLINE:"Trendline",BELLOW_AVERAGE:"Bellow average",AVERAGE:"Market average",ABOVE_AVERAGE:"Above average",COUNT_OF_VEHICLES:"Count of vehicles",NUMBERS_OF_VEHICLE_LISTING:"Number of vehicle listings in the price range"},Sc={VEHICLE_PRICE_DISTRIBUTION:"ROZDĚLENÍ CENY VOZIDLA",VEHICLE_PRICE_MAP:"Ceník vozidel",PRICE:"Cena",ODOMETER:"Nájezd",TRENDLINE:"Trendová čára",BELLOW_AVERAGE:"Podprúměrná",AVERAGE:"Průměrná",ABOVE_AVERAGE:"Nadprúměrná",COUNT_OF_VEHICLES:"Počet vozidel",NUMBERS_OF_VEHICLE_LISTING:"Počet nabídek vozidel v daném cenovém rozpětí"};function Oc(t){return Oc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oc(t)}function Mc(t,e){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function(t,e){if(!t)return;if("string"==typeof t)return Ac(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Ac(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var n=0,r=function(){};return{s:r,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,o=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw o}}}}function Ac(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function Pc(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */Pc=function(){return t};var t={},e=Object.prototype,i=e.hasOwnProperty,n=Object.defineProperty||function(t,e,i){t[e]=i.value},r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",s=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function l(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,i){return t[e]=i}}function c(t,e,i,r){var o=e&&e.prototype instanceof d?e:d,s=Object.create(o.prototype),a=new O(r||[]);return n(s,"_invoke",{value:w(t,i,a)}),s}function h(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var u={};function d(){}function f(){}function p(){}var g={};l(g,o,(function(){return this}));var m=Object.getPrototypeOf,y=m&&m(m(M([])));y&&y!==e&&i.call(y,o)&&(g=y);var b=p.prototype=d.prototype=Object.create(g);function v(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function r(n,o,s,a){var l=h(t[n],t,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Oc(u)&&i.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,s,a)}),(function(t){r("throw",t,s,a)})):e.resolve(u).then((function(t){c.value=t,s(c)}),(function(t){return r("throw",t,s,a)}))}a(l.arg)}var o;n(this,"_invoke",{value:function(t,i){function n(){return new e((function(e,n){r(t,i,e,n)}))}return o=o?o.then(n,n):n()}})}function w(t,e,i){var n="suspendedStart";return function(r,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===r)throw o;return A()}for(i.method=r,i.arg=o;;){var s=i.delegate;if(s){var a=_(s,i);if(a){if(a===u)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if("suspendedStart"===n)throw n="completed",i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n="executing";var l=h(t,e,i);if("normal"===l.type){if(n=i.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(n="completed",i.method="throw",i.arg=l.arg)}}}function _(t,e){var i=e.method,n=t.iterator[i];if(void 0===n)return e.delegate=null,"throw"===i&&t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method)||"return"!==i&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+i+"' method")),u;var r=h(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function M(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:A}}function A(){return{value:void 0,done:!0}}return f.prototype=p,n(b,"constructor",{value:p,configurable:!0}),n(p,"constructor",{value:f,configurable:!0}),f.displayName=l(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,l(t,a,"GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},v(x.prototype),l(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,i,n,r,o){void 0===o&&(o=Promise);var s=new x(c(e,i,n,r),o);return t.isGeneratorFunction(i)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},v(b),l(b,a,"Generator"),l(b,o,(function(){return this})),l(b,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),i=[];for(var n in e)i.push(n);return i.reverse(),function t(){for(;i.length;){var n=i.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=M,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(i,n){return s.type="throw",s.arg=t,e.next=i,n&&(e.method="next",e.arg=void 0),!!n}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=i.call(o,"catchLoc"),l=i.call(o,"finallyLoc");if(a&&l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,u):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),u},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),S(i),u}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;S(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,i){return this.delegate={iterator:M(t),resultName:e,nextLoc:i},"next"===this.method&&(this.arg=void 0),u}},t}function Cc(t,e,i,n,r,o,s){try{var a=t[o](s),l=a.value}catch(t){return void i(t)}a.done?e(l):Promise.resolve(l).then(n,r)}function Ec(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Lc(t,e,i){return(e=Dc(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function Rc(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Dc(n.key),n)}}function Dc(t){var e=function(t,e){if("object"!==Oc(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==Oc(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Oc(e)?e:String(e)}var Ic=function(){function t(e,n){var r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.vincode=e,this.options=n,Promise.resolve().then(i.bind(i,873)),r=n.language||"en",o={lng:r,debug:!1,resources:{en:{translation:kc},cs:{translation:Sc}}},nc.init(o),this.options=function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Ec(Object(i),!0).forEach((function(e){Lc(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Ec(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({currency:"EUR",lengthUnit:"km",language:"en"},this.options)}var e,n,r,o,s;return e=t,n=[{key:"init",value:(o=Pc().mark((function t(){var e,i,n,r;return Pc().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,void 0!==this.options.apiKey){t.next=3;break}throw new Error("API key is required.");case 3:return e=new ft(this.options.apiKey,this.options.apiSecret,this.vincode),t.next=6,e.fetchData();case 6:if(!(i=t.sent).records||!i.records[0]){t.next=11;break}this.options.currency=null!==(n=i.records[0].price_currency)&&void 0!==n?n:this.options.currency,t.next=12;break;case 11:throw new Error("No records received from Vindecoder API.");case 12:if(!i.market_odometer){t.next=16;break}this.options.lengthUnit=null!==(r=i.market_odometer.odometer_unit)&&void 0!==r?r:this.options.lengthUnit,t.next=17;break;case 16:throw new Error("No market odometer data received from Vindecoder API.");case 17:this.draw(i),t.next=23;break;case 20:t.prev=20,t.t0=t.catch(0),console.error("An error occurred while initializing Vincario:",t.t0);case 23:case"end":return t.stop()}}),t,this,[[0,20]])})),s=function(){var t=this,e=arguments;return new Promise((function(i,n){var r=o.apply(t,e);function s(t){Cc(r,i,n,s,a,"next",t)}function a(t){Cc(r,i,n,s,a,"throw",t)}s(void 0)}))},function(){return s.apply(this,arguments)})},{key:"initWithData",value:function(t){var e,i;this.options.currency=null!==(e=t.records[0].price_currency)&&void 0!==e?e:this.options.currency,this.options.lengthUnit=null!==(i=t.market_odometer.odometer_unit)&&void 0!==i?i:this.options.lengthUnit,this.draw(t)}},{key:"draw",value:function(t){var e=this.options,i=e.graphs,n=e.containerElement;if(n){var r,o={PriceHistogramChart:_c,PriceOdoChart:mc},s=Mc(null!=i?i:Object.keys(o));try{for(s.s();!(r=s.n()).done;)new(0,o[r.value])(t,this.options).draw(n)}catch(t){s.e(t)}finally{s.f()}}else console.error("Container element not found.")}}],r=[{key:"createWithData",value:function(e,i){var n=new t("",i);return n.initWithData(e),n}}],n&&Rc(e.prototype,n),r&&Rc(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Tc(t){return Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Tc(t)}function Nc(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */Nc=function(){return t};var t={},e=Object.prototype,i=e.hasOwnProperty,n=Object.defineProperty||function(t,e,i){t[e]=i.value},r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",s=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function l(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,i){return t[e]=i}}function c(t,e,i,r){var o=e&&e.prototype instanceof d?e:d,s=Object.create(o.prototype),a=new O(r||[]);return n(s,"_invoke",{value:w(t,i,a)}),s}function h(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var u={};function d(){}function f(){}function p(){}var g={};l(g,o,(function(){return this}));var m=Object.getPrototypeOf,y=m&&m(m(M([])));y&&y!==e&&i.call(y,o)&&(g=y);var b=p.prototype=d.prototype=Object.create(g);function v(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function r(n,o,s,a){var l=h(t[n],t,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Tc(u)&&i.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,s,a)}),(function(t){r("throw",t,s,a)})):e.resolve(u).then((function(t){c.value=t,s(c)}),(function(t){return r("throw",t,s,a)}))}a(l.arg)}var o;n(this,"_invoke",{value:function(t,i){function n(){return new e((function(e,n){r(t,i,e,n)}))}return o=o?o.then(n,n):n()}})}function w(t,e,i){var n="suspendedStart";return function(r,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===r)throw o;return A()}for(i.method=r,i.arg=o;;){var s=i.delegate;if(s){var a=_(s,i);if(a){if(a===u)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if("suspendedStart"===n)throw n="completed",i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n="executing";var l=h(t,e,i);if("normal"===l.type){if(n=i.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(n="completed",i.method="throw",i.arg=l.arg)}}}function _(t,e){var i=e.method,n=t.iterator[i];if(void 0===n)return e.delegate=null,"throw"===i&&t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method)||"return"!==i&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+i+"' method")),u;var r=h(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function M(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:A}}function A(){return{value:void 0,done:!0}}return f.prototype=p,n(b,"constructor",{value:p,configurable:!0}),n(p,"constructor",{value:f,configurable:!0}),f.displayName=l(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,l(t,a,"GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},v(x.prototype),l(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,i,n,r,o){void 0===o&&(o=Promise);var s=new x(c(e,i,n,r),o);return t.isGeneratorFunction(i)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},v(b),l(b,a,"Generator"),l(b,o,(function(){return this})),l(b,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),i=[];for(var n in e)i.push(n);return i.reverse(),function t(){for(;i.length;){var n=i.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=M,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(i,n){return s.type="throw",s.arg=t,e.next=i,n&&(e.method="next",e.arg=void 0),!!n}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=i.call(o,"catchLoc"),l=i.call(o,"finallyLoc");if(a&&l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,u):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),u},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),S(i),u}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var r=n.arg;S(i)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,i){return this.delegate={iterator:M(t),resultName:e,nextLoc:i},"next"===this.method&&(this.arg=void 0),u}},t}function jc(t,e,i,n,r,o,s){try{var a=t[o](s),l=a.value}catch(t){return void i(t)}a.done?e(l):Promise.resolve(l).then(n,r)}function Fc(t){return function(){var e=this,i=arguments;return new Promise((function(n,r){var o=t.apply(e,i);function s(t){jc(o,n,r,s,a,"next",t)}function a(t){jc(o,n,r,s,a,"throw",t)}s(void 0)}))}}window.onload=Fc(Nc().mark((function t(){var e,i,n,r,o,s,a,l,c,h,u;return Nc().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("Vincario-charts-plugin initialized... "),e=document.getElementsByClassName("vincario-vehicle-market-value-charts"),i=0;case 3:if(!(i<e.length)){t.next=29;break}if(n=e[i],r=n.childNodes,o=void 0,t.prev=7,s=n.getAttribute("data-records")){t.next=12;break}return console.error("Missing data-records attribute or it is empty."),t.abrupt("continue",26);case 12:o=JSON.parse(s),t.next=19;break;case 15:return t.prev=15,t.t0=t.catch(7),console.error("Error parsing data-records:",t.t0),t.abrupt("continue",26);case 19:for(a=!1,l=!1,c=0;c<r.length;c++)(h=r[c]).classList&&(h.classList.contains("vehicle-price-distribution")&&(a=!0),h.classList.contains("vehicle-price-map")&&(l=!0));u=[],a&&u.push("PriceHistogramChart"),l&&u.push("PriceOdoChart"),u.length>0&&new Ic.createWithData(o,{containerElement:n,language:"en",graphs:u});case 26:i++,t.next=3;break;case 29:case"end":return t.stop()}}),t,null,[[7,15]])})))},315:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,".vincario-vehicle-market-value-charts{margin:0 auto;background-color:#fff;position:relative;width:100%;height:100%;max-width:600px;display:flex;flex-direction:column}.vincario-vehicle-market-value-charts .chartHeader{text-align:center;margin:0;font-size:1.5em;font-weight:600;height:54px;display:flex;align-items:flex-end;justify-content:center}.vincario-vehicle-market-value-charts .chart-explanatory{display:flex;align-items:center;justify-content:center;height:50px;flex-wrap:wrap}.vincario-vehicle-market-value-charts .chart-explanatory .trend-line-sign-container{display:flex;align-items:center}.vincario-vehicle-market-value-charts .chart-explanatory .trend-line-sign-container .trend-line-sign{width:20px;height:2px;margin:0 5px;background-color:#000}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container{display:flex;align-items:center}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box{width:30px;height:15px;margin:0 5px 0 10px}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box-red{background-color:rgba(165,42,42,.5)}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box-orange{background-color:rgba(243,137,1,.5)}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box-green{background-color:rgba(61,133,106,.5)}@media(max-width: 568px){.vincario-vehicle-market-value-charts .chart-explanatory{flex-wrap:nowrap}}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAIA,sCACE,aAAA,CACA,qBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CAEA,mDACE,iBAAA,CACA,QAAA,CACA,eAAA,CACA,eAAA,CACA,WAAA,CACA,YAAA,CACA,oBAAA,CACA,sBAAA,CAGF,yDACE,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,cAAA,CAEA,oFACE,YAAA,CACA,kBAAA,CAEA,qGACE,UAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CAIJ,0FACE,YAAA,CACA,kBAAA,CAEA,iHACE,UAAA,CACA,WAAA,CACA,mBAAA,CAGF,qHACE,mCAvDQ,CA0DV,wHACE,mCA1DU,CA6DZ,uHACE,oCA7DS,CAoEjB,yBAEI,yDACE,gBAAA,CAAA",sourcesContent:["$primary-color: rgba(165, 42, 42, .5);\r\n$secondary-color: rgba(243, 137, 1, .5);\r\n$tertiary-color: rgba(61, 133, 106, .5);\r\n\r\n.vincario-vehicle-market-value-charts {\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .chartHeader {\r\n    text-align: center;\r\n    margin: 0;\r\n    font-size: 1.5em;\r\n    font-weight: 600;\r\n    height:54px;\r\n    display: flex;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n  }\r\n\r\n  .chart-explanatory {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 50px;\r\n    flex-wrap: wrap;\r\n\r\n    .trend-line-sign-container {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      .trend-line-sign {\r\n        width: 20px;\r\n        height: 2px;\r\n        margin: 0 5px;\r\n        background-color: black;\r\n      }\r\n    }\r\n\r\n    .chart-explanatory-box-container {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      .chart-explanatory-box {\r\n        width: 30px;\r\n        height: 15px;\r\n        margin: 0 5px 0 10px;\r\n      }\r\n\r\n      .chart-explanatory-box-red {\r\n        background-color: $primary-color;\r\n      }\r\n\r\n      .chart-explanatory-box-orange {\r\n        background-color: $secondary-color;\r\n      }\r\n\r\n      .chart-explanatory-box-green {\r\n        background-color: $tertiary-color;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@media (max-width: 568px) {\r\n  .vincario-vehicle-market-value-charts {\r\n    .chart-explanatory {\r\n      flex-wrap: nowrap;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);n&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},873:(t,e,i)=>{i.r(e),i.d(e,{default:()=>y});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),l=i.n(a),c=i(565),h=i.n(c),u=i(216),d=i.n(u),f=i(589),p=i.n(f),g=i(315),m={};m.styleTagTransform=p(),m.setAttributes=h(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=d();r()(g.Z,m);const y=g.Z&&g.Z.locals?g.Z.locals:void 0},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},s=[],a=0;a<t.length;a++){var l=t[a],c=n.base?l[0]+n.base:l[0],h=o[c]||0,u="".concat(c," ").concat(h);o[c]=h+1;var d=i(u),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=r(f,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:p,references:1})}s.push(u)}return s}function r(t,e){var i=e.domAPI(e);i.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,r){var o=n(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=i(o[s]);e[a].references--}for(var l=n(t,r),c=0;c<o.length;c++){var h=i(o[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,r&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nc=void 0,i(26);i(873)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,