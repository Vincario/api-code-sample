(()=>{"use strict";var t={376:(t,e,i)=>{var n=function(){this.totalCount=0,this.data={}};n.prototype.train=function(t,e){for(var i in this.data[e]||(this.data[e]={}),t){var n=t[i];void 0===this.data[e][i]&&(this.data[e][i]={}),void 0===this.data[e][i][n]&&(this.data[e][i][n]=0),this.data[e][i][n]++}this.totalCount++},n.prototype.score=function(t){var e,i={};for(var n in t){var o=t[n];for(e in this.data)i[e]={},this.data[e][n]?i[e][n+"_"+o]=(this.data[e][n][o]||0)/this.totalCount:i[e][n+"_"+o]=0}var r={};for(e in i)for(var s in r[e]=0,i[e])r[e]+=i[e][s];return r};var o=function(){this.weights=[],this.bias=0};o.prototype.predict=function(t){if(t.length!==this.weights.length)return null;for(var e=0,i=0;i<this.weights.length;i++)e+=this.weights[i]*t[i];return(e+=this.bias)>0?1:0},o.prototype.train=function(t,e){if(0!==e&&1!==e)return null;t.length!==this.weights.length&&(this.weights=t,this.bias=1);var i=this.predict(t);if("number"==typeof i&&i!==e){for(var n=e-i,o=0;o<this.weights.length;o++)this.weights[o]+=n*t[o];this.bias+=n}return this};Math.log(Math.sqrt(2*Math.PI));Math.sqrt(2*Math.PI);var r=Math.sqrt(2*Math.PI);function s(t){for(var e=t,i=t,n=1;n<15;n++)e+=i*=t*t/(2*n+1);return Math.round(1e4*(.5+e/r*Math.exp(-t*t/2)))/1e4}for(var a=[],l=0;l<=3.09;l+=.01)a.push(s(l));
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function c(t){return t+.5|0}const h=(t,e,i)=>Math.max(Math.min(t,i),e);function u(t){return h(c(2.55*t),0,255)}function d(t){return h(c(255*t),0,255)}function f(t){return h(c(t/2.55)/100,0,1)}function p(t){return h(c(100*t),0,100)}const g={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},m=[..."0123456789ABCDEF"],b=t=>m[15&t],y=t=>m[(240&t)>>4]+m[15&t],v=t=>(240&t)>>4==(15&t);function x(t){var e=(t=>v(t.r)&&v(t.g)&&v(t.b)&&v(t.a))(t)?b:y;return t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0}const _=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function w(t,e,i){const n=e*Math.min(i,1-i),o=(e,o=(e+t/30)%12)=>i-n*Math.max(Math.min(o-3,9-o,1),-1);return[o(0),o(8),o(4)]}function k(t,e,i){const n=(n,o=(n+t/60)%6)=>i-i*e*Math.max(Math.min(o,4-o,1),0);return[n(5),n(3),n(1)]}function O(t,e,i){const n=w(t,1,.5);let o;for(e+i>1&&(o=1/(e+i),e*=o,i*=o),o=0;o<3;o++)n[o]*=1-e-i,n[o]+=e;return n}function S(t){const e=t.r/255,i=t.g/255,n=t.b/255,o=Math.max(e,i,n),r=Math.min(e,i,n),s=(o+r)/2;let a,l,c;return o!==r&&(c=o-r,l=s>.5?c/(2-o-r):c/(o+r),a=function(t,e,i,n,o){return t===o?(e-i)/n+(e<i?6:0):e===o?(i-t)/n+2:(t-e)/n+4}(e,i,n,c,o),a=60*a+.5),[0|a,l||0,s]}function M(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(d)}function P(t,e,i){return M(w,t,e,i)}function C(t){return(t%360+360)%360}function A(t){const e=_.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?u(+e[5]):d(+e[5]));const o=C(+e[2]),r=+e[3]/100,s=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return M(O,t,e,i)}(o,r,s):"hsv"===e[1]?function(t,e,i){return M(k,t,e,i)}(o,r,s):P(o,r,s),{r:i[0],g:i[1],b:i[2],a:n}}const L={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},E={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let D;function R(t){D||(D=function(){const t={},e=Object.keys(E),i=Object.keys(L);let n,o,r,s,a;for(n=0;n<e.length;n++){for(s=a=e[n],o=0;o<i.length;o++)r=i[o],a=a.replace(r,L[r]);r=parseInt(E[s],16),t[a]=[r>>16&255,r>>8&255,255&r]}return t}(),D.transparent=[0,0,0,0]);const e=D[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const T=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const j=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,I=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function N(t,e,i){if(t){let n=S(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=P(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function F(t,e){return t?Object.assign(e||{},t):t}function V(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=d(t[3]))):(e=F(t,{r:0,g:0,b:0,a:1})).a=d(e.a),e}function z(t){return"r"===t.charAt(0)?function(t){const e=T.exec(t);let i,n,o,r=255;if(e){if(e[7]!==i){const t=+e[7];r=e[8]?u(t):h(255*t,0,255)}return i=+e[1],n=+e[3],o=+e[5],i=255&(e[2]?u(i):h(i,0,255)),n=255&(e[4]?u(n):h(n,0,255)),o=255&(e[6]?u(o):h(o,0,255)),{r:i,g:n,b:o,a:r}}}(t):A(t)}class B{constructor(t){if(t instanceof B)return t;const e=typeof t;let i;var n,o,r;"object"===e?i=V(t):"string"===e&&(r=(n=t).length,"#"===n[0]&&(4===r||5===r?o={r:255&17*g[n[1]],g:255&17*g[n[2]],b:255&17*g[n[3]],a:5===r?17*g[n[4]]:255}:7!==r&&9!==r||(o={r:g[n[1]]<<4|g[n[2]],g:g[n[3]]<<4|g[n[4]],b:g[n[5]]<<4|g[n[6]],a:9===r?g[n[7]]<<4|g[n[8]]:255})),i=o||R(t)||z(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=F(this._rgb);return t&&(t.a=f(t.a)),t}set rgb(t){this._rgb=V(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${f(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?x(this._rgb):void 0}hslString(){return this._valid?function(t){if(!t)return;const e=S(t),i=e[0],n=p(e[1]),o=p(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${o}%, ${f(t.a)})`:`hsl(${i}, ${n}%, ${o}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let o;const r=e===o?.5:e,s=2*r-1,a=i.a-n.a,l=((s*a==-1?s:(s+a)/(1+s*a))+1)/2;o=1-l,i.r=255&l*i.r+o*n.r+.5,i.g=255&l*i.g+o*n.g+.5,i.b=255&l*i.b+o*n.b+.5,i.a=r*i.a+(1-r)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=I(f(t.r)),o=I(f(t.g)),r=I(f(t.b));return{r:d(j(n+i*(I(f(e.r))-n))),g:d(j(o+i*(I(f(e.g))-o))),b:d(j(r+i*(I(f(e.b))-r))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new B(this.rgb)}alpha(t){return this._rgb.a=d(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=c(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return N(this._rgb,2,t),this}darken(t){return N(this._rgb,2,-t),this}saturate(t){return N(this._rgb,1,t),this}desaturate(t){return N(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=S(t);i[0]=C(i[0]+e),i=P(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
function H(){}const W=(()=>{let t=0;return()=>t++})();function U(t){return null==t}function $(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function Y(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function K(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function q(t,e){return K(t)?t:e}function X(t,e){return void 0===t?e:t}const G=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function J(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function Z(t,e,i,n){let o,r,s;if($(t))if(r=t.length,n)for(o=r-1;o>=0;o--)e.call(i,t[o],o);else for(o=0;o<r;o++)e.call(i,t[o],o);else if(Y(t))for(s=Object.keys(t),r=s.length,o=0;o<r;o++)e.call(i,t[s[o]],s[o])}function Q(t,e){let i,n,o,r;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(o=t[i],r=e[i],o.datasetIndex!==r.datasetIndex||o.index!==r.index)return!1;return!0}function tt(t){if($(t))return t.map(tt);if(Y(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let o=0;for(;o<n;++o)e[i[o]]=tt(t[i[o]]);return e}return t}function et(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function it(t,e,i,n){if(!et(t))return;const o=e[t],r=i[t];Y(o)&&Y(r)?nt(o,r,n):e[t]=tt(r)}function nt(t,e,i){const n=$(e)?e:[e],o=n.length;if(!Y(t))return t;const r=(i=i||{}).merger||it;let s;for(let e=0;e<o;++e){if(s=n[e],!Y(s))continue;const o=Object.keys(s);for(let e=0,n=o.length;e<n;++e)r(o[e],t,s,i)}return t}function ot(t,e){return nt(t,e,{merger:rt})}function rt(t,e,i){if(!et(t))return;const n=e[t],o=i[t];Y(n)&&Y(o)?ot(n,o):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=tt(o))}const st={"":t=>t,x:t=>t.x,y:t=>t.y};function at(t,e){const i=st[e]||(st[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function lt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const ct=t=>void 0!==t,ht=t=>"function"==typeof t,ut=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};const dt=Math.PI,ft=2*dt,pt=ft+dt,gt=Number.POSITIVE_INFINITY,mt=dt/180,bt=dt/2,yt=dt/4,vt=2*dt/3,xt=Math.log10,_t=Math.sign;function wt(t,e,i){return Math.abs(t-e)<i}function kt(t){const e=Math.round(t);t=wt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(xt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Ot(t){return!isNaN(parseFloat(t))&&isFinite(t)}function St(t,e,i){let n,o,r;for(n=0,o=t.length;n<o;n++)r=t[n][i],isNaN(r)||(e.min=Math.min(e.min,r),e.max=Math.max(e.max,r))}function Mt(t){return t*(dt/180)}function Pt(t){return t*(180/dt)}function Ct(t){if(!K(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function At(t,e){const i=e.x-t.x,n=e.y-t.y,o=Math.sqrt(i*i+n*n);let r=Math.atan2(n,i);return r<-.5*dt&&(r+=ft),{angle:r,distance:o}}function Lt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Et(t,e){return(t-e+pt)%ft-dt}function Dt(t){return(t%ft+ft)%ft}function Rt(t,e,i,n){const o=Dt(t),r=Dt(e),s=Dt(i),a=Dt(r-o),l=Dt(s-o),c=Dt(o-r),h=Dt(o-s);return o===r||o===s||n&&r===s||a>l&&c<h}function Tt(t,e,i){return Math.max(e,Math.min(i,t))}function jt(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function It(t,e,i){i=i||(i=>t[i]<e);let n,o=t.length-1,r=0;for(;o-r>1;)n=r+o>>1,i(n)?r=n:o=n;return{lo:r,hi:o}}const Nt=(t,e,i,n)=>It(t,i,n?n=>{const o=t[n][e];return o<i||o===i&&t[n+1][e]===i}:n=>t[n][e]<i),Ft=(t,e,i)=>It(t,i,(n=>t[n][e]>=i));const Vt=["push","pop","shift","splice","unshift"];function zt(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,o=n.indexOf(e);-1!==o&&n.splice(o,1),n.length>0||(Vt.forEach((e=>{delete t[e]})),delete t._chartjs)}function Bt(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const Ht="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Wt(t,e){let i=[],n=!1;return function(...o){i=o,n||(n=!0,Ht.call(window,(()=>{n=!1,t.apply(e,i)})))}}const Ut=t=>"start"===t?"left":"end"===t?"right":"center",$t=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function Yt(t,e,i){const n=e.length;let o=0,r=n;if(t._sorted){const{iScale:s,_parsed:a}=t,l=s.axis,{min:c,max:h,minDefined:u,maxDefined:d}=s.getUserBounds();u&&(o=Tt(Math.min(Nt(a,s.axis,c).lo,i?n:Nt(e,l,s.getPixelForValue(c)).lo),0,n-1)),r=d?Tt(Math.max(Nt(a,s.axis,h,!0).hi+1,i?0:Nt(e,l,s.getPixelForValue(h),!0).hi+1),o,n)-o:n-o}return{start:o,count:r}}function Kt(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,o={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=o,!0;const r=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,o),r}const qt=t=>0===t||1===t,Xt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*ft/i),Gt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*ft/i)+1,Jt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*bt),easeOutSine:t=>Math.sin(t*bt),easeInOutSine:t=>-.5*(Math.cos(dt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>qt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>qt(t)?t:Xt(t,.075,.3),easeOutElastic:t=>qt(t)?t:Gt(t,.075,.3),easeInOutElastic(t){const e=.1125;return qt(t)?t:t<.5?.5*Xt(2*t,e,.45):.5+.5*Gt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Jt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*Jt.easeInBounce(2*t):.5*Jt.easeOutBounce(2*t-1)+.5};function Zt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Qt(t){return Zt(t)?t:new B(t)}function te(t){return Zt(t)?t:new B(t).saturate(.5).darken(.1).hexString()}const ee=["x","y","borderWidth","radius","tension"],ie=["color","borderColor","backgroundColor"];const ne=new Map;function oe(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=ne.get(i);return n||(n=new Intl.NumberFormat(t,e),ne.set(i,n)),n}(e,i).format(t)}const re={values:t=>$(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let o,r=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(o="scientific"),r=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const s=xt(Math.abs(r)),a=isNaN(s)?1:Math.max(Math.min(-1*Math.floor(s),20),0),l={notation:o,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),oe(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(xt(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?re.numeric.call(this,t,e,i):""}};var se={formatters:re};const ae=Object.create(null),le=Object.create(null);function ce(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function he(t,e,i){return"string"==typeof e?nt(ce(t,e),i):nt(ce(t,""),e)}class ue{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>te(e.backgroundColor),this.hoverBorderColor=(t,e)=>te(e.borderColor),this.hoverColor=(t,e)=>te(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return he(this,t,e)}get(t){return ce(this,t)}describe(t,e){return he(le,t,e)}override(t,e){return he(ae,t,e)}route(t,e,i,n){const o=ce(this,t),r=ce(this,i),s="_"+e;Object.defineProperties(o,{[s]:{value:o[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[s],e=r[n];return Y(t)?Object.assign({},e,t):X(t,e)},set(t){this[s]=t}}})}apply(t){t.forEach((t=>t(this)))}}var de=new ue({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:ie},numbers:{type:"number",properties:ee}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:se.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function fe(t,e,i,n,o){let r=e[o];return r||(r=e[o]=t.measureText(o).width,i.push(o)),r>n&&(n=r),n}function pe(t,e,i,n){let o=(n=n||{}).data=n.data||{},r=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(o=n.data={},r=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let s=0;const a=i.length;let l,c,h,u,d;for(l=0;l<a;l++)if(u=i[l],null==u||$(u)){if($(u))for(c=0,h=u.length;c<h;c++)d=u[c],null==d||$(d)||(s=fe(t,o,r,s,d))}else s=fe(t,o,r,s,u);t.restore();const f=r.length/2;if(f>i.length){for(l=0;l<f;l++)delete o[r[l]];r.splice(0,f)}return s}function ge(t,e,i){const n=t.currentDevicePixelRatio,o=0!==i?Math.max(i/2,.5):0;return Math.round((e-o)*n)/n+o}function me(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function be(t,e,i,n){ye(t,e,i,n,null)}function ye(t,e,i,n,o){let r,s,a,l,c,h,u,d;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*mt;if(f&&"object"==typeof f&&(r=f.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:o?t.ellipse(i,n,o/2,g,0,0,ft):t.arc(i,n,g,0,ft),t.closePath();break;case"triangle":h=o?o/2:g,t.moveTo(i+Math.sin(m)*h,n-Math.cos(m)*g),m+=vt,t.lineTo(i+Math.sin(m)*h,n-Math.cos(m)*g),m+=vt,t.lineTo(i+Math.sin(m)*h,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":c=.516*g,l=g-c,s=Math.cos(m+yt)*l,u=Math.cos(m+yt)*(o?o/2-c:l),a=Math.sin(m+yt)*l,d=Math.sin(m+yt)*(o?o/2-c:l),t.arc(i-u,n-a,c,m-dt,m-bt),t.arc(i+d,n-s,c,m-bt,m),t.arc(i+u,n+a,c,m,m+bt),t.arc(i-d,n+s,c,m+bt,m+dt),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,h=o?o/2:l,t.rect(i-h,n-l,2*h,2*l);break}m+=yt;case"rectRot":u=Math.cos(m)*(o?o/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(i-u,n-a),t.lineTo(i+d,n-s),t.lineTo(i+u,n+a),t.lineTo(i-d,n+s),t.closePath();break;case"crossRot":m+=yt;case"cross":u=Math.cos(m)*(o?o/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+d,n-s),t.lineTo(i-d,n+s);break;case"star":u=Math.cos(m)*(o?o/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+d,n-s),t.lineTo(i-d,n+s),m+=yt,u=Math.cos(m)*(o?o/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+d,n-s),t.lineTo(i-d,n+s);break;case"line":s=o?o/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-s,n-a),t.lineTo(i+s,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(o?o/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function ve(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function xe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function _e(t){t.restore()}function we(t,e,i,n,o){if(!e)return t.lineTo(i.x,i.y);if("middle"===o){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===o!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function ke(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Oe(t,e,i,n,o){if(o.strikethrough||o.underline){const r=t.measureText(n),s=e-r.actualBoundingBoxLeft,a=e+r.actualBoundingBoxRight,l=i-r.actualBoundingBoxAscent,c=i+r.actualBoundingBoxDescent,h=o.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=o.decorationWidth||2,t.moveTo(s,h),t.lineTo(a,h),t.stroke()}}function Se(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Me(t,e,i,n,o,r={}){const s=$(e)?e:[e],a=r.strokeWidth>0&&""!==r.strokeColor;let l,c;for(t.save(),t.font=o.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),U(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,r),l=0;l<s.length;++l)c=s[l],r.backdrop&&Se(t,r.backdrop),a&&(r.strokeColor&&(t.strokeStyle=r.strokeColor),U(r.strokeWidth)||(t.lineWidth=r.strokeWidth),t.strokeText(c,i,n,r.maxWidth)),t.fillText(c,i,n,r.maxWidth),Oe(t,i,n,c,r),n+=Number(o.lineHeight);t.restore()}function Pe(t,e){const{x:i,y:n,w:o,h:r,radius:s}=e;t.arc(i+s.topLeft,n+s.topLeft,s.topLeft,-bt,dt,!0),t.lineTo(i,n+r-s.bottomLeft),t.arc(i+s.bottomLeft,n+r-s.bottomLeft,s.bottomLeft,dt,bt,!0),t.lineTo(i+o-s.bottomRight,n+r),t.arc(i+o-s.bottomRight,n+r-s.bottomRight,s.bottomRight,bt,0,!0),t.lineTo(i+o,n+s.topRight),t.arc(i+o-s.topRight,n+s.topRight,s.topRight,0,-bt,!0),t.lineTo(i+s.topLeft,n)}const Ce=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Ae=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function Le(t,e){const i=(""+t).match(Ce);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Ee=t=>+t||0;function De(t,e){const i={},n=Y(e),o=n?Object.keys(e):e,r=Y(t)?n?i=>X(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of o)i[t]=Ee(r(t));return i}function Re(t){return De(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Te(t){return De(t,["topLeft","topRight","bottomLeft","bottomRight"])}function je(t){const e=Re(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Ie(t,e){t=t||{},e=e||de.font;let i=X(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=X(t.style,e.style);n&&!(""+n).match(Ae)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const o={family:X(t.family,e.family),lineHeight:Le(X(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:X(t.weight,e.weight),string:""};return o.string=function(t){return!t||U(t.size)||U(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(o),o}function Ne(t,e,i,n){let o,r,s,a=!0;for(o=0,r=t.length;o<r;++o)if(s=t[o],void 0!==s&&(void 0!==e&&"function"==typeof s&&(s=s(e),a=!1),void 0!==i&&$(s)&&(s=s[i%s.length],a=!1),void 0!==s))return n&&!a&&(n.cacheable=!1),s}function Fe(t,e){return Object.assign(Object.create(t),e)}function Ve(t,e=[""],i,n,o=(()=>t[0])){const r=i||t;void 0===n&&(n=Ge("_fallback",t));const s={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:r,_fallback:n,_getTarget:o,override:i=>Ve([i,...t],e,r,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>Ue(i,n,(()=>function(t,e,i,n){let o;for(const r of e)if(o=Ge(He(r,t),i),void 0!==o)return We(t,o)?qe(i,n,t,o):o}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Je(t).includes(e),ownKeys:t=>Je(t),set(t,e,i){const n=t._storage||(t._storage=o());return t[e]=n[e]=i,delete t._keys,!0}})}function ze(t,e,i,n){const o={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Be(t,n),setContext:e=>ze(t,e,i,n),override:o=>ze(t.override(o),e,i,n)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Ue(t,e,(()=>function(t,e,i){const{_proxy:n,_context:o,_subProxy:r,_descriptors:s}=t;let a=n[e];ht(a)&&s.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:o,_context:r,_subProxy:s,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(r,s||n);a.delete(t),We(t,l)&&(l=qe(o._scopes,o,t,l));return l}(e,a,t,i));$(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:o,_context:r,_subProxy:s,_descriptors:a}=i;if(void 0!==r.index&&n(t))return e[r.index%e.length];if(Y(e[0])){const i=e,n=o._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=qe(n,o,t,l);e.push(ze(i,r,s&&s[t],a))}}return e}(e,a,t,s.isIndexable));We(e,a)&&(a=ze(a,o,r&&r[e],s));return a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function Be(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:o=e.allKeys}=t;return{allKeys:o,scriptable:i,indexable:n,isScriptable:ht(i)?i:()=>i,isIndexable:ht(n)?n:()=>n}}const He=(t,e)=>t?t+lt(e):e,We=(t,e)=>Y(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ue(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function $e(t,e,i){return ht(t)?t(e,i):t}const Ye=(t,e)=>!0===t?e:"string"==typeof t?at(e,t):void 0;function Ke(t,e,i,n,o){for(const r of e){const e=Ye(i,r);if(e){t.add(e);const r=$e(e._fallback,i,o);if(void 0!==r&&r!==i&&r!==n)return r}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function qe(t,e,i,n){const o=e._rootScopes,r=$e(e._fallback,i,n),s=[...t,...o],a=new Set;a.add(n);let l=Xe(a,s,i,r||i,n);return null!==l&&((void 0===r||r===i||(l=Xe(a,s,r,l,n),null!==l))&&Ve(Array.from(a),[""],o,r,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const o=n[e];if($(o)&&Y(i))return i;return o||{}}(e,i,n))))}function Xe(t,e,i,n,o){for(;i;)i=Ke(t,e,i,n,o);return i}function Ge(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function Je(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ze(t,e,i,n){const{iScale:o}=t,{key:r="r"}=this._parsing,s=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],s[a]={r:o.parse(at(h,r),c)};return s}const Qe=Number.EPSILON||1e-14,ti=(t,e)=>e<t.length&&!t[e].skip&&t[e],ei=t=>"x"===t?"y":"x";function ii(t,e,i,n){const o=t.skip?e:t,r=e,s=i.skip?e:i,a=Lt(r,o),l=Lt(s,r);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const u=n*c,d=n*h;return{previous:{x:r.x-u*(s.x-o.x),y:r.y-u*(s.y-o.y)},next:{x:r.x+d*(s.x-o.x),y:r.y+d*(s.y-o.y)}}}function ni(t,e="x"){const i=ei(e),n=t.length,o=Array(n).fill(0),r=Array(n);let s,a,l,c=ti(t,0);for(s=0;s<n;++s)if(a=l,l=c,c=ti(t,s+1),l){if(c){const t=c[e]-l[e];o[s]=0!==t?(c[i]-l[i])/t:0}r[s]=a?c?_t(o[s-1])!==_t(o[s])?0:(o[s-1]+o[s])/2:o[s-1]:o[s]}!function(t,e,i){const n=t.length;let o,r,s,a,l,c=ti(t,0);for(let h=0;h<n-1;++h)l=c,c=ti(t,h+1),l&&c&&(wt(e[h],0,Qe)?i[h]=i[h+1]=0:(o=i[h]/e[h],r=i[h+1]/e[h],a=Math.pow(o,2)+Math.pow(r,2),a<=9||(s=3/Math.sqrt(a),i[h]=o*s*e[h],i[h+1]=r*s*e[h])))}(t,o,r),function(t,e,i="x"){const n=ei(i),o=t.length;let r,s,a,l=ti(t,0);for(let c=0;c<o;++c){if(s=a,a=l,l=ti(t,c+1),!a)continue;const o=a[i],h=a[n];s&&(r=(o-s[i])/3,a[`cp1${i}`]=o-r,a[`cp1${n}`]=h-r*e[c]),l&&(r=(l[i]-o)/3,a[`cp2${i}`]=o+r,a[`cp2${n}`]=h+r*e[c])}}(t,r,e)}function oi(t,e,i){return Math.max(Math.min(t,i),e)}function ri(t,e,i,n,o){let r,s,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)ni(t,o);else{let i=n?t[t.length-1]:t[0];for(r=0,s=t.length;r<s;++r)a=t[r],l=ii(i,a,t[Math.min(r+1,s-(n?0:1))%s],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,o,r,s,a=ve(t[0],e);for(i=0,n=t.length;i<n;++i)s=r,r=a,a=i<n-1&&ve(t[i+1],e),r&&(o=t[i],s&&(o.cp1x=oi(o.cp1x,e.left,e.right),o.cp1y=oi(o.cp1y,e.top,e.bottom)),a&&(o.cp2x=oi(o.cp2x,e.left,e.right),o.cp2y=oi(o.cp2y,e.top,e.bottom)))}(t,i)}function si(){return"undefined"!=typeof window&&"undefined"!=typeof document}function ai(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function li(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const ci=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);const hi=["top","right","bottom","left"];function ui(t,e,i){const n={};i=i?"-"+i:"";for(let o=0;o<4;o++){const r=hi[o];n[r]=parseFloat(t[e+"-"+r+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const di=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function fi(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,o=ci(i),r="border-box"===o.boxSizing,s=ui(o,"padding"),a=ui(o,"border","width"),{x:l,y:c,box:h}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:o,offsetY:r}=n;let s,a,l=!1;if(di(o,r,t.target))s=o,a=r;else{const t=e.getBoundingClientRect();s=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:s,y:a,box:l}}(t,i),u=s.left+(h&&a.left),d=s.top+(h&&a.top);let{width:f,height:p}=e;return r&&(f-=s.width+a.width,p-=s.height+a.height),{x:Math.round((l-u)/f*i.width/n),y:Math.round((c-d)/p*i.height/n)}}const pi=t=>Math.round(10*t)/10;function gi(t,e,i,n){const o=ci(t),r=ui(o,"margin"),s=li(o.maxWidth,t,"clientWidth")||gt,a=li(o.maxHeight,t,"clientHeight")||gt,l=function(t,e,i){let n,o;if(void 0===e||void 0===i){const r=ai(t);if(r){const t=r.getBoundingClientRect(),s=ci(r),a=ui(s,"border","width"),l=ui(s,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=li(s.maxWidth,r,"clientWidth"),o=li(s.maxHeight,r,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||gt,maxHeight:o||gt}}(t,e,i);let{width:c,height:h}=l;if("content-box"===o.boxSizing){const t=ui(o,"border","width"),e=ui(o,"padding");c-=e.width+t.width,h-=e.height+t.height}c=Math.max(0,c-r.width),h=Math.max(0,n?c/n:h-r.height),c=pi(Math.min(c,s,l.maxWidth)),h=pi(Math.min(h,a,l.maxHeight)),c&&!h&&(h=pi(c/2));return(void 0!==e||void 0!==i)&&n&&l.height&&h>l.height&&(h=l.height,c=pi(Math.floor(h*n))),{width:c,height:h}}function mi(t,e,i){const n=e||1,o=Math.floor(t.height*n),r=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const s=t.canvas;return s.style&&(i||!s.style.height&&!s.style.width)&&(s.style.height=`${t.height}px`,s.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||s.height!==o||s.width!==r)&&(t.currentDevicePixelRatio=n,s.height=o,s.width=r,t.ctx.setTransform(n,0,0,n,0,0),!0)}const bi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function yi(t,e){const i=function(t,e){return ci(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function vi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function xi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function _i(t,e,i,n){const o={x:t.cp2x,y:t.cp2y},r={x:e.cp1x,y:e.cp1y},s=vi(t,o,i),a=vi(o,r,i),l=vi(r,e,i),c=vi(s,a,i),h=vi(a,l,i);return vi(c,h,i)}function wi(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function ki(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Oi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Si(t){return"angle"===t?{between:Rt,compare:Et,normalize:Dt}:{between:jt,compare:(t,e)=>t-e,normalize:t=>t}}function Mi({start:t,end:e,count:i,loop:n,style:o}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:o}}function Pi(t,e,i){if(!i)return[t];const{property:n,start:o,end:r}=i,s=e.length,{compare:a,between:l,normalize:c}=Si(n),{start:h,end:u,loop:d,style:f}=function(t,e,i){const{property:n,start:o,end:r}=i,{between:s,normalize:a}=Si(n),l=e.length;let c,h,{start:u,end:d,loop:f}=t;if(f){for(u+=l,d+=l,c=0,h=l;c<h&&s(a(e[u%l][n]),o,r);++c)u--,d--;u%=l,d%=l}return d<u&&(d+=l),{start:u,end:d,loop:f,style:t.style}}(t,e,i),p=[];let g,m,b,y=!1,v=null;const x=()=>y||l(o,b,g)&&0!==a(o,b),_=()=>!y||0===a(r,g)||l(r,b,g);for(let t=h,i=h;t<=u;++t)m=e[t%s],m.skip||(g=c(m[n]),g!==b&&(y=l(g,o,r),null===v&&x()&&(v=0===a(g,o)?t:i),null!==v&&_()&&(p.push(Mi({start:v,end:t,loop:d,count:s,style:f})),v=null),i=t,b=g));return null!==v&&p.push(Mi({start:v,end:u,loop:d,count:s,style:f})),p}function Ci(t,e){const i=[],n=t.segments;for(let o=0;o<n.length;o++){const r=Pi(n[o],t.points,e);r.length&&i.push(...r)}return i}function Ai(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const o=t._chart.getContext(),r=Li(t.options),{_datasetIndex:s,options:{spanGaps:a}}=t,l=i.length,c=[];let h=r,u=e[0].start,d=u;function f(t,e,n,o){const r=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=r;for(;i[e%l].skip;)e+=r;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:n,style:o}),h=o,u=e%l)}}for(const t of e){u=a?u:t.start;let e,r=i[u%l];for(d=u+1;d<=t.end;d++){const a=i[d%l];e=Li(n.setContext(Fe(o,{type:"segment",p0:r,p1:a,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:s}))),Ei(e,h)&&f(u,d-1,t.loop,h),r=a,h=e}u<d-1&&f(u,d-1,t.loop,h)}return c}(t,e,i,n):e}function Li(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Ei(t,e){if(!e)return!1;const i=[],n=function(t,e){return Zt(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}
/*!
 * Chart.js v4.3.0
 * https://www.chartjs.org
 * (c) 2023 Chart.js Contributors
 * Released under the MIT License
 */
class Di{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const o=e.listeners[n],r=e.duration;o.forEach((n=>n({chart:t,initial:e.initial,numSteps:r,currentStep:Math.min(i-e.start,r)})))}_refresh(){this._request||(this._running=!0,this._request=Ht.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const o=i.items;let r,s=o.length-1,a=!1;for(;s>=0;--s)r=o[s],r._active?(r._total>i.duration&&(i.duration=r._total),r.tick(t),a=!0):(o[s]=o[o.length-1],o.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),o.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=o.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var Ri=new Di;const Ti="transparent",ji={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=Qt(t||Ti),o=n.valid&&Qt(e||Ti);return o&&o.valid?o.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class Ii{constructor(t,e,i,n){const o=e[i];n=Ne([t.to,n,o,t.from]);const r=Ne([t.from,o,n]);this._active=!0,this._fn=t.fn||ji[t.type||typeof r],this._easing=Jt[t.easing]||Jt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=r,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],o=i-this._start,r=this._duration-o;this._start=i,this._duration=Math.floor(Math.max(r,t.duration)),this._total+=o,this._loop=!!t.loop,this._to=Ne([t.to,e,n,t.from]),this._from=Ne([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,o=this._from,r=this._loop,s=this._to;let a;if(this._active=o!==s&&(r||e<i),!this._active)return this._target[n]=s,void this._notify(!0);e<0?this._target[n]=o:(a=e/i%2,a=r&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(o,s,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Ni{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!Y(t))return;const e=Object.keys(de.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const o=t[n];if(!Y(o))return;const r={};for(const t of e)r[t]=o[t];($(o.properties)&&o.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,r)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!n)return[];const o=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const o=t[n[e]];o&&o.active()&&i.push(o.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),o}_createAnimations(t,e){const i=this._properties,n=[],o=t.$animations||(t.$animations={}),r=Object.keys(e),s=Date.now();let a;for(a=r.length-1;a>=0;--a){const l=r[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const c=e[l];let h=o[l];const u=i.get(l);if(h){if(u&&h.active()){h.update(u,c,s);continue}h.cancel()}u&&u.duration?(o[l]=h=new Ii(u,t,l,c),n.push(h)):t[l]=c}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(Ri.add(this._chart,i),!0):void 0}}function Fi(t,e){const i=t&&t.options||{},n=i.reverse,o=void 0===i.min?e:0,r=void 0===i.max?e:0;return{start:n?r:o,end:n?o:r}}function Vi(t,e){const i=[],n=t._getSortedDatasetMetas(e);let o,r;for(o=0,r=n.length;o<r;++o)i.push(n[o].index);return i}function zi(t,e,i,n={}){const o=t.keys,r="single"===n.mode;let s,a,l,c;if(null!==e){for(s=0,a=o.length;s<a;++s){if(l=+o[s],l===i){if(n.all)continue;break}c=t.values[l],K(c)&&(r||0===e||_t(e)===_t(c))&&(e+=c)}return e}}function Bi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Hi(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function Wi(t,e,i,n){for(const o of e.getMatchingVisibleMetas(n).reverse()){const e=t[o.index];if(i&&e>0||!i&&e<0)return o.index}return null}function Ui(t,e){const{chart:i,_cachedMeta:n}=t,o=i._stacks||(i._stacks={}),{iScale:r,vScale:s,index:a}=n,l=r.axis,c=s.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(r,s,n),u=e.length;let d;for(let t=0;t<u;++t){const i=e[t],{[l]:r,[c]:u}=i;d=(i._stacks||(i._stacks={}))[c]=Hi(o,h,r),d[a]=u,d._top=Wi(d,s,!0,n.type),d._bottom=Wi(d,s,!1,n.type);(d._visualValues||(d._visualValues={}))[a]=u}}function $i(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Yi(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const Ki=t=>"reset"===t||"none"===t,qi=(t,e)=>e?t:Object.assign({},t);class Xi{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Bi(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Yi(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,o=e.xAxisID=X(i.xAxisID,$i(t,"x")),r=e.yAxisID=X(i.yAxisID,$i(t,"y")),s=e.rAxisID=X(i.rAxisID,$i(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,o,r,s),c=e.vAxisID=n(a,r,o,s);e.xScale=this.getScaleForId(o),e.yScale=this.getScaleForId(r),e.rScale=this.getScaleForId(s),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&zt(this._data,this),t._stacked&&Yi(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(Y(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,o,r;for(n=0,o=e.length;n<o;++n)r=e[n],i[n]={x:r,y:t[r]};return i}(e);else if(i!==e){if(i){zt(i,this);const t=this._cachedMeta;Yi(t),t._parsed=[]}e&&Object.isExtensible(e)&&(o=this,(n=e)._chartjs?n._chartjs.listeners.push(o):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[o]}}),Vt.forEach((t=>{const e="_onData"+lt(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const o=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),o}})})))),this._syncList=[],this._data=e}var n,o}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const o=e._stacked;e._stacked=Bi(e.vScale,e),e.stack!==i.stack&&(n=!0,Yi(e),e.stack=i.stack),this._resyncElements(t),(n||o!==e._stacked)&&Ui(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:o,_stacked:r}=i,s=o.axis;let a,l,c,h=0===t&&e===n.length||i._sorted,u=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,c=n;else{c=$(n[t])?this.parseArrayData(i,n,t,e):Y(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const o=()=>null===l[s]||u&&l[s]<u[s];for(a=0;a<e;++a)i._parsed[a+t]=l=c[a],h&&(o()&&(h=!1),u=l);i._sorted=h}r&&Ui(this,c)}parsePrimitiveData(t,e,i,n){const{iScale:o,vScale:r}=t,s=o.axis,a=r.axis,l=o.getLabels(),c=o===r,h=new Array(n);let u,d,f;for(u=0,d=n;u<d;++u)f=u+i,h[u]={[s]:c||o.parse(l[f],f),[a]:r.parse(e[f],f)};return h}parseArrayData(t,e,i,n){const{xScale:o,yScale:r}=t,s=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],s[a]={x:o.parse(h[0],c),y:r.parse(h[1],c)};return s}parseObjectData(t,e,i,n){const{xScale:o,yScale:r}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let c,h,u,d;for(c=0,h=n;c<h;++c)u=c+i,d=e[u],l[c]={x:o.parse(at(d,s),u),y:r.parse(at(d,a),u)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,o=this._cachedMeta,r=e[t.axis];return zi({keys:Vi(n,!0),values:e._stacks[t.axis]._visualValues},r,o.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const o=i[e.axis];let r=null===o?NaN:o;const s=n&&i._stacks[e.axis];n&&s&&(n.values=s,r=zi(n,o,this._cachedMeta.index)),t.min=Math.min(t.min,r),t.max=Math.max(t.max,r)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,o=i._sorted&&t===i.iScale,r=n.length,s=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Vi(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:i,minDefined:n,maxDefined:o}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:o?i:Number.POSITIVE_INFINITY}}(s);let u,d;function f(){d=n[u];const e=d[s.axis];return!K(d[t.axis])||c>e||h<e}for(u=0;u<r&&(f()||(this.updateRangeFromParsed(l,t,d,a),!o));++u);if(o)for(u=r-1;u>=0;--u)if(!f()){this.updateRangeFromParsed(l,t,d,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,o,r;for(n=0,o=e.length;n<o;++n)r=e[n][t.axis],K(r)&&i.push(r);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,o=this.getParsed(t);return{label:i?""+i.getLabelForValue(o[i.axis]):"",value:n?""+n.getLabelForValue(o[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,o;return Y(t)?(e=t.top,i=t.right,n=t.bottom,o=t.left):e=i=n=o=t,{top:e,right:i,bottom:n,left:o,disabled:!1===t}}(X(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=Fi(t,i),o=Fi(e,i);return{top:o.end,right:n.end,bottom:o.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],o=e.chartArea,r=[],s=this._drawStart||0,a=this._drawCount||n.length-s,l=this.options.drawActiveElementsOnTop;let c;for(i.dataset&&i.dataset.draw(t,o,s,a),c=s;c<s+a;++c){const e=n[c];e.hidden||(e.active&&l?r.push(e):e.draw(t,o))}for(c=0;c<r.length;++c)r[c].draw(t,o)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let o;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,i){return Fe(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),o.parsed=this.getParsed(t),o.raw=n.data[t],o.index=o.dataIndex=t}else o=this.$context||(this.$context=function(t,e){return Fe(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),o.dataset=n,o.index=o.datasetIndex=this.index;return o.active=!!e,o.mode=i,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,o=this._cachedDataOpts,r=t+"-"+e,s=o[r],a=this.enableOptionSharing&&ct(i);if(s)return qi(s,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),h=n?[`${t}Hover`,"hover",t,""]:[t,""],u=l.getOptionScopes(this.getDataset(),c),d=Object.keys(de.elements[t]),f=l.resolveNamedOptions(u,d,(()=>this.getContext(i,n,e)),h);return f.$shared&&(f.$shared=a,o[r]=Object.freeze(qi(f,a))),f}_resolveAnimations(t,e,i){const n=this.chart,o=this._cachedDataOpts,r=`animation-${e}`,s=o[r];if(s)return s;let a;if(!1!==n.options.animation){const n=this.chart.config,o=n.datasetAnimationScopeKeys(this._type,e),r=n.getOptionScopes(this.getDataset(),o);a=n.createResolver(r,this.getContext(t,i,e))}const l=new Ni(n,a&&a.animations);return a&&a._cacheable&&(o[r]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ki(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,o=this.getSharedOptions(i),r=this.includeOptions(e,o)||o!==n;return this.updateSharedOptions(o,e,i),{sharedOptions:o,includeOptions:r}}updateElement(t,e,i,n){Ki(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!Ki(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const o=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(o)||o})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,o=e.length,r=Math.min(o,n);r&&this.parse(0,r),o>n?this._insertElements(n,o-n,t):o<n&&this._removeElements(o,n-o)}_insertElements(t,e,i=!0){const n=this._cachedMeta,o=n.data,r=t+e;let s;const a=t=>{for(t.length+=e,s=t.length-1;s>=r;s--)t[s]=t[s-e]};for(a(o),s=t;s<r;++s)o[s]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(o,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&Yi(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Gi(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,o=i.length;e<o;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=Bt(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,o,r,s,a=e._length;const l=()=>{32767!==r&&-32768!==r&&(ct(s)&&(a=Math.min(a,Math.abs(r-s)||a)),s=r)};for(n=0,o=i.length;n<o;++n)r=e.getPixelForValue(i[n]),l();for(s=void 0,n=0,o=e.ticks.length;n<o;++n)r=e.getPixelForTick(n),l();return a}function Ji(t,e,i,n){return $(t)?function(t,e,i,n){const o=i.parse(t[0],n),r=i.parse(t[1],n),s=Math.min(o,r),a=Math.max(o,r);let l=s,c=a;Math.abs(s)>Math.abs(a)&&(l=a,c=s),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:o,end:r,min:s,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function Zi(t,e,i,n){const o=t.iScale,r=t.vScale,s=o.getLabels(),a=o===r,l=[];let c,h,u,d;for(c=i,h=i+n;c<h;++c)d=e[c],u={},u[o.axis]=a||o.parse(s[c],c),l.push(Ji(d,u,r,c));return l}function Qi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function tn(t,e,i,n){let o=e.borderSkipped;const r={};if(!o)return void(t.borderSkipped=r);if(!0===o)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:s,end:a,reverse:l,top:c,bottom:h}=function(t){let e,i,n,o,r;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(o="end",r="start"):(o="start",r="end"),{start:i,end:n,reverse:e,top:o,bottom:r}}(t);"middle"===o&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?o=c:(i._bottom||0)===n?o=h:(r[en(h,s,a,l)]=!0,o=c)),r[en(o,s,a,l)]=!0,t.borderSkipped=r}function en(t,e,i,n){var o,r,s;return n?(s=i,t=nn(t=(o=t)===(r=e)?s:o===s?r:o,i,e)):t=nn(t,e,i),t}function nn(t,e,i){return"start"===t?e:"end"===t?i:t}function on(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class rn extends Xi{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,o)=>{const r=t.getDatasetMeta(0).controller.getStyle(o);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,fontColor:n,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(o),index:o}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let o,r,s=t=>+i[t];if(Y(i[t])){const{key:t="value"}=this._parsing;s=e=>+at(i[e],t)}for(o=t,r=t+e;o<r;++o)n._parsed[o]=s(o)}}_getRotation(){return Mt(this.options.rotation-90)}_getCircumference(){return Mt(this.options.circumference)}_getRotationExtents(){let t=ft,e=-ft;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,o=n._getRotation(),r=n._getCircumference();t=Math.min(t,o),e=Math.max(e,o+r)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,o=n.data,r=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,s=Math.max((Math.min(i.width,i.height)-r)/2,0),a=Math.min((l=this.options.cutout,c=s,"string"==typeof l&&l.endsWith("%")?parseFloat(l)/100:+l/c),1);var l,c;const h=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,i){let n=1,o=1,r=0,s=0;if(e<ft){const a=t,l=a+e,c=Math.cos(a),h=Math.sin(a),u=Math.cos(l),d=Math.sin(l),f=(t,e,n)=>Rt(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>Rt(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=f(0,c,u),m=f(bt,h,d),b=p(dt,c,u),y=p(dt+bt,h,d);n=(g-b)/2,o=(m-y)/2,r=-(g+b)/2,s=-(m+y)/2}return{ratioX:n,ratioY:o,offsetX:r,offsetY:s}}(d,u,a),b=(i.width-r)/f,y=(i.height-r)/p,v=Math.max(Math.min(b,y)/2,0),x=G(this.options.radius,v),_=(x-Math.max(x*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*x,this.offsetY=m*x,n.total=this.calculateTotal(),this.outerRadius=x-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*h,0),this.updateElements(o,0,o.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,o=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*o/ft)}updateElements(t,e,i,n){const o="reset"===n,r=this.chart,s=r.chartArea,a=r.options.animation,l=(s.left+s.right)/2,c=(s.top+s.bottom)/2,h=o&&a.animateScale,u=h?0:this.innerRadius,d=h?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,o);for(g=e;g<e+i;++g){const e=this._circumference(g,o),i=t[g],r={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:d,innerRadius:u};p&&(r.options=f||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,r,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const o=t._parsed[i];null===o||isNaN(o)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(o))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?ft*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=oe(e._parsed[t],i.options.locale);return{label:n[t]||"",value:o}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,o,r,s,a;if(!t)for(n=0,o=i.data.datasets.length;n<o;++n)if(i.isDatasetVisible(n)){r=i.getDatasetMeta(n),t=r.data,s=r.controller;break}if(!t)return 0;for(n=0,o=t.length;n<o;++n)a=s.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(X(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class sn extends Xi{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,o)=>{const r=t.getDatasetMeta(0).controller.getStyle(o);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,fontColor:n,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(o),index:o}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=oe(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:o}}parseObjectData(t,e,i,n){return Ze.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),o=Math.max(n/2,0),r=(o-Math.max(i.cutoutPercentage?o/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=o-r*this.index,this.innerRadius=this.outerRadius-r}updateElements(t,e,i,n){const o="reset"===n,r=this.chart,s=r.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,c=a.yCenter,h=a.getIndexAngle(0)-.5*dt;let u,d=h;const f=360/this.countVisibleElements();for(u=0;u<e;++u)d+=this._computeAngle(u,n,f);for(u=e;u<e+i;u++){const e=t[u];let i=d,p=d+this._computeAngle(u,n,f),g=r.getDataVisibility(u)?a.getDistanceFromCenterForValue(this.getParsed(u).r):0;d=p,o&&(s.animateScale&&(g=0),s.animateRotate&&(i=p=h));const m={x:l,y:c,innerRadius:0,outerRadius:g,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(u,e.active?"active":n)};this.updateElement(e,u,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Mt(this.resolveDataElementOptions(t,e).angle||i):0}}var an=Object.freeze({__proto__:null,BarController:class extends Xi{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return Zi(t,e,i,n)}parseArrayData(t,e,i,n){return Zi(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:o,vScale:r}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l="x"===o.axis?s:a,c="x"===r.axis?s:a,h=[];let u,d,f,p;for(u=i,d=i+n;u<d;++u)p=e[u],f={},f[o.axis]=o.parse(at(p,l),u),h.push(Ji(at(p,c),f,r,u));return h}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const o=i._custom;o&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,o.min),t.max=Math.max(t.max,o.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,o=this.getParsed(t),r=o._custom,s=Qi(r)?"["+r.start+", "+r.end+"]":""+n.getLabelForValue(o[n.axis]);return{label:""+i.getLabelForValue(o[i.axis]),value:s}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const o="reset"===n,{index:r,_cachedMeta:{vScale:s}}=this,a=s.getBasePixel(),l=s.isHorizontal(),c=this._getRuler(),{sharedOptions:h,includeOptions:u}=this._getSharedOptions(e,n);for(let d=e;d<e+i;d++){const e=this.getParsed(d),i=o||U(e[s.axis])?{base:a,head:a}:this._calculateBarValuePixels(d),f=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[s.axis],g={horizontal:l,base:i.base,enableBorderRadius:!p||Qi(e._custom)||r===p._top||r===p._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};u&&(g.options=h||this.resolveDataElementOptions(d,t[d].active?"active":n));const m=g.options||t[d].options;tn(g,m,p,r),on(g,m,c.ratio),this.updateElement(t[d],d,g,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),o=i.options.stacked,r=[],s=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(U(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!s(i))&&((!1===o||-1===r.indexOf(i.stack)||void 0===o&&void 0===i.stack)&&r.push(i.stack),i.index===t))break;return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),o=void 0!==e?n.indexOf(e):-1;return-1===o?n.length-1:o}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let o,r;for(o=0,r=e.data.length;o<r;++o)n.push(i.getPixelForValue(this.getParsed(o)[i.axis],o));const s=t.barThickness;return{min:s||Gi(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:o,minBarLength:r}}=this,s=o||0,a=this.getParsed(t),l=a._custom,c=Qi(l);let h,u,d=a[e.axis],f=0,p=i?this.applyStack(e,a,i):d;p!==d&&(f=p-d,p=d),c&&(d=l.barStart,p=l.barEnd-l.barStart,0!==d&&_t(d)!==_t(l.barEnd)&&(f=0),f+=d);const g=U(o)||c?f:o;let m=e.getPixelForValue(g);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,u=h-m,Math.abs(u)<r){u=function(t,e,i){return 0!==t?_t(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(u,e,s)*r,d===s&&(m-=u/2);const t=e.getPixelForDecimal(0),o=e.getPixelForDecimal(1),l=Math.min(t,o),f=Math.max(t,o);m=Math.max(Math.min(m,f),l),h=m+u,i&&!c&&(a._stacks[e.axis]._visualValues[n]=e.getValueForPixel(h)-e.getValueForPixel(m))}if(m===e.getPixelForValue(s)){const t=_t(u)*e.getLineWidthForValue(s)/2;m+=t,u-=t}return{size:u,base:m,head:h,center:h+u/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,o=n.skipNull,r=X(n.maxBarThickness,1/0);let s,a;if(e.grouped){const i=o?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const o=e.pixels,r=o[t];let s=t>0?o[t-1]:null,a=t<o.length-1?o[t+1]:null;const l=i.categoryPercentage;null===s&&(s=r-(null===a?e.end-e.start:a-r)),null===a&&(a=r+r-s);const c=r-(r-Math.min(s,a))/2*l;return{chunk:Math.abs(a-s)/2*l/n,ratio:i.barPercentage,start:c}}(t,e,n,i):function(t,e,i,n){const o=i.barThickness;let r,s;return U(o)?(r=e.min*i.categoryPercentage,s=i.barPercentage):(r=o*n,s=1),{chunk:r/n,ratio:s,start:e.pixels[t]-r/2}}(t,e,n,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);s=l.start+l.chunk*c+l.chunk/2,a=Math.min(r,l.chunk*l.ratio)}else s=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(r,e.min*e.ratio);return{base:s-a/2,head:s+a/2,center:s,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let o=0;for(;o<n;++o)null!==this.getParsed(o)[e.axis]&&i[o].draw(this._ctx)}},BubbleController:class extends Xi{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const o=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<o.length;t++)o[t]._custom=this.resolveDataElementOptions(t+i).radius;return o}parseArrayData(t,e,i,n){const o=super.parseArrayData(t,e,i,n);for(let t=0;t<o.length;t++){const n=e[i+t];o[t]._custom=X(n[2],this.resolveDataElementOptions(t+i).radius)}return o}parseObjectData(t,e,i,n){const o=super.parseObjectData(t,e,i,n);for(let t=0;t<o.length;t++){const n=e[i+t];o[t]._custom=X(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return o}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:o}=e,r=this.getParsed(t),s=n.getLabelForValue(r.x),a=o.getLabelForValue(r.y),l=r._custom;return{label:i[t]||"",value:"("+s+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const o="reset"===n,{iScale:r,vScale:s}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),c=r.axis,h=s.axis;for(let u=e;u<e+i;u++){const e=t[u],i=!o&&this.getParsed(u),d={},f=d[c]=o?r.getPixelForDecimal(.5):r.getPixelForValue(i[c]),p=d[h]=o?s.getBasePixel():s.getPixelForValue(i[h]);d.skip=isNaN(f)||isNaN(p),l&&(d.options=a||this.resolveDataElementOptions(u,e.active?"active":n),o&&(d.options.radius=0)),this.updateElement(e,u,d,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const o=n.radius;return"active"!==e&&(n.radius=0),n.radius+=X(i&&i._custom,o),n}},DoughnutController:rn,LineController:class extends Xi{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:o}=e,r=this.chart._animationsDisabled;let{start:s,count:a}=Yt(e,n,r);this._drawStart=s,this._drawCount=a,Kt(e)&&(s=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!o._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!r,options:l},t),this.updateElements(n,s,a,t)}updateElements(t,e,i,n){const o="reset"===n,{iScale:r,vScale:s,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:h}=this._getSharedOptions(e,n),u=r.axis,d=s.axis,{spanGaps:f,segment:p}=this.options,g=Ot(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||o||"none"===n,b=e+i,y=t.length;let v=e>0&&this.getParsed(e-1);for(let i=0;i<y;++i){const f=t[i],y=m?f:{};if(i<e||i>=b){y.skip=!0;continue}const x=this.getParsed(i),_=U(x[d]),w=y[u]=r.getPixelForValue(x[u],i),k=y[d]=o||_?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,x,a):x[d],i);y.skip=isNaN(w)||isNaN(k)||_,y.stop=i>0&&Math.abs(x[u]-v[u])>g,p&&(y.parsed=x,y.raw=l.data[i]),h&&(y.options=c||this.resolveDataElementOptions(i,f.active?"active":n)),m||this.updateElement(f,i,y,n),v=x}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const o=n[0].size(this.resolveDataElementOptions(0)),r=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,o,r)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends rn{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:sn,RadarController:class extends Xi{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return Ze.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],o=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const r={_loop:!0,_fullLoop:o.length===n.length,options:e};this.updateElement(i,void 0,r,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const o=this._cachedMeta.rScale,r="reset"===n;for(let s=e;s<e+i;s++){const e=t[s],i=this.resolveDataElementOptions(s,e.active?"active":n),a=o.getPointPositionForValue(s,this.getParsed(s).r),l=r?o.xCenter:a.x,c=r?o.yCenter:a.y,h={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,s,h,n)}}},ScatterController:class extends Xi{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:o}=e,r=this.getParsed(t),s=n.getLabelForValue(r.x),a=o.getLabelForValue(r.y);return{label:i[t]||"",value:"("+s+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:o,count:r}=Yt(e,i,n);if(this._drawStart=o,this._drawCount=r,Kt(e)&&(o=0,r=i.length),this.options.showLine){const{dataset:o,_dataset:r}=e;o._chart=this.chart,o._datasetIndex=this.index,o._decimated=!!r._decimated,o.points=i;const s=this.resolveDatasetElementOptions(t);s.segment=this.options.segment,this.updateElement(o,void 0,{animated:!n,options:s},t)}this.updateElements(i,o,r,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const o="reset"===n,{iScale:r,vScale:s,_stacked:a,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,n),h=this.getSharedOptions(c),u=this.includeOptions(n,h),d=r.axis,f=s.axis,{spanGaps:p,segment:g}=this.options,m=Ot(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===n;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),p=b?e:{},v=U(i[f]),x=p[d]=r.getPixelForValue(i[d],c),_=p[f]=o||v?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,i,a):i[f],c);p.skip=isNaN(x)||isNaN(_)||v,p.stop=c>0&&Math.abs(i[d]-y[d])>m,g&&(p.parsed=i,p.raw=l.data[c]),u&&(p.options=h||this.resolveDataElementOptions(c,e.active?"active":n)),b||this.updateElement(e,c,p,n),y=i}this.updateSharedOptions(h,n,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const o=e[0].size(this.resolveDataElementOptions(0)),r=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,o,r)/2}}});function ln(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class cn{static override(t){Object.assign(cn.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return ln()}parse(){return ln()}format(){return ln()}add(){return ln()}diff(){return ln()}startOf(){return ln()}endOf(){return ln()}}var hn=cn;function un(t,e,i,n){const{controller:o,data:r,_sorted:s}=t,a=o._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&s&&r.length){const t=a._reversePixels?Ft:Nt;if(!n)return t(r,e,i);if(o._sharedOptions){const n=r[0],o="function"==typeof n.getRange&&n.getRange(e);if(o){const n=t(r,e,i-o),s=t(r,e,i+o);return{lo:n.lo,hi:s.hi}}}}return{lo:0,hi:r.length-1}}function dn(t,e,i,n,o){const r=t.getSortedVisibleDatasetMetas(),s=i[e];for(let t=0,i=r.length;t<i;++t){const{index:i,data:a}=r[t],{lo:l,hi:c}=un(r[t],e,s,o);for(let t=l;t<=c;++t){const e=a[t];e.skip||n(e,i,t)}}}function fn(t,e,i,n,o){const r=[];if(!o&&!t.isPointInArea(e))return r;return dn(t,i,e,(function(i,s,a){(o||ve(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&r.push({element:i,datasetIndex:s,index:a})}),!0),r}function pn(t,e,i,n,o,r){let s=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const o=e?Math.abs(t.x-n.x):0,r=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(r,2))}}(i);let l=Number.POSITIVE_INFINITY;return dn(t,i,e,(function(i,c,h){const u=i.inRange(e.x,e.y,o);if(n&&!u)return;const d=i.getCenterPoint(o);if(!(!!r||t.isPointInArea(d))&&!u)return;const f=a(e,d);f<l?(s=[{element:i,datasetIndex:c,index:h}],l=f):f===l&&s.push({element:i,datasetIndex:c,index:h})})),s}function gn(t,e,i,n,o,r){return r||t.isPointInArea(e)?"r"!==i||n?pn(t,e,i,n,o,r):function(t,e,i,n){let o=[];return dn(t,i,e,(function(t,i,r){const{startAngle:s,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=At(t,{x:e.x,y:e.y});Rt(l,s,a)&&o.push({element:t,datasetIndex:i,index:r})})),o}(t,e,i,o):[]}function mn(t,e,i,n,o){const r=[],s="x"===i?"inXRange":"inYRange";let a=!1;return dn(t,i,e,((t,n,l)=>{t[s](e[i],o)&&(r.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,o))})),n&&!a?[]:r}var bn={evaluateInteractionItems:dn,modes:{index(t,e,i,n){const o=fi(e,t),r=i.axis||"x",s=i.includeInvisible||!1,a=i.intersect?fn(t,o,r,n,s):gn(t,o,r,!1,n,s),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const o=fi(e,t),r=i.axis||"xy",s=i.includeInvisible||!1;let a=i.intersect?fn(t,o,r,n,s):gn(t,o,r,!1,n,s);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>fn(t,fi(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const o=fi(e,t),r=i.axis||"xy",s=i.includeInvisible||!1;return gn(t,o,r,i.intersect,n,s)},x:(t,e,i,n)=>mn(t,fi(e,t),"x",i.intersect,n),y:(t,e,i,n)=>mn(t,fi(e,t),"y",i.intersect,n)}};const yn=["left","top","right","bottom"];function vn(t,e){return t.filter((t=>t.pos===e))}function xn(t,e){return t.filter((t=>-1===yn.indexOf(t.pos)&&t.box.axis===e))}function _n(t,e){return t.sort(((t,i)=>{const n=e?i:t,o=e?t:i;return n.weight===o.weight?n.index-o.index:n.weight-o.weight}))}function wn(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:o}=i;if(!t||!yn.includes(n))continue;const r=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});r.count++,r.weight+=o}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:o}=e;let r,s,a;for(r=0,s=t.length;r<s;++r){a=t[r];const{fullSize:s}=a.box,l=i[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*n:s&&e.availableWidth,a.height=o):(a.width=n,a.height=c?c*o:s&&e.availableHeight)}return i}function kn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function On(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Sn(t,e,i,n){const{pos:o,box:r}=i,s=t.maxPadding;if(!Y(o)){i.size&&(t[o]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?r.height:r.width),i.size=e.size/e.count,t[o]+=i.size}r.getPadding&&On(s,r.getPadding());const a=Math.max(0,e.outerWidth-kn(s,t,"left","right")),l=Math.max(0,e.outerHeight-kn(s,t,"top","bottom")),c=a!==t.w,h=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:c,other:h}:{same:h,other:c}}function Mn(t,e){const i=e.maxPadding;function n(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}return n(t?["left","right"]:["top","bottom"])}function Pn(t,e,i,n){const o=[];let r,s,a,l,c,h;for(r=0,s=t.length,c=0;r<s;++r){a=t[r],l=a.box,l.update(a.width||e.w,a.height||e.h,Mn(a.horizontal,e));const{same:s,other:u}=Sn(e,i,a,n);c|=s&&o.length,h=h||u,l.fullSize||o.push(a)}return c&&Pn(o,e,i,n)||h}function Cn(t,e,i,n,o){t.top=i,t.left=e,t.right=e+n,t.bottom=i+o,t.width=n,t.height=o}function An(t,e,i,n){const o=i.padding;let{x:r,y:s}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*c,r=l.size||t.height;ct(l.start)&&(s=l.start),t.fullSize?Cn(t,o.left,s,i.outerWidth-o.right-o.left,r):Cn(t,e.left+l.placed,s,n,r),l.start=s,l.placed+=n,s=t.bottom}else{const n=e.h*c,s=l.size||t.width;ct(l.start)&&(r=l.start),t.fullSize?Cn(t,r,o.top,s,i.outerHeight-o.bottom-o.top):Cn(t,r,e.top+l.placed,s,n),l.start=r,l.placed+=n,r=t.right}}e.x=r,e.y=s}var Ln={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const o=je(t.options.layout.padding),r=Math.max(e-o.width,0),s=Math.max(i-o.height,0),a=function(t){const e=function(t){const e=[];let i,n,o,r,s,a;for(i=0,n=(t||[]).length;i<n;++i)o=t[i],({position:r,options:{stack:s,stackWeight:a=1}}=o),e.push({index:i,box:o,pos:r,horizontal:o.isHorizontal(),weight:o.weight,stack:s&&r+s,stackWeight:a});return e}(t),i=_n(e.filter((t=>t.box.fullSize)),!0),n=_n(vn(e,"left"),!0),o=_n(vn(e,"right")),r=_n(vn(e,"top"),!0),s=_n(vn(e,"bottom")),a=xn(e,"x"),l=xn(e,"y");return{fullSize:i,leftAndTop:n.concat(r),rightAndBottom:o.concat(l).concat(s).concat(a),chartArea:vn(e,"chartArea"),vertical:n.concat(o).concat(l),horizontal:r.concat(s).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;Z(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,u=Object.freeze({outerWidth:e,outerHeight:i,padding:o,availableWidth:r,availableHeight:s,vBoxMaxWidth:r/2/h,hBoxMaxHeight:s/2}),d=Object.assign({},o);On(d,je(n));const f=Object.assign({maxPadding:d,w:r,h:s,x:o.left,y:o.top},o),p=wn(l.concat(c),u);Pn(a.fullSize,f,u,p),Pn(l,f,u,p),Pn(c,f,u,p)&&Pn(l,f,u,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),An(a.leftAndTop,f,u,p),f.x+=f.w,f.y+=f.h,An(a.rightAndBottom,f,u,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Z(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class En{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class Dn extends En{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Rn="$chartjs",Tn={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},jn=t=>null===t||""===t;const In=!!bi&&{passive:!0};function Nn(t,e,i){t.canvas.removeEventListener(e,i,In)}function Fn(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Vn(t,e,i){const n=t.canvas,o=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Fn(i.addedNodes,n),e=e&&!Fn(i.removedNodes,n);e&&i()}));return o.observe(document,{childList:!0,subtree:!0}),o}function zn(t,e,i){const n=t.canvas,o=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Fn(i.removedNodes,n),e=e&&!Fn(i.addedNodes,n);e&&i()}));return o.observe(document,{childList:!0,subtree:!0}),o}const Bn=new Map;let Hn=0;function Wn(){const t=window.devicePixelRatio;t!==Hn&&(Hn=t,Bn.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Un(t,e,i){const n=t.canvas,o=n&&ai(n);if(!o)return;const r=Wt(((t,e)=>{const n=o.clientWidth;i(t,e),n<o.clientWidth&&i()}),window),s=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||r(i,n)}));return s.observe(o),function(t,e){Bn.size||window.addEventListener("resize",Wn),Bn.set(t,e)}(t,r),s}function $n(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Bn.delete(t),Bn.size||window.removeEventListener("resize",Wn)}(t)}function Yn(t,e,i){const n=t.canvas,o=Wt((e=>{null!==t.ctx&&i(function(t,e){const i=Tn[t.type]||t.type,{x:n,y:o}=fi(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==o?o:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,In)}(n,e,o),o}class Kn extends En{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),o=t.getAttribute("width");if(t[Rn]={initial:{height:n,width:o,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",jn(o)){const e=yi(t,"width");void 0!==e&&(t.width=e)}if(jn(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=yi(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[Rn])return!1;const i=e[Rn].initial;["height","width"].forEach((t=>{const n=i[t];U(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[Rn],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),o={attach:Vn,detach:zn,resize:Un}[e]||Yn;n[e]=o(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];if(!n)return;({attach:$n,detach:$n,resize:$n}[e]||Nn)(t,e,n),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return gi(t,e,i,n)}isAttached(t){const e=ai(t);return!(!e||!e.isConnected)}}class qn{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Ot(this.x)&&Ot(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function Xn(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),o=t._maxLength/i;return Math.floor(Math.min(n,o))}(t),o=Math.min(i.maxTicksLimit||n,n),r=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],s=r.length,a=r[0],l=r[s-1],c=[];if(s>o)return function(t,e,i,n){let o,r=0,s=i[0];for(n=Math.ceil(n),o=0;o<t.length;o++)o===s&&(e.push(t[o]),r++,s=i[r*n])}(e,c,r,s/o),c;const h=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),o=e.length/i;if(!n)return Math.max(o,1);const r=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=r.length-1;t<e;t++){const e=r[t];if(e>o)return e}return Math.max(o,1)}(r,e,o);if(s>0){let t,i;const n=s>1?Math.round((l-a)/(s-1)):null;for(Gn(e,c,h,U(n)?0:a-n,a),t=0,i=s-1;t<i;t++)Gn(e,c,h,r[t],r[t+1]);return Gn(e,c,h,l,U(n)?e.length:l+n),c}return Gn(e,c,h),c}function Gn(t,e,i,n,o){const r=X(n,0),s=Math.min(X(o,t.length),t.length);let a,l,c,h=0;for(i=Math.ceil(i),o&&(a=o-n,i=a/Math.floor(a/i)),c=r;c<0;)h++,c=Math.round(r+h*i);for(l=Math.max(r,0);l<s;l++)l===c&&(e.push(t[l]),h++,c=Math.round(r+h*i))}const Jn=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,Zn=(t,e)=>Math.min(e||t,t);function Qn(t,e){const i=[],n=t.length/e,o=t.length;let r=0;for(;r<o;r+=n)i.push(t[Math.floor(r)]);return i}function to(t,e,i){const n=t.ticks.length,o=Math.min(e,n-1),r=t._startPixel,s=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(o);if(!(i&&(l=1===n?Math.max(c-r,s-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(o-1))/2,c+=o<e?l:-l,c<r-a||c>s+a)))return c}function eo(t){return t.drawTicks?t.tickLength:0}function io(t,e){if(!t.display)return 0;const i=Ie(t.font,e),n=je(t.padding);return($(t.text)?t.text.length:1)*i.lineHeight+n.height}function no(t,e,i){let n=Ut(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class oo extends qn{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=q(t,Number.POSITIVE_INFINITY),e=q(e,Number.NEGATIVE_INFINITY),i=q(i,Number.POSITIVE_INFINITY),n=q(n,Number.NEGATIVE_INFINITY),{min:q(t,i),max:q(e,n),minDefined:K(t),maxDefined:K(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:o,maxDefined:r}=this.getUserBounds();if(o&&r)return{min:i,max:n};const s=this.getMatchingVisibleMetas();for(let a=0,l=s.length;a<l;++a)e=s[a].controller.getMinMax(this,t),o||(i=Math.min(i,e.min)),r||(n=Math.max(n,e.max));return i=r&&i>n?n:i,n=o&&i>n?i:n,{min:q(i,q(n,i)),max:q(n,q(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){J(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:o,ticks:r}=this.options,s=r.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:o}=t,r=G(e,(o-n)/2),s=(t,e)=>i&&0===t?0:t+e;return{min:s(n,-Math.abs(r)),max:s(o,r)}}(this,o,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=s<this.ticks.length;this._convertTicksToLabels(a?Qn(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(this.ticks=Xn(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){J(this.options.afterUpdate,[this])}beforeSetDimensions(){J(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){J(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),J(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){J(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,o;for(i=0,n=t.length;i<n;i++)o=t[i],o.label=J(e.callback,[o.value,i,t],this)}afterTickToLabelConversion(){J(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){J(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=Zn(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,o=e.maxRotation;let r,s,a,l=n;if(!this._isVisible()||!e.display||n>=o||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const c=this._getLabelSizes(),h=c.widest.width,u=c.highest.height,d=Tt(this.chart.width-h,0,this.maxWidth);r=t.offset?this.maxWidth/i:d/(i-1),h+6>r&&(r=d/(i-(t.offset?.5:1)),s=this.maxHeight-eo(t.grid)-e.padding-io(t.title,this.chart.options.font),a=Math.sqrt(h*h+u*u),l=Pt(Math.min(Math.asin(Tt((c.highest.height+6)/r,-1,1)),Math.asin(Tt(s/a,-1,1))-Math.asin(Tt(u/a,-1,1)))),l=Math.max(n,Math.min(o,l))),this.labelRotation=l}afterCalculateLabelRotation(){J(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){J(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:o}}=this,r=this._isVisible(),s=this.isHorizontal();if(r){const r=io(n,e.options.font);if(s?(t.width=this.maxWidth,t.height=eo(o)+r):(t.height=this.maxHeight,t.width=eo(o)+r),i.display&&this.ticks.length){const{first:e,last:n,widest:o,highest:r}=this._getLabelSizes(),a=2*i.padding,l=Mt(this.labelRotation),c=Math.cos(l),h=Math.sin(l);if(s){const e=i.mirror?0:h*o.width+c*r.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:c*o.width+h*r.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,h,c)}}this._handleMargins(),s?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:o,padding:r},position:s}=this.options,a=0!==this.labelRotation,l="top"!==s&&"x"===this.axis;if(this.isHorizontal()){const s=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,u=0;a?l?(h=n*t.width,u=i*e.height):(h=i*t.height,u=n*e.width):"start"===o?u=e.width:"end"===o?h=t.width:"inner"!==o&&(h=t.width/2,u=e.width/2),this.paddingLeft=Math.max((h-s+r)*this.width/(this.width-s),0),this.paddingRight=Math.max((u-c+r)*this.width/(this.width-c),0)}else{let i=e.height/2,n=t.height/2;"start"===o?(i=0,n=t.height):"end"===o&&(i=e.height,n=0),this.paddingTop=i+r,this.paddingBottom=n+r}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){J(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)U(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Qn(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:o}=this,r=[],s=[],a=Math.floor(e/Zn(e,i));let l,c,h,u,d,f,p,g,m,b,y,v=0,x=0;for(l=0;l<e;l+=a){if(u=t[l].label,d=this._resolveTickFontOptions(l),n.font=f=d.string,p=o[f]=o[f]||{data:{},gc:[]},g=d.lineHeight,m=b=0,U(u)||$(u)){if($(u))for(c=0,h=u.length;c<h;++c)y=u[c],U(y)||$(y)||(m=fe(n,p.data,p.gc,m,y),b+=g)}else m=fe(n,p.data,p.gc,m,u),b=g;r.push(m),s.push(b),v=Math.max(m,v),x=Math.max(b,x)}!function(t,e){Z(t,(t=>{const i=t.gc,n=i.length/2;let o;if(n>e){for(o=0;o<n;++o)delete t.data[i[o]];i.splice(0,n)}}))}(o,e);const _=r.indexOf(v),w=s.indexOf(x),k=t=>({width:r[t]||0,height:s[t]||0});return{first:k(0),last:k(e-1),widest:k(_),highest:k(w),widths:r,heights:s}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Tt(this._alignToPixels?ge(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Fe(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Fe(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Mt(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),o=this._getLabelSizes(),r=t.autoSkipPadding||0,s=o?o.widest.width+r:0,a=o?o.highest.height+r:0;return this.isHorizontal()?a*i>s*n?s/i:a/n:a*n<s*i?a/i:s/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:o,position:r,border:s}=n,a=o.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),h=eo(o),u=[],d=s.setContext(this.getContext()),f=d.display?d.width:0,p=f/2,g=function(t){return ge(i,t,f)};let m,b,y,v,x,_,w,k,O,S,M,P;if("top"===r)m=g(this.bottom),_=this.bottom-h,k=m-p,S=g(t.top)+p,P=t.bottom;else if("bottom"===r)m=g(this.top),S=t.top,P=g(t.bottom)-p,_=m+p,k=this.top+h;else if("left"===r)m=g(this.right),x=this.right-h,w=m-p,O=g(t.left)+p,M=t.right;else if("right"===r)m=g(this.left),O=t.left,M=g(t.right)-p,x=m+p,w=this.left+h;else if("x"===e){if("center"===r)m=g((t.top+t.bottom)/2+.5);else if(Y(r)){const t=Object.keys(r)[0],e=r[t];m=g(this.chart.scales[t].getPixelForValue(e))}S=t.top,P=t.bottom,_=m+p,k=_+h}else if("y"===e){if("center"===r)m=g((t.left+t.right)/2);else if(Y(r)){const t=Object.keys(r)[0],e=r[t];m=g(this.chart.scales[t].getPixelForValue(e))}x=m-p,w=x-h,O=t.left,M=t.right}const C=X(n.ticks.maxTicksLimit,c),A=Math.max(1,Math.ceil(c/C));for(b=0;b<c;b+=A){const t=this.getContext(b),e=o.setContext(t),n=s.setContext(t),r=e.lineWidth,c=e.color,h=n.dash||[],d=n.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;y=to(this,b,a),void 0!==y&&(v=ge(i,y,r),l?x=w=O=M=v:_=k=S=P=v,u.push({tx1:x,ty1:_,tx2:w,ty2:k,x1:O,y1:S,x2:M,y2:P,width:r,color:c,borderDash:h,borderDashOffset:d,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=c,this._borderValue=m,u}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:o}=i,r=this.isHorizontal(),s=this.ticks,{align:a,crossAlign:l,padding:c,mirror:h}=o,u=eo(i.grid),d=u+c,f=h?-c:d,p=-Mt(this.labelRotation),g=[];let m,b,y,v,x,_,w,k,O,S,M,P,C="middle";if("top"===n)_=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===n)_=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(u);w=t.textAlign,x=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(u);w=t.textAlign,x=t.x}else if("x"===e){if("center"===n)_=(t.top+t.bottom)/2+d;else if(Y(n)){const t=Object.keys(n)[0],e=n[t];_=this.chart.scales[t].getPixelForValue(e)+d}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)x=(t.left+t.right)/2-d;else if(Y(n)){const t=Object.keys(n)[0],e=n[t];x=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(u).textAlign}"y"===e&&("start"===a?C="top":"end"===a&&(C="bottom"));const A=this._getLabelSizes();for(m=0,b=s.length;m<b;++m){y=s[m],v=y.label;const t=o.setContext(this.getContext(m));k=this.getPixelForTick(m)+o.labelOffset,O=this._resolveTickFontOptions(m),S=O.lineHeight,M=$(v)?v.length:1;const e=M/2,i=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let u,d=w;if(r?(x=k,"inner"===w&&(d=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),P="top"===n?"near"===l||0!==p?-M*S+S/2:"center"===l?-A.highest.height/2-e*S+S:-A.highest.height+S/2:"near"===l||0!==p?S/2:"center"===l?A.highest.height/2-e*S:A.highest.height-M*S,h&&(P*=-1),0===p||t.showLabelBackdrop||(x+=S/2*Math.sin(p))):(_=k,P=(1-M)*S/2),t.showLabelBackdrop){const e=je(t.backdropPadding),i=A.heights[m],n=A.widths[m];let o=P-e.top,r=0-e.left;switch(C){case"middle":o-=i/2;break;case"bottom":o-=i}switch(w){case"center":r-=n/2;break;case"right":r-=n}u={left:r,top:o,width:n+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:v,font:O,textOffset:P,options:{rotation:p,color:i,strokeColor:a,strokeWidth:c,textAlign:d,textBaseline:C,translation:[x,_],backdrop:u}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Mt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:o}}=this.options,r=t+o,s=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+o,"near"===i?a="left":"center"===i?(a="center",l+=s/2):(a="right",l+=s)):(l=this.right-r,"near"===i?a="right":"center"===i?(a="center",l-=s/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+o,"near"===i?a="right":"center"===i?(a="center",l-=s/2):(a="left",l-=s)):(l=this.left+r,"near"===i?a="left":"center"===i?(a="center",l+=s/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:o,height:r}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,o,r),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let o,r;const s=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(o=0,r=n.length;o<r;++o){const t=n[o];e.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,o=i.setContext(this.getContext()),r=i.display?o.width:0;if(!r)return;const s=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,h,u;this.isHorizontal()?(l=ge(t,this.left,r)-r/2,c=ge(t,this.right,s)+s/2,h=u=a):(h=ge(t,this.top,r)-r/2,u=ge(t,this.bottom,s)+s/2,l=c=a),e.save(),e.lineWidth=o.width,e.strokeStyle=o.color,e.beginPath(),e.moveTo(l,h),e.lineTo(c,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&xe(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;Me(e,t.label,0,t.textOffset,n,i)}i&&_e(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const o=Ie(i.font),r=je(i.padding),s=i.align;let a=o.lineHeight/2;"bottom"===e||"center"===e||Y(e)?(a+=r.bottom,$(i.text)&&(a+=o.lineHeight*(i.text.length-1))):a+=r.top;const{titleX:l,titleY:c,maxWidth:h,rotation:u}=function(t,e,i,n){const{top:o,left:r,bottom:s,right:a,chart:l}=t,{chartArea:c,scales:h}=l;let u,d,f,p=0;const g=s-o,m=a-r;if(t.isHorizontal()){if(d=$t(n,r,a),Y(i)){const t=Object.keys(i)[0],n=i[t];f=h[t].getPixelForValue(n)+g-e}else f="center"===i?(c.bottom+c.top)/2+g-e:Jn(t,i,e);u=a-r}else{if(Y(i)){const t=Object.keys(i)[0],n=i[t];d=h[t].getPixelForValue(n)-m+e}else d="center"===i?(c.left+c.right)/2-m+e:Jn(t,i,e);f=$t(n,s,o),p="left"===i?-bt:bt}return{titleX:d,titleY:f,maxWidth:u,rotation:p}}(this,a,e,s);Me(t,i.text,0,0,o,{color:i.color,maxWidth:h,rotation:u,textAlign:no(s,e,n),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=X(t.grid&&t.grid.z,-1),n=X(t.border&&t.border.z,0);return this._isVisible()&&this.draw===oo.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let o,r;for(o=0,r=e.length;o<r;++o){const r=e[o];r[i]!==this.id||t&&r.type!==t||n.push(r)}return n}_resolveTickFontOptions(t){return Ie(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class ro{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,o=t.id,r=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in n||(n[o]=t,function(t,e,i){const n=nt(Object.create(null),[i?de.get(i):{},de.get(e),t.defaults]);de.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),o=n.pop(),r=[t].concat(n).join("."),s=e[i].split("."),a=s.pop(),l=s.join(".");de.route(r,o,l,a)}))}(e,t.defaultRoutes);t.descriptors&&de.describe(e,t.descriptors)}(t,r,i),this.override&&de.override(t.id,t.overrides)),r}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in de[n]&&(delete de[n][i],this.override&&delete ae[i])}}class so{constructor(){this.controllers=new ro(Xi,"datasets",!0),this.elements=new ro(qn,"elements"),this.plugins=new ro(Object,"plugins"),this.scales=new ro(oo,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):Z(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=lt(t);J(i["before"+n],[],i),e[t](i),J(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var ao=new so;class lo{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const o=n?this._descriptors(t).filter(n):this._descriptors(t),r=this._notify(o,t,e,i);return"afterDestroy"===e&&(this._notify(o,t,"stop"),this._notify(this._init,t,"uninstall")),r}_notify(t,e,i,n){n=n||{};for(const o of t){const t=o.plugin;if(!1===J(t[i],[e,n,o.options],t)&&n.cancelable)return!1}return!0}invalidate(){U(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=X(i.options&&i.options.plugins,{}),o=function(t){const e={},i=[],n=Object.keys(ao.plugins.items);for(let t=0;t<n.length;t++)i.push(ao.getPlugin(n[t]));const o=t.plugins||[];for(let t=0;t<o.length;t++){const n=o[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,o){const r=[],s=t.getContext();for(const a of e){const e=a.id,l=co(n[e],o);null!==l&&r.push({plugin:a,options:ho(t.config,{plugin:a,local:i[e]},l,s)})}return r}(t,o,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function co(t,e){return e||!1!==t?!0===t?{}:t:null}function ho(t,{plugin:e,local:i},n,o){const r=t.pluginScopeKeys(e),s=t.getOptionScopes(n,r);return i&&e.defaults&&s.push(e.defaults),t.createResolver(s,o,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function uo(t,e){const i=de.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function fo(t){if("x"===t||"y"===t||"r"===t)return t}function po(t,...e){if(fo(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&fo(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function go(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function mo(t,e){const i=ae[t.type]||{scales:{}},n=e.scales||{},o=uo(t.type,e),r=Object.create(null);return Object.keys(n).forEach((e=>{const s=n[e];if(!Y(s))return console.error(`Invalid scale configuration for scale: ${e}`);if(s._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=po(e,s,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return go(t,"x",i[0])||go(t,"y",i[0])}return{}}(e,t),de.scales[s.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,o),c=i.scales||{};r[e]=ot(Object.create(null),[{axis:a},s,c[a],c[l]])})),t.data.datasets.forEach((i=>{const o=i.type||t.type,s=i.indexAxis||uo(o,e),a=(ae[o]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,s),o=i[e+"AxisID"]||e;r[o]=r[o]||Object.create(null),ot(r[o],[{axis:e},n[o],a[t]])}))})),Object.keys(r).forEach((t=>{const e=r[t];ot(e,[de.scales[e.type],de.scale])})),r}function bo(t){const e=t.options||(t.options={});e.plugins=X(e.plugins,{}),e.scales=mo(t,e)}function yo(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const vo=new Map,xo=new Set;function _o(t,e){let i=vo.get(t);return i||(i=e(),vo.set(t,i),xo.add(i)),i}const wo=(t,e,i)=>{const n=at(e,i);void 0!==n&&t.add(n)};class ko{constructor(t){this._config=function(t){return(t=t||{}).data=yo(t.data),bo(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=yo(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),bo(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return _o(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return _o(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return _o(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return _o(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:o}=this,r=this._cachedScopes(t,i),s=r.get(e);if(s)return s;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>wo(a,t,e)))),e.forEach((t=>wo(a,n,t))),e.forEach((t=>wo(a,ae[o]||{},t))),e.forEach((t=>wo(a,de,t))),e.forEach((t=>wo(a,le,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),xo.has(e)&&r.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,ae[e]||{},de.datasets[e]||{},{type:e},de,le]}resolveNamedOptions(t,e,i,n=[""]){const o={$shared:!0},{resolver:r,subPrefixes:s}=Oo(this._resolverCache,t,n);let a=r;if(function(t,e){const{isScriptable:i,isIndexable:n}=Be(t);for(const o of e){const e=i(o),r=n(o),s=(r||e)&&t[o];if(e&&(ht(s)||So(s))||r&&$(s))return!0}return!1}(r,e)){o.$shared=!1;a=ze(r,i=ht(i)?i():i,this.createResolver(t,i,s))}for(const t of e)o[t]=a[t];return o}createResolver(t,e,i=[""],n){const{resolver:o}=Oo(this._resolverCache,t,i);return Y(e)?ze(o,e,void 0,n):o}}function Oo(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const o=i.join();let r=n.get(o);if(!r){r={resolver:Ve(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(o,r)}return r}const So=t=>Y(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||ht(t[i])),!1);const Mo=["top","bottom","left","right","chartArea"];function Po(t,e){return"top"===t||"bottom"===t||-1===Mo.indexOf(t)&&"x"===e}function Co(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Ao(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),J(i&&i.onComplete,[t],e)}function Lo(t){const e=t.chart,i=e.options.animation;J(i&&i.onProgress,[t],e)}function Eo(t){return si()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Do={},Ro=t=>{const e=Eo(t);return Object.values(Do).filter((t=>t.canvas===e)).pop()};function To(t,e,i){const n=Object.keys(t);for(const o of n){const n=+o;if(n>=e){const r=t[o];delete t[o],(i>0||n>e)&&(t[n+i]=r)}}}class jo{static defaults=de;static instances=Do;static overrides=ae;static registry=ao;static version="4.3.0";static getChart=Ro;static register(...t){ao.add(...t),Io()}static unregister(...t){ao.remove(...t),Io()}constructor(t,e){const i=this.config=new ko(e),n=Eo(t),o=Ro(n);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas with ID '"+o.canvas.id+"' can be reused.");const r=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!si()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Dn:Kn}(n)),this.platform.updateConfig(i);const s=this.platform.acquireContext(n,r.aspectRatio),a=s&&s.canvas,l=a&&a.height,c=a&&a.width;this.id=W(),this.ctx=s,this.canvas=a,this.width=c,this.height=l,this._options=r,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new lo,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),r.resizeDelay||0),this._dataChanges=[],Do[this.id]=this,s&&a?(Ri.listen(this,"complete",Ao),Ri.listen(this,"progress",Lo),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:o}=this;return U(t)?e&&o?o:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return ao}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():mi(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return me(this.canvas,this.ctx),this}stop(){return Ri.stop(this),this}resize(t,e){Ri.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,o=i.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(n,t,e,o),s=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,mi(this,s,!0)&&(this.notifyPlugins("resize",{size:r}),J(i.onResize,[this,r],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){Z(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];e&&(o=o.concat(Object.keys(e).map((t=>{const i=e[t],n=po(t,i),o="r"===n,r="x"===n;return{options:i,dposition:o?"chartArea":r?"bottom":"left",dtype:o?"radialLinear":r?"category":"linear"}})))),Z(o,(e=>{const o=e.options,r=o.id,s=po(r,o),a=X(o.type,e.dtype);void 0!==o.position&&Po(o.position,s)===Po(e.dposition)||(o.position=e.dposition),n[r]=!0;let l=null;if(r in i&&i[r].type===a)l=i[r];else{l=new(ao.getScale(a))({id:r,type:a,ctx:this.ctx,chart:this}),i[l.id]=l}l.init(o,t)})),Z(n,((t,e)=>{t||delete i[e]})),Z(i,(t=>{Ln.configure(this,t,t.options),Ln.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Co("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let o=this.getDatasetMeta(i);const r=n.type||this.config.type;if(o.type&&o.type!==r&&(this._destroyDatasetMeta(i),o=this.getDatasetMeta(i)),o.type=r,o.indexAxis=n.indexAxis||uo(r,this.options),o.order=n.order||0,o.index=i,o.label=""+n.label,o.visible=this.isDatasetVisible(i),o.controller)o.controller.updateIndex(i),o.controller.linkScales();else{const e=ao.getController(r),{datasetElementType:n,dataElementType:s}=de.datasets[r];Object.assign(e,{dataElementType:ao.getElement(s),datasetElementType:n&&ao.getElement(n)}),o.controller=new e(this,i),t.push(o.controller)}}return this._updateMetasets(),t}_resetElements(){Z(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===o.indexOf(e);e.buildOrUpdateElements(i),r=Math.max(+e.getMaxOverflow(),r)}r=this._minPadding=i.layout.autoPadding?r:0,this._updateLayout(r),n||Z(o,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Co("z","_idx"));const{_active:s,_lastEvent:a}=this;a?this._eventHandler(a,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){Z(this.scales,(t=>{Ln.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);ut(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:o}of e){To(t,n,"_removeElements"===i?-o:o)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!ut(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ln.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],Z(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,ht(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Ri.has(this)?this.attached&&!Ri.running(this)&&Ri.start(this):(this.draw(),Ao({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];t&&!o.visible||i.push(o)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,o=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,r={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",r)&&(n&&xe(e,{left:!1===i.left?0:o.left-i.left,right:!1===i.right?this.width:o.right+i.right,top:!1===i.top?0:o.top-i.top,bottom:!1===i.bottom?this.height:o.bottom+i.bottom}),t.controller.draw(),n&&_e(e),r.cancelable=!1,this.notifyPlugins("afterDatasetDraw",r))}isPointInArea(t){return ve(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const o=bn.modes[e];return"function"==typeof o?o(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=Fe(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",o=this.getDatasetMeta(t),r=o.controller._resolveAnimations(void 0,n);ct(e)?(o.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),r.update(o,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Ri.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),me(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Do[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};Z(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},o=(t,e)=>{this.canvas&&this.resize(t,e)};let r;const s=()=>{n("attach",s),this.attached=!0,this.resize(),i("resize",o),i("detach",r)};r=()=>{this.attached=!1,n("resize",o),this._stop(),this._resize(0,0),i("attach",s)},e.isAttached(this.canvas)?s():r()}unbindEvents(){Z(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},Z(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let o,r,s,a;for("dataset"===e&&(o=this.getDatasetMeta(t[0].datasetIndex),o.controller["_"+n+"DatasetHoverStyle"]()),s=0,a=t.length;s<a;++s){r=t[s];const e=r&&this.getDatasetMeta(r.datasetIndex).controller;e&&e[n+"HoverStyle"](r.element,r.datasetIndex,r.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!Q(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,o=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),r=o(e,t),s=i?t:o(t,e);r.length&&this.updateHoverStyle(r,n.mode,!1),s.length&&n.mode&&this.updateHoverStyle(s,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const o=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(o||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:o}=this,r=e,s=this._getActiveElements(t,n,i,r),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,J(o.onHover,[t,s,this],this),a&&J(o.onClick,[t,s,this],this));const c=!Q(s,n);return(c||e)&&(this._active=s,this._updateHoverStyles(s,n,e)),this._lastEvent=l,c}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const o=this.options.hover;return this.getElementsAtEventForMode(t,o.mode,o,n)}}function Io(){return Z(jo.instances,(t=>t._plugins.invalidate()))}function No(t,e,i,n){const o=De(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const r=(i-e)/2,s=Math.min(r,n*e/2),a=t=>{const e=(i-Math.min(r,t))*n/2;return Tt(t,0,Math.min(r,e))};return{outerStart:a(o.outerStart),outerEnd:a(o.outerEnd),innerStart:Tt(o.innerStart,0,s),innerEnd:Tt(o.innerEnd,0,s)}}function Fo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function Vo(t,e,i,n,o,r){const{x:s,y:a,startAngle:l,pixelMargin:c,innerRadius:h}=e,u=Math.max(e.outerRadius+n+i-c,0),d=h>0?h+n+i+c:0;let f=0;const p=o-l;if(n){const t=((h>0?h-n:0)+(u>0?u-n:0))/2;f=(p-(0!==t?p*t/(t+n):p))/2}const g=(p-Math.max(.001,p*u-i/dt)/u)/2,m=l+g+f,b=o-g-f,{outerStart:y,outerEnd:v,innerStart:x,innerEnd:_}=No(e,d,u,b-m),w=u-y,k=u-v,O=m+y/w,S=b-v/k,M=d+x,P=d+_,C=m+x/M,A=b-_/P;if(t.beginPath(),r){const e=(O+S)/2;if(t.arc(s,a,u,O,e),t.arc(s,a,u,e,S),v>0){const e=Fo(k,S,s,a);t.arc(e.x,e.y,v,S,b+bt)}const i=Fo(P,b,s,a);if(t.lineTo(i.x,i.y),_>0){const e=Fo(P,A,s,a);t.arc(e.x,e.y,_,b+bt,A+Math.PI)}const n=(b-_/d+(m+x/d))/2;if(t.arc(s,a,d,b-_/d,n,!0),t.arc(s,a,d,n,m+x/d,!0),x>0){const e=Fo(M,C,s,a);t.arc(e.x,e.y,x,C+Math.PI,m-bt)}const o=Fo(w,m,s,a);if(t.lineTo(o.x,o.y),y>0){const e=Fo(w,O,s,a);t.arc(e.x,e.y,y,m-bt,O)}}else{t.moveTo(s,a);const e=Math.cos(O)*u+s,i=Math.sin(O)*u+a;t.lineTo(e,i);const n=Math.cos(S)*u+s,o=Math.sin(S)*u+a;t.lineTo(n,o)}t.closePath()}function zo(t,e,i,n,o){const{fullCircles:r,startAngle:s,circumference:a,options:l}=e,{borderWidth:c,borderJoinStyle:h,borderDash:u,borderDashOffset:d}=l,f="inner"===l.borderAlign;if(!c)return;t.setLineDash(u||[]),t.lineDashOffset=d,f?(t.lineWidth=2*c,t.lineJoin=h||"round"):(t.lineWidth=c,t.lineJoin=h||"bevel");let p=e.endAngle;if(r){Vo(t,e,i,n,p,o);for(let e=0;e<r;++e)t.stroke();isNaN(a)||(p=s+(a%ft||ft))}f&&function(t,e,i){const{startAngle:n,pixelMargin:o,x:r,y:s,outerRadius:a,innerRadius:l}=e;let c=o/a;t.beginPath(),t.arc(r,s,a,n-c,i+c),l>o?(c=o/l,t.arc(r,s,l,i+c,n-c,!0)):t.arc(r,s,o,i+bt,n-bt),t.closePath(),t.clip()}(t,e,p),r||(Vo(t,e,i,n,p,o),t.stroke())}function Bo(t,e,i=e){t.lineCap=X(i.borderCapStyle,e.borderCapStyle),t.setLineDash(X(i.borderDash,e.borderDash)),t.lineDashOffset=X(i.borderDashOffset,e.borderDashOffset),t.lineJoin=X(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=X(i.borderWidth,e.borderWidth),t.strokeStyle=X(i.borderColor,e.borderColor)}function Ho(t,e,i){t.lineTo(i.x,i.y)}function Wo(t,e,i={}){const n=t.length,{start:o=0,end:r=n-1}=i,{start:s,end:a}=e,l=Math.max(o,s),c=Math.min(r,a),h=o<s&&r<s||o>a&&r>a;return{count:n,start:l,loop:e.loop,ilen:c<l&&!h?n+c-l:c-l}}function Uo(t,e,i,n){const{points:o,options:r}=e,{count:s,start:a,loop:l,ilen:c}=Wo(o,i,n),h=function(t){return t.stepped?we:t.tension||"monotone"===t.cubicInterpolationMode?ke:Ho}(r);let u,d,f,{move:p=!0,reverse:g}=n||{};for(u=0;u<=c;++u)d=o[(a+(g?c-u:u))%s],d.skip||(p?(t.moveTo(d.x,d.y),p=!1):h(t,f,d,g,r.stepped),f=d);return l&&(d=o[(a+(g?c:0))%s],h(t,f,d,g,r.stepped)),!!l}function $o(t,e,i,n){const o=e.points,{count:r,start:s,ilen:a}=Wo(o,i,n),{move:l=!0,reverse:c}=n||{};let h,u,d,f,p,g,m=0,b=0;const y=t=>(s+(c?a-t:t))%r,v=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(u=o[y(0)],t.moveTo(u.x,u.y)),h=0;h<=a;++h){if(u=o[y(h)],u.skip)continue;const e=u.x,i=u.y,n=0|e;n===d?(i<f?f=i:i>p&&(p=i),m=(b*m+e)/++b):(v(),t.lineTo(e,i),d=n,b=0,f=p=i),g=i}v()}function Yo(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?$o:Uo}const Ko="function"==typeof Path2D;function qo(t,e,i,n){Ko&&!e.options.segment?function(t,e,i,n){let o=e._path;o||(o=e._path=new Path2D,e.path(o,i,n)&&o.closePath()),Bo(t,e.options),t.stroke(o)}(t,e,i,n):function(t,e,i,n){const{segments:o,options:r}=e,s=Yo(e);for(const a of o)Bo(t,r,a.style),t.beginPath(),s(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}class Xo extends qn{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;ri(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,o=i.length;if(!o)return[];const r=!!t._loop,{start:s,end:a}=function(t,e,i,n){let o=0,r=e-1;if(i&&!n)for(;o<e&&!t[o].skip;)o++;for(;o<e&&t[o].skip;)o++;for(o%=e,i&&(r+=o);r>o&&t[r%e].skip;)r--;return r%=e,{start:o,end:r}}(i,o,r,n);return Ai(t,!0===n?[{start:s,end:a,loop:r}]:function(t,e,i,n){const o=t.length,r=[];let s,a=e,l=t[e];for(s=e+1;s<=i;++s){const i=t[s%o];i.skip||i.stop?l.skip||(n=!1,r.push({start:e%o,end:(s-1)%o,loop:n}),e=a=i.stop?s:null):(a=s,l.skip&&(e=s)),l=i}return null!==a&&r.push({start:e%o,end:a%o,loop:n}),r}(i,s,a<s?a+o:a,!!t._fullLoop&&0===s&&a===o-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],o=this.points,r=Ci(this,{property:e,start:n,end:n});if(!r.length)return;const s=[],a=function(t){return t.stepped?xi:t.tension||"monotone"===t.cubicInterpolationMode?_i:vi}(i);let l,c;for(l=0,c=r.length;l<c;++l){const{start:c,end:h}=r[l],u=o[c],d=o[h];if(u===d){s.push(u);continue}const f=a(u,d,Math.abs((n-u[e])/(d[e]-u[e])),i.stepped);f[e]=t[e],s.push(f)}return 1===s.length?s[0]:s}pathSegment(t,e,i){return Yo(this)(t,this,e,i)}path(t,e,i){const n=this.segments,o=Yo(this);let r=this._loop;e=e||0,i=i||this.points.length-e;for(const s of n)r&=o(t,this,s,{start:e,end:e+i-1});return!!r}draw(t,e,i,n){const o=this.options||{};(this.points||[]).length&&o.borderWidth&&(t.save(),qo(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Go(t,e,i,n){const o=t.options,{[i]:r}=t.getProps([i],n);return Math.abs(e-r)<o.radius+o.hitRadius}function Jo(t,e){const{x:i,y:n,base:o,width:r,height:s}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,u;return t.horizontal?(u=s/2,a=Math.min(i,o),l=Math.max(i,o),c=n-u,h=n+u):(u=r/2,a=i-u,l=i+u,c=Math.min(n,o),h=Math.max(n,o)),{left:a,top:c,right:l,bottom:h}}function Zo(t,e,i,n){return t?0:Tt(e,i,n)}function Qo(t){const e=Jo(t),i=e.right-e.left,n=e.bottom-e.top,o=function(t,e,i){const n=t.options.borderWidth,o=t.borderSkipped,r=Re(n);return{t:Zo(o.top,r.top,0,i),r:Zo(o.right,r.right,0,e),b:Zo(o.bottom,r.bottom,0,i),l:Zo(o.left,r.left,0,e)}}(t,i/2,n/2),r=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,r=Te(o),s=Math.min(e,i),a=t.borderSkipped,l=n||Y(o);return{topLeft:Zo(!l||a.top||a.left,r.topLeft,0,s),topRight:Zo(!l||a.top||a.right,r.topRight,0,s),bottomLeft:Zo(!l||a.bottom||a.left,r.bottomLeft,0,s),bottomRight:Zo(!l||a.bottom||a.right,r.bottomRight,0,s)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:r},inner:{x:e.left+o.l,y:e.top+o.t,w:i-o.l-o.r,h:n-o.t-o.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,r.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(o.b,o.r))}}}}function tr(t,e,i,n){const o=null===e,r=null===i,s=t&&!(o&&r)&&Jo(t,n);return s&&(o||jt(e,s.left,s.right))&&(r||jt(i,s.top,s.bottom))}function er(t,e){t.rect(e.x,e.y,e.w,e.h)}function ir(t,e,i={}){const n=t.x!==i.x?-e:0,o=t.y!==i.y?-e:0,r=(t.x+t.w!==i.x+i.w?e:0)-n,s=(t.y+t.h!==i.y+i.h?e:0)-o;return{x:t.x+n,y:t.y+o,w:t.w+r,h:t.h+s,radius:t.radius}}var nr=Object.freeze({__proto__:null,ArcElement:class extends qn{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:o,distance:r}=At(n,{x:t,y:e}),{startAngle:s,endAngle:a,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=(this.options.spacing+this.options.borderWidth)/2,d=X(h,a-s)>=ft||Rt(o,s,a),f=jt(r,l+u,c+u);return d&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:o,innerRadius:r,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,c=(n+o)/2,h=(r+s+l+a)/2;return{x:e+Math.cos(c)*h,y:i+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,o=(e.spacing||0)/2,r=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>ft?Math.floor(i/ft):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const s=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(s)*n,Math.sin(s)*n);const a=n*(1-Math.sin(Math.min(dt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,o){const{fullCircles:r,startAngle:s,circumference:a}=e;let l=e.endAngle;if(r){Vo(t,e,i,n,l,o);for(let e=0;e<r;++e)t.fill();isNaN(a)||(l=s+(a%ft||ft))}Vo(t,e,i,n,l,o),t.fill()}(t,this,a,o,r),zo(t,this,a,o,r),t.restore()}},BarElement:class extends qn{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:o,outer:r}=Qo(this),s=(a=r.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Pe:er;var a;t.save(),r.w===o.w&&r.h===o.h||(t.beginPath(),s(t,ir(r,e,o)),t.clip(),s(t,ir(o,-e,r)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),s(t,ir(o,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return tr(this,t,e,i)}inXRange(t,e){return tr(this,t,null,e)}inYRange(t,e){return tr(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:o}=this.getProps(["x","y","base","horizontal"],t);return{x:o?(e+n)/2:e,y:o?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:Xo,PointElement:class extends qn{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:o,y:r}=this.getProps(["x","y"],i);return Math.pow(t-o,2)+Math.pow(e-r,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Go(this,t,"x",e)}inYRange(t,e){return Go(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!ve(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,be(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const or=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],rr=or.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function sr(t){return or[t%or.length]}function ar(t){return rr[t%rr.length]}function lr(t){let e=0;return(i,n)=>{const o=t.getDatasetMeta(n).controller;o instanceof rn?e=function(t,e){return t.backgroundColor=t.data.map((()=>sr(e++))),e}(i,e):o instanceof sn?e=function(t,e){return t.backgroundColor=t.data.map((()=>ar(e++))),e}(i,e):o&&(e=function(t,e){return t.borderColor=sr(e),t.backgroundColor=ar(e),++e}(i,e))}}function cr(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var hr={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:o}=t.config,{elements:r}=o;if(!i.forceOverride&&(cr(n)||(s=o)&&(s.borderColor||s.backgroundColor)||r&&cr(r)))return;var s;const a=lr(t);n.forEach(a)}};function ur(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function dr(t){t.data.datasets.forEach((t=>{ur(t)}))}var fr={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void dr(t);const n=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:r,indexAxis:s}=e,a=t.getDatasetMeta(o),l=r||e.data;if("y"===Ne([s,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const c=t.scales[a.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let{start:h,count:u}=function(t,e){const i=e.length;let n,o=0;const{iScale:r}=t,{min:s,max:a,minDefined:l,maxDefined:c}=r.getUserBounds();return l&&(o=Tt(Nt(e,r.axis,s).lo,0,i-1)),n=c?Tt(Nt(e,r.axis,a).hi+1,o,i)-o:i-o,{start:o,count:n}}(a,l);if(u<=(i.threshold||4*n))return void ur(e);let d;switch(U(r)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,n,o){const r=o.samples||n;if(r>=i)return t.slice(e,e+i);const s=[],a=(i-2)/(r-2);let l=0;const c=e+i-1;let h,u,d,f,p,g=e;for(s[l++]=t[g],h=0;h<r-2;h++){let n,o=0,r=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,i)+e,b=m-c;for(n=c;n<m;n++)o+=t[n].x,r+=t[n].y;o/=b,r/=b;const y=Math.floor(h*a)+1+e,v=Math.min(Math.floor((h+1)*a)+1,i)+e,{x,y:_}=t[g];for(d=f=-1,n=y;n<v;n++)f=.5*Math.abs((x-o)*(t[n].y-_)-(x-t[n].x)*(r-_)),f>d&&(d=f,u=t[n],p=n);s[l++]=u,g=p}return s[l++]=t[c],s}(l,h,u,n,i);break;case"min-max":d=function(t,e,i,n){let o,r,s,a,l,c,h,u,d,f,p=0,g=0;const m=[],b=e+i-1,y=t[e].x,v=t[b].x-y;for(o=e;o<e+i;++o){r=t[o],s=(r.x-y)/v*n,a=r.y;const e=0|s;if(e===l)a<d?(d=a,c=o):a>f&&(f=a,h=o),p=(g*p+r.x)/++g;else{const i=o-1;if(!U(c)&&!U(h)){const e=Math.min(c,h),n=Math.max(c,h);e!==u&&e!==i&&m.push({...t[e],x:p}),n!==u&&n!==i&&m.push({...t[n],x:p})}o>0&&i!==u&&m.push(t[i]),m.push(r),l=e,g=0,d=f=a,c=h=u=o}}return m}(l,h,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}))},destroy(t){dr(t)}};function pr(t,e,i,n){if(n)return;let o=e[t],r=i[t];return"angle"===t&&(o=Dt(o),r=Dt(r)),{property:t,start:o,end:r}}function gr(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function mr(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function br(t,e){let i=[],n=!1;return $(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},o=e.points,r=[];return e.segments.forEach((({start:t,end:e})=>{e=gr(t,e,o);const s=o[t],a=o[e];null!==n?(r.push({x:s.x,y:n}),r.push({x:a.x,y:n})):null!==i&&(r.push({x:i,y:s.y}),r.push({x:i,y:a.y}))})),r}(t,e),i.length?new Xo({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function yr(t){return t&&!1!==t.fill}function vr(t,e,i){let n=t[e].fill;const o=[e];let r;if(!i)return n;for(;!1!==n&&-1===o.indexOf(n);){if(!K(n))return n;if(r=t[n],!r)return!1;if(r.visible)return n;o.push(n),n=r.fill}return!1}function xr(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=X(i&&i.target,i);void 0===n&&(n=!!e.backgroundColor);if(!1===n||null===n)return!1;if(!0===n)return"origin";return n}(t);if(Y(n))return!isNaN(n.value)&&n;let o=parseFloat(n);return K(o)&&Math.floor(o)===o?function(t,e,i,n){"-"!==t&&"+"!==t||(i=e+i);if(i===e||i<0||i>=n)return!1;return i}(n[0],e,o,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function _r(t,e,i){const n=[];for(let o=0;o<i.length;o++){const r=i[o],{first:s,last:a,point:l}=wr(r,e,"x");if(!(!l||s&&a))if(s)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function wr(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const o=n[i],r=t.segments,s=t.points;let a=!1,l=!1;for(let t=0;t<r.length;t++){const e=r[t],n=s[e.start][i],c=s[e.end][i];if(jt(o,n,c)){a=o===n,l=o===c;break}}return{first:a,last:l,point:n}}class kr{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:o,radius:r}=this;return e=e||{start:0,end:ft},t.arc(n,o,r,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,o=t.angle;return{x:e+Math.cos(o)*n,y:i+Math.sin(o)*n,angle:o}}}function Or(t){const{chart:e,fill:i,line:n}=t;if(K(i))return function(t,e){const i=t.getDatasetMeta(e),n=i&&t.isDatasetVisible(e);return n?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,o=[],r=n.segments,s=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const o=n[t];if(o.index===e)break;o.hidden||i.unshift(o.dataset)}return i}(e,i);a.push(br({x:null,y:e.bottom},n));for(let t=0;t<r.length;t++){const e=r[t];for(let t=e.start;t<=e.end;t++)_r(o,s[t],a)}return new Xo({points:o,options:{}})}(t);if("shape"===i)return!0;const o=function(t){const e=t.scale||{};if(e.getPointPositionForValue)return function(t){const{scale:e,fill:i}=t,n=e.options,o=e.getLabels().length,r=n.reverse?e.max:e.min,s=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:Y(t)?t.value:e.getBaseValue(),n}(i,e,r),a=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,r);return new kr({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(s)})}for(let t=0;t<o;++t)a.push(e.getPointPositionForValue(t,s));return a}(t);return function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:Y(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(K(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return o instanceof kr?o:br(o,n)}function Sr(t,e,i){const n=Or(e),{line:o,scale:r,axis:s}=e,a=o.options,l=a.fill,c=a.backgroundColor,{above:h=c,below:u=c}=l||{};n&&o.points.length&&(xe(t,i),function(t,e){const{line:i,target:n,above:o,below:r,area:s,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&r!==o&&(Mr(t,n,s.top),Pr(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore(),t.save(),Mr(t,n,s.bottom));Pr(t,{line:i,target:n,color:r,scale:a,property:l}),t.restore()}(t,{line:o,target:n,above:h,below:u,area:i,scale:r,axis:s}),_e(t))}function Mr(t,e,i){const{segments:n,points:o}=e;let r=!0,s=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,c=o[n],h=o[gr(n,l,o)];r?(t.moveTo(c.x,c.y),r=!1):(t.lineTo(c.x,i),t.lineTo(c.x,c.y)),s=!!e.pathSegment(t,a,{move:s}),s?t.closePath():t.lineTo(h.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Pr(t,e){const{line:i,target:n,property:o,color:r,scale:s}=e,a=function(t,e,i){const n=t.segments,o=t.points,r=e.points,s=[];for(const t of n){let{start:n,end:a}=t;a=gr(n,a,o);const l=pr(i,o[n],o[a],t.loop);if(!e.segments){s.push({source:t,target:l,start:o[n],end:o[a]});continue}const c=Ci(e,l);for(const e of c){const n=pr(i,r[e.start],r[e.end],e.loop),a=Pi(t,o,n);for(const t of a)s.push({source:t,target:e,start:{[i]:mr(l,n,"start",Math.max)},end:{[i]:mr(l,n,"end",Math.min)}})}}return s}(i,n,o);for(const{source:e,target:l,start:c,end:h}of a){const{style:{backgroundColor:a=r}={}}=e,u=!0!==n;t.save(),t.fillStyle=a,Cr(t,s,u&&pr(o,c,h)),t.beginPath();const d=!!i.pathSegment(t,e);let f;if(u){d?t.closePath():Ar(t,n,h,o);const e=!!n.pathSegment(t,l,{move:d,reverse:!0});f=d&&e,f||Ar(t,n,c,o)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Cr(t,e,i){const{top:n,bottom:o}=e.chart.chartArea,{property:r,start:s,end:a}=i||{};"x"===r&&(t.beginPath(),t.rect(s,n,a-s,o-n),t.clip())}function Ar(t,e,i,n){const o=e.interpolate(i,n);o&&t.lineTo(o.x,o.y)}var Lr={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,o=[];let r,s,a,l;for(s=0;s<n;++s)r=t.getDatasetMeta(s),a=r.dataset,l=null,a&&a.options&&a instanceof Xo&&(l={visible:t.isDatasetVisible(s),index:s,fill:xr(a,s,n),chart:t,axis:r.controller.options.indexAxis,scale:r.vScale,line:a}),r.$filler=l,o.push(l);for(s=0;s<n;++s)l=o[s],l&&!1!==l.fill&&(l.fill=vr(o,s,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,o=t.getSortedVisibleDatasetMetas(),r=t.chartArea;for(let e=o.length-1;e>=0;--e){const i=o[e].$filler;i&&(i.line.updateControlPoints(r,i.axis),n&&i.fill&&Sr(t.ctx,i,r))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;yr(i)&&Sr(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;yr(n)&&"beforeDatasetDraw"===i.drawTime&&Sr(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Er=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class Dr extends qn{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=J(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=Ie(i.font),o=n.size,r=this._computeTitleHeight(),{boxWidth:s,itemHeight:a}=Er(i,o);let l,c;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(r,o,s,a)+10):(c=this.maxHeight,l=this._fitCols(r,n,s,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:o,maxWidth:r,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=n+s;let h=t;o.textAlign="left",o.textBaseline="middle";let u=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=i+e/2+o.measureText(t.text).width;(0===f||l[l.length-1]+p+2*s>r)&&(h+=c,l[l.length-(f>0?0:1)]=0,d+=c,u++),a[f]={left:0,top:d,row:u,width:p,height:n},l[l.length-1]+=p+s})),h}_fitCols(t,e,i,n){const{ctx:o,maxHeight:r,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=r-t;let h=s,u=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,r)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,o){const r=function(t,e,i,n){let o=t.text;o&&"string"!=typeof o&&(o=o.reduce(((t,e)=>t.length>e.length?t:e)));return e+i.size/2+n.measureText(o).width}(n,t,e,i),s=function(t,e,i){let n=t;"string"!=typeof e.text&&(n=Rr(e,i));return n}(o,n,e.lineHeight);return{itemWidth:r,itemHeight:s}}(i,e,o,t,n);r>0&&d+m+2*s>c&&(h+=u+s,l.push({width:u,height:d}),f+=u+s,p++,u=d=0),a[r]={left:f,top:d,col:p,width:g,height:m},u=Math.max(u,g),d+=m+s})),h+=u,l.push({width:u,height:d}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:o}}=this,r=wi(o,this.left,this.width);if(this.isHorizontal()){let o=0,s=$t(i,this.left+n,this.right-this.lineWidths[o]);for(const a of e)o!==a.row&&(o=a.row,s=$t(i,this.left+n,this.right-this.lineWidths[o])),a.top+=this.top+t+n,a.left=r.leftForLtr(r.x(s),a.width),s+=a.width+n}else{let o=0,s=$t(i,this.top+t+n,this.bottom-this.columnSizes[o].height);for(const a of e)a.col!==o&&(o=a.col,s=$t(i,this.top+t+n,this.bottom-this.columnSizes[o].height)),a.top=s,a.left+=this.left+n,a.left=r.leftForLtr(r.x(a.left),a.width),s+=a.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;xe(t,this),this._draw(),_e(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:o,labels:r}=t,s=de.color,a=wi(t.rtl,this.left,this.width),l=Ie(r.font),{padding:c}=r,h=l.size,u=h/2;let d;this.drawTitle(),n.textAlign=a.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Er(r,h),m=this.isHorizontal(),b=this._computeTitleHeight();d=m?{x:$t(o,this.left+c,this.right-i[0]),y:this.top+c+b,line:0}:{x:this.left+c,y:$t(o,this.top+b+c,this.bottom-e[0].height),line:0},ki(this.ctx,t.textDirection);const y=g+c;this.legendItems.forEach(((v,x)=>{n.strokeStyle=v.fontColor,n.fillStyle=v.fontColor;const _=n.measureText(v.text).width,w=a.textAlign(v.textAlign||(v.textAlign=r.textAlign)),k=f+u+_;let O=d.x,S=d.y;a.setWidth(this.width),m?x>0&&O+k+c>this.right&&(S=d.y+=y,d.line++,O=d.x=$t(o,this.left+c,this.right-i[d.line])):x>0&&S+y>this.bottom&&(O=d.x=O+e[d.line].width+c,d.line++,S=d.y=$t(o,this.top+b+c,this.bottom-e[d.line].height));if(function(t,e,i){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();const o=X(i.lineWidth,1);if(n.fillStyle=X(i.fillStyle,s),n.lineCap=X(i.lineCap,"butt"),n.lineDashOffset=X(i.lineDashOffset,0),n.lineJoin=X(i.lineJoin,"miter"),n.lineWidth=o,n.strokeStyle=X(i.strokeStyle,s),n.setLineDash(X(i.lineDash,[])),r.usePointStyle){const s={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:o},l=a.xPlus(t,f/2);ye(n,s,l,e+u,r.pointStyleWidth&&f)}else{const r=e+Math.max((h-p)/2,0),s=a.leftForLtr(t,f),l=Te(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?Pe(n,{x:s,y:r,w:f,h:p,radius:l}):n.rect(s,r,f,p),n.fill(),0!==o&&n.stroke()}n.restore()}(a.x(O),S,v),O=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(w,O+f+u,m?O+k:this.right,t.rtl),function(t,e,i){Me(n,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:a.textAlign(i.textAlign)})}(a.x(O),S,v),m)d.x+=k+c;else if("string"!=typeof v.text){const t=l.lineHeight;d.y+=Rr(v,t)}else d.y+=y})),Oi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Ie(e.font),n=je(e.padding);if(!e.display)return;const o=wi(t.rtl,this.left,this.width),r=this.ctx,s=e.position,a=i.size/2,l=n.top+a;let c,h=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),c=this.top+l,h=$t(t.align,h,this.right-u);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+$t(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=$t(s,h,h+u);r.textAlign=o.textAlign(Ut(s)),r.textBaseline="middle",r.strokeStyle=e.color,r.fillStyle=e.color,r.font=i.string,Me(r,e.text,d,c,i)}_computeTitleHeight(){const t=this.options.title,e=Ie(t.font),i=je(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,o;if(jt(t,this.left,this.right)&&jt(e,this.top,this.bottom))for(o=this.legendHitBoxes,i=0;i<o.length;++i)if(n=o[i],jt(t,n.left,n.left+n.width)&&jt(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){if(("mousemove"===t||"mouseout"===t)&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const r=this._hoveredItem,s=(o=i,null!==(n=r)&&null!==o&&n.datasetIndex===o.datasetIndex&&n.index===o.index);r&&!s&&J(e.onLeave,[t,r,this],this),this._hoveredItem=i,i&&!s&&J(e.onHover,[t,i,this],this)}else i&&J(e.onClick,[t,i,this],this);var n,o}}function Rr(t,e){return e*(t.text?t.text.length+.5:0)}var Tr={id:"legend",_element:Dr,start(t,e,i){const n=t.legend=new Dr({ctx:t.ctx,options:i,chart:t});Ln.configure(t,n,i),Ln.addBox(t,n)},stop(t){Ln.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Ln.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,o=i.chart;o.isDatasetVisible(n)?(o.hide(n),e.hidden=!0):(o.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:o,color:r,useBorderRadius:s,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),c=je(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:r,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:o||l.textAlign,borderRadius:s&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class jr extends qn{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=$(i.text)?i.text.length:1;this._padding=je(i.padding);const o=n*Ie(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:o,options:r}=this,s=r.align;let a,l,c,h=0;return this.isHorizontal()?(l=$t(s,i,o),c=e+t,a=o-i):("left"===r.position?(l=i+t,c=$t(s,n,e),h=-.5*dt):(l=o-t,c=$t(s,e,n),h=.5*dt),a=n-e),{titleX:l,titleY:c,maxWidth:a,rotation:h}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Ie(e.font),n=i.lineHeight/2+this._padding.top,{titleX:o,titleY:r,maxWidth:s,rotation:a}=this._drawArgs(n);Me(t,e.text,0,0,i,{color:e.color,maxWidth:s,rotation:a,textAlign:Ut(e.align),textBaseline:"middle",translation:[o,r]})}}var Ir={id:"title",_element:jr,start(t,e,i){!function(t,e){const i=new jr({ctx:t.ctx,options:e,chart:t});Ln.configure(t,i,e),Ln.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Ln.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Ln.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Nr=new WeakMap;var Fr={id:"subtitle",start(t,e,i){const n=new jr({ctx:t.ctx,options:i,chart:t});Ln.configure(t,n,i),Ln.addBox(t,n),Nr.set(t,n)},stop(t){Ln.removeBox(t,Nr.get(t)),Nr.delete(t)},beforeUpdate(t,e,i){const n=Nr.get(t);Ln.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Vr={average(t){if(!t.length)return!1;let e,i,n=0,o=0,r=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,o+=t.y,++r}}return{x:n/r,y:o/r}},nearest(t,e){if(!t.length)return!1;let i,n,o,r=e.x,s=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=Lt(e,n.getCenterPoint());t<a&&(a=t,o=n)}}if(o){const t=o.tooltipPosition();r=t.x,s=t.y}return{x:r,y:s}}};function zr(t,e){return e&&($(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Br(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Hr(t,e){const{element:i,datasetIndex:n,index:o}=e,r=t.getDatasetMeta(n).controller,{label:s,value:a}=r.getLabelAndValue(o);return{chart:t,label:s,parsed:r.getParsed(o),raw:t.data.datasets[n].data[o],formattedValue:a,dataset:r.getDataset(),dataIndex:o,datasetIndex:n,element:i}}function Wr(t,e){const i=t.chart.ctx,{body:n,footer:o,title:r}=t,{boxWidth:s,boxHeight:a}=e,l=Ie(e.bodyFont),c=Ie(e.titleFont),h=Ie(e.footerFont),u=r.length,d=o.length,f=n.length,p=je(e.padding);let g=p.height,m=0,b=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(b+=t.beforeBody.length+t.afterBody.length,u&&(g+=u*c.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),b){g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing}d&&(g+=e.footerMarginTop+d*h.lineHeight+(d-1)*e.footerSpacing);let y=0;const v=function(t){m=Math.max(m,i.measureText(t).width+y)};return i.save(),i.font=c.string,Z(t.title,v),i.font=l.string,Z(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?s+2+e.boxPadding:0,Z(n,(t=>{Z(t.before,v),Z(t.lines,v),Z(t.after,v)})),y=0,i.font=h.string,Z(t.footer,v),i.restore(),m+=p.width,{width:m,height:g}}function Ur(t,e,i,n){const{x:o,width:r}=i,{width:s,chartArea:{left:a,right:l}}=t;let c="center";return"center"===n?c=o<=(a+l)/2?"left":"right":o<=r/2?c="left":o>=s-r/2&&(c="right"),function(t,e,i,n){const{x:o,width:r}=n,s=i.caretSize+i.caretPadding;return"left"===t&&o+r+s>e.width||"right"===t&&o-r-s<0||void 0}(c,t,e,i)&&(c="center"),c}function $r(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Ur(t,e,i,n),yAlign:n}}function Yr(t,e,i,n){const{caretSize:o,caretPadding:r,cornerRadius:s}=t,{xAlign:a,yAlign:l}=i,c=o+r,{topLeft:h,topRight:u,bottomLeft:d,bottomRight:f}=Te(s);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:o}=t;return"top"===e?n+=i:n-="bottom"===e?o+i:o/2,n}(e,l,c);return"center"===l?"left"===a?p+=c:"right"===a&&(p-=c):"left"===a?p-=Math.max(h,d)+o:"right"===a&&(p+=Math.max(u,f)+o),{x:Tt(p,0,n.width-e.width),y:Tt(g,0,n.height-e.height)}}function Kr(t,e,i){const n=je(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function qr(t){return zr([],Br(t))}function Xr(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Gr={beforeTitle:H,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:H,beforeBody:H,beforeLabel:H,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return U(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:H,afterBody:H,beforeFooter:H,footer:H,afterFooter:H};function Jr(t,e,i,n){const o=t[e].call(i,n);return void 0===o?Gr[e].call(i,n):o}class Zr extends qn{static positioners=Vr;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,o=new Ni(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(o)),o}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,Fe(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,n=Jr(i,"beforeTitle",this,t),o=Jr(i,"title",this,t),r=Jr(i,"afterTitle",this,t);let s=[];return s=zr(s,Br(n)),s=zr(s,Br(o)),s=zr(s,Br(r)),s}getBeforeBody(t,e){return qr(Jr(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return Z(t,(t=>{const e={before:[],lines:[],after:[]},o=Xr(i,t);zr(e.before,Br(Jr(o,"beforeLabel",this,t))),zr(e.lines,Jr(o,"label",this,t)),zr(e.after,Br(Jr(o,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return qr(Jr(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=Jr(i,"beforeFooter",this,t),o=Jr(i,"footer",this,t),r=Jr(i,"afterFooter",this,t);let s=[];return s=zr(s,Br(n)),s=zr(s,Br(o)),s=zr(s,Br(r)),s}_createItems(t){const e=this._active,i=this.chart.data,n=[],o=[],r=[];let s,a,l=[];for(s=0,a=e.length;s<a;++s)l.push(Hr(this.chart,e[s]));return t.filter&&(l=l.filter(((e,n,o)=>t.filter(e,n,o,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),Z(l,(e=>{const i=Xr(t.callbacks,e);n.push(Jr(i,"labelColor",this,e)),o.push(Jr(i,"labelPointStyle",this,e)),r.push(Jr(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=o,this.labelTextColors=r,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let o,r=[];if(n.length){const t=Vr[i.position].call(this,n,this._eventPosition);r=this._createItems(i),this.title=this.getTitle(r,i),this.beforeBody=this.getBeforeBody(r,i),this.body=this.getBody(r,i),this.afterBody=this.getAfterBody(r,i),this.footer=this.getFooter(r,i);const e=this._size=Wr(this,i),s=Object.assign({},t,e),a=$r(this.chart,i,s),l=Yr(i,s,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,o={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(o={opacity:0});this._tooltipItems=r,this.$context=void 0,o&&this._resolveAnimations().update(this,o),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const o=this.getCaretPosition(t,i,n);e.lineTo(o.x1,o.y1),e.lineTo(o.x2,o.y2),e.lineTo(o.x3,o.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:o}=this,{caretSize:r,cornerRadius:s}=i,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:h}=Te(s),{x:u,y:d}=t,{width:f,height:p}=e;let g,m,b,y,v,x;return"center"===o?(v=d+p/2,"left"===n?(g=u,m=g-r,y=v+r,x=v-r):(g=u+f,m=g+r,y=v-r,x=v+r),b=g):(m="left"===n?u+Math.max(a,c)+r:"right"===n?u+f-Math.max(l,h)-r:this.caretX,"top"===o?(y=d,v=y-r,g=m-r,b=m+r):(y=d+p,v=y+r,g=m+r,b=m-r),x=y),{x1:g,x2:m,x3:b,y1:y,y2:v,y3:x}}drawTitle(t,e,i){const n=this.title,o=n.length;let r,s,a;if(o){const l=wi(i.rtl,this.x,this.width);for(t.x=Kr(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",r=Ie(i.titleFont),s=i.titleSpacing,e.fillStyle=i.titleColor,e.font=r.string,a=0;a<o;++a)e.fillText(n[a],l.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+s,a+1===o&&(t.y+=i.titleMarginBottom-s)}}_drawColorBox(t,e,i,n,o){const r=this.labelColors[i],s=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=o,c=Ie(o.bodyFont),h=Kr(this,"left",o),u=n.x(h),d=a<c.lineHeight?(c.lineHeight-a)/2:0,f=e.y+d;if(o.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},i=n.leftForLtr(u,l)+l/2,c=f+a/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,be(t,e,i,c),t.strokeStyle=r.borderColor,t.fillStyle=r.backgroundColor,be(t,e,i,c)}else{t.lineWidth=Y(r.borderWidth)?Math.max(...Object.values(r.borderWidth)):r.borderWidth||1,t.strokeStyle=r.borderColor,t.setLineDash(r.borderDash||[]),t.lineDashOffset=r.borderDashOffset||0;const e=n.leftForLtr(u,l),i=n.leftForLtr(n.xPlus(u,1),l-2),s=Te(r.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=o.multiKeyBackground,Pe(t,{x:e,y:f,w:l,h:a,radius:s}),t.fill(),t.stroke(),t.fillStyle=r.backgroundColor,t.beginPath(),Pe(t,{x:i,y:f+1,w:l-2,h:a-2,radius:s}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=r.backgroundColor,t.fillRect(i,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:o,bodyAlign:r,displayColors:s,boxHeight:a,boxWidth:l,boxPadding:c}=i,h=Ie(i.bodyFont);let u=h.lineHeight,d=0;const f=wi(i.rtl,this.x,this.width),p=function(i){e.fillText(i,f.x(t.x+d),t.y+u/2),t.y+=u+o},g=f.textAlign(r);let m,b,y,v,x,_,w;for(e.textAlign=r,e.textBaseline="middle",e.font=h.string,t.x=Kr(this,g,i),e.fillStyle=i.bodyColor,Z(this.beforeBody,p),d=s&&"right"!==g?"center"===r?l/2+c:l+2+c:0,v=0,_=n.length;v<_;++v){for(m=n[v],b=this.labelTextColors[v],e.fillStyle=b,Z(m.before,p),y=m.lines,s&&y.length&&(this._drawColorBox(e,t,v,f,i),u=Math.max(h.lineHeight,a)),x=0,w=y.length;x<w;++x)p(y[x]),u=h.lineHeight;Z(m.after,p)}d=0,u=h.lineHeight,Z(this.afterBody,p),t.y-=o}drawFooter(t,e,i){const n=this.footer,o=n.length;let r,s;if(o){const a=wi(i.rtl,this.x,this.width);for(t.x=Kr(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",r=Ie(i.footerFont),e.fillStyle=i.footerColor,e.font=r.string,s=0;s<o;++s)e.fillText(n[s],a.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:o,yAlign:r}=this,{x:s,y:a}=t,{width:l,height:c}=i,{topLeft:h,topRight:u,bottomLeft:d,bottomRight:f}=Te(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(s+h,a),"top"===r&&this.drawCaret(t,e,i,n),e.lineTo(s+l-u,a),e.quadraticCurveTo(s+l,a,s+l,a+u),"center"===r&&"right"===o&&this.drawCaret(t,e,i,n),e.lineTo(s+l,a+c-f),e.quadraticCurveTo(s+l,a+c,s+l-f,a+c),"bottom"===r&&this.drawCaret(t,e,i,n),e.lineTo(s+d,a+c),e.quadraticCurveTo(s,a+c,s,a+c-d),"center"===r&&"left"===o&&this.drawCaret(t,e,i,n),e.lineTo(s,a+h),e.quadraticCurveTo(s,a,s+h,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,o=i&&i.y;if(n||o){const i=Vr[t.position].call(this,this._active,this._eventPosition);if(!i)return;const r=this._size=Wr(this,t),s=Object.assign({},i,this._size),a=$r(e,t,s),l=Yr(t,s,a,e);n._to===l.x&&o._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=r.width,this.height=r.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},o={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const r=je(e.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&s&&(t.save(),t.globalAlpha=i,this.drawBackground(o,t,n,e),ki(t,e.textDirection),o.y+=r.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),Oi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),o=!Q(i,n),r=this._positionChanged(n,e);(o||r)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,o=this._active||[],r=this._getActiveElements(t,o,e,i),s=this._positionChanged(r,t),a=e||!Q(r,o)||s;return a&&(this._active=r,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const o=this.options;if("mouseout"===t.type)return[];if(!n)return e;const r=this.chart.getElementsAtEventForMode(t,o.mode,o,i);return o.reverse&&r.reverse(),r}_positionChanged(t,e){const{caretX:i,caretY:n,options:o}=this,r=Vr[o.position].call(this,t,e);return!1!==r&&(i!==r.x||n!==r.y)}}var Qr={id:"tooltip",_element:Zr,positioners:Vr,afterInit(t,e,i){i&&(t.tooltip=new Zr({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Gr},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},ts=Object.freeze({__proto__:null,Colors:hr,Decimation:fr,Filler:Lr,Legend:Tr,SubTitle:Fr,Title:Ir,Tooltip:Qr});function es(t,e,i,n){const o=t.indexOf(e);if(-1===o)return((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n);return o!==t.lastIndexOf(e)?i:o}function is(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function ns(t,e){const i=[],{bounds:n,step:o,min:r,max:s,precision:a,count:l,maxTicks:c,maxDigits:h,includeBounds:u}=t,d=o||1,f=c-1,{min:p,max:g}=e,m=!U(r),b=!U(s),y=!U(l),v=(g-p)/(h+1);let x,_,w,k,O=kt((g-p)/f/d)*d;if(O<1e-14&&!m&&!b)return[{value:p},{value:g}];k=Math.ceil(g/O)-Math.floor(p/O),k>f&&(O=kt(k*O/f/d)*d),U(a)||(x=Math.pow(10,a),O=Math.ceil(O*x)/x),"ticks"===n?(_=Math.floor(p/O)*O,w=Math.ceil(g/O)*O):(_=p,w=g),m&&b&&o&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((s-r)/o,O/1e3)?(k=Math.round(Math.min((s-r)/O,c)),O=(s-r)/k,_=r,w=s):y?(_=m?r:_,w=b?s:w,k=l-1,O=(w-_)/k):(k=(w-_)/O,k=wt(k,Math.round(k),O/1e3)?Math.round(k):Math.ceil(k));const S=Math.max(Ct(O),Ct(_));x=Math.pow(10,U(a)?S:a),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let M=0;for(m&&(u&&_!==r?(i.push({value:r}),_<r&&M++,wt(Math.round((_+M*O)*x)/x,r,os(r,v,t))&&M++):_<r&&M++);M<k;++M){const t=Math.round((_+M*O)*x)/x;if(b&&t>s)break;i.push({value:t})}return b&&u&&w!==s?i.length&&wt(i[i.length-1].value,s,os(s,v,t))?i[i.length-1].value=s:i.push({value:s}):b&&w!==s||i.push({value:w}),i}function os(t,e,{horizontal:i,minRotation:n}){const o=Mt(n),r=(i?Math.sin(o):Math.cos(o))||.001,s=.75*e*(""+t).length;return Math.min(e/r,s)}class rs extends oo{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return U(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:o}=this;const r=t=>n=e?n:t,s=t=>o=i?o:t;if(t){const t=_t(n),e=_t(o);t<0&&e<0?s(0):t>0&&e>0&&r(0)}if(n===o){let e=0===o?1:Math.abs(.05*o);s(o+e),t||r(n-e)}this.min=n,this.max=o}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=ns({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&St(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return oe(t,this.chart.options.locale,this.options.ticks.format)}}class ss extends rs{static id="linear";static defaults={ticks:{callback:se.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=K(t)?t:0,this.max=K(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=Mt(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,o.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const as=t=>Math.floor(xt(t)),ls=(t,e)=>Math.pow(10,as(t)+e);function cs(t){return 1===t/Math.pow(10,as(t))}function hs(t,e,i){const n=Math.pow(10,i),o=Math.floor(t/n);return Math.ceil(e/n)-o}function us(t,{min:e,max:i}){e=q(t.min,e);const n=[],o=as(e);let r=function(t,e){let i=as(e-t);for(;hs(t,e,i)>10;)i++;for(;hs(t,e,i)<10;)i--;return Math.min(i,as(t))}(e,i),s=r<0?Math.pow(10,Math.abs(r)):1;const a=Math.pow(10,r),l=o>r?Math.pow(10,o):0,c=Math.round((e-l)*s)/s,h=Math.floor((e-l)/a/10)*a*10;let u=Math.floor((c-h)/Math.pow(10,r)),d=q(t.min,Math.round((l+h+u*Math.pow(10,r))*s)/s);for(;d<i;)n.push({value:d,major:cs(d),significand:u}),u>=10?u=u<15?15:20:u++,u>=20&&(r++,u=2,s=r>=0?1:s),d=Math.round((l+h+u*Math.pow(10,r))*s)/s;const f=q(t.max,d);return n.push({value:f,major:cs(f),significand:u}),n}class ds extends oo{static id="logarithmic";static defaults={ticks:{callback:se.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=rs.prototype.parse.apply(this,[t,e]);if(0!==i)return K(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=K(t)?Math.max(0,t):null,this.max=K(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!K(this._userMin)&&(this.min=t===ls(this.min,0)?ls(this.min,-1):ls(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const o=e=>i=t?i:e,r=t=>n=e?n:t;i===n&&(i<=0?(o(1),r(10)):(o(ls(i,-1)),r(ls(n,1)))),i<=0&&o(ls(n,-1)),n<=0&&r(ls(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=us({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&St(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":oe(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=xt(t),this._valueRange=xt(this.max)-xt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(xt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function fs(t){const e=t.ticks;if(e.display&&t.display){const t=je(e.backdropPadding);return X(e.font&&e.font.size,de.font.size)+t.height}return 0}function ps(t,e,i,n,o){return t===n||t===o?{start:e-i/2,end:e+i/2}:t<n||t>o?{start:e-i,end:e}:{start:e,end:e+i}}function gs(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],o=[],r=t._pointLabels.length,s=t.options.pointLabels,a=s.centerPointLabels?dt/r:0;for(let u=0;u<r;u++){const r=s.setContext(t.getPointLabelContext(u));o[u]=r.padding;const d=t.getPointPosition(u,t.drawingArea+o[u],a),f=Ie(r.font),p=(l=t.ctx,c=f,h=$(h=t._pointLabels[u])?h:[h],{w:pe(l,c.string,h),h:h.length*c.lineHeight});n[u]=p;const g=Dt(t.getIndexAngle(u)+a),m=Math.round(Pt(g));ms(i,e,g,ps(m,d.x,p.w,0,180),ps(m,d.y,p.h,90,270))}var l,c,h;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],o=t._pointLabels.length,r=t.options,{centerPointLabels:s,display:a}=r.pointLabels,l={extra:fs(r)/2,additionalAngle:s?dt/o:0};let c;for(let r=0;r<o;r++){l.padding=i[r],l.size=e[r];const o=bs(t,r,l);n.push(o),"auto"===a&&(o.visible=ys(o,c),o.visible&&(c=o))}return n}(t,n,o)}function ms(t,e,i,n,o){const r=Math.abs(Math.sin(i)),s=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/r,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/r,t.r=Math.max(t.r,e.r+a)),o.start<e.t?(l=(e.t-o.start)/s,t.t=Math.min(t.t,e.t-l)):o.end>e.b&&(l=(o.end-e.b)/s,t.b=Math.max(t.b,e.b+l))}function bs(t,e,i){const n=t.drawingArea,{extra:o,additionalAngle:r,padding:s,size:a}=i,l=t.getPointPosition(e,n+o+s,r),c=Math.round(Pt(Dt(l.angle+bt))),h=function(t,e,i){90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e);return t}(l.y,a.h,c),u=function(t){if(0===t||180===t)return"center";if(t<180)return"left";return"right"}(c),d=function(t,e,i){"right"===i?t-=e:"center"===i&&(t-=e/2);return t}(l.x,a.w,u);return{visible:!0,x:l.x,y:h,textAlign:u,left:d,top:h,right:d+a.w,bottom:h+a.h}}function ys(t,e){if(!e)return!0;const{left:i,top:n,right:o,bottom:r}=t;return!(ve({x:i,y:n},e)||ve({x:i,y:r},e)||ve({x:o,y:n},e)||ve({x:o,y:r},e))}function vs(t,e,i){const{left:n,top:o,right:r,bottom:s}=i,{backdropColor:a}=e;if(!U(a)){const i=Te(e.borderRadius),l=je(e.backdropPadding);t.fillStyle=a;const c=n-l.left,h=o-l.top,u=r-n+l.width,d=s-o+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),Pe(t,{x:c,y:h,w:u,h:d,radius:i}),t.fill()):t.fillRect(c,h,u,d)}}function xs(t,e,i,n){const{ctx:o}=t;if(i)o.arc(t.xCenter,t.yCenter,e,0,ft);else{let i=t.getPointPosition(0,e);o.moveTo(i.x,i.y);for(let r=1;r<n;r++)i=t.getPointPosition(r,e),o.lineTo(i.x,i.y)}}class _s extends rs{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:se.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=je(fs(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=K(t)&&!isNaN(t)?t:0,this.max=K(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/fs(this.options))}generateTickLabels(t){rs.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=J(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?gs(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return Dt(t*(ft/(this._pointLabels.length||1))+Mt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(U(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(U(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Fe(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-bt+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:o}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:o}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),xs(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:o}=e,r=this._pointLabels.length;let s,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let o=e-1;o>=0;o--){const e=t._pointLabelItems[o];if(!e.visible)continue;const r=n.setContext(t.getPointLabelContext(o));vs(i,r,e);const s=Ie(r.font),{x:a,y:l,textAlign:c}=e;Me(i,t._pointLabels[o],a,l+s.lineHeight/2,s,{color:r.color,textAlign:c,textBaseline:"middle"})}}(this,r),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),s=n.setContext(i),l=o.setContext(i);!function(t,e,i,n,o){const r=t.ctx,s=e.circular,{color:a,lineWidth:l}=e;!s&&!n||!a||!l||i<0||(r.save(),r.strokeStyle=a,r.lineWidth=l,r.setLineDash(o.dash),r.lineDashOffset=o.dashOffset,r.beginPath(),xs(t,i,s,n),r.closePath(),r.stroke(),r.restore())}(this,s,a,r,l)}})),i.display){for(t.save(),s=r-1;s>=0;s--){const n=i.setContext(this.getPointLabelContext(s)),{color:o,lineWidth:r}=n;r&&o&&(t.lineWidth=r,t.strokeStyle=o,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(s,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let o,r;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,s)=>{if(0===s&&!e.reverse)return;const a=i.setContext(this.getContext(s)),l=Ie(a.font);if(o=this.getDistanceFromCenterForValue(this.ticks[s].value),a.showLabelBackdrop){t.font=l.string,r=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=je(a.backdropPadding);t.fillRect(-r/2-e.left,-o-l.size/2-e.top,r+e.width,l.size+e.height)}Me(t,n.label,0,-o,l,{color:a.color})})),t.restore()}drawTitle(){}}const ws={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ks=Object.keys(ws);function Os(t,e){return t-e}function Ss(t,e){if(U(e))return null;const i=t._adapter,{parser:n,round:o,isoWeekday:r}=t._parseOpts;let s=e;return"function"==typeof n&&(s=n(s)),K(s)||(s="string"==typeof n?i.parse(s,n):i.parse(s)),null===s?null:(o&&(s="week"!==o||!Ot(r)&&!0!==r?i.startOf(s,o):i.startOf(s,"isoWeek",r)),+s)}function Ms(t,e,i,n){const o=ks.length;for(let r=ks.indexOf(t);r<o-1;++r){const t=ws[ks[r]],o=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(o*t.size))<=n)return ks[r]}return ks[o-1]}function Ps(t,e,i){if(i){if(i.length){const{lo:n,hi:o}=It(i,e);t[i[n]>=e?i[n]:i[o]]=!0}}else t[e]=!0}function Cs(t,e,i){const n=[],o={},r=e.length;let s,a;for(s=0;s<r;++s)a=e[s],o[a]=s,n.push({value:a,major:!1});return 0!==r&&i?function(t,e,i,n){const o=t._adapter,r=+o.startOf(e[0].value,n),s=e[e.length-1].value;let a,l;for(a=r;a<=s;a=+o.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,o,i):n}class As extends oo{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new hn(t.adapters.date);n.init(e),ot(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Ss(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:o,minDefined:r,maxDefined:s}=this.getUserBounds();function a(t){r||isNaN(t.min)||(n=Math.min(n,t.min)),s||isNaN(t.max)||(o=Math.max(o,t.max))}r&&s||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=K(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),o=K(o)&&!isNaN(o)?o:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,o-1),this.max=Math.max(n+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const o=this.min,r=function(t,e,i){let n=0,o=t.length;for(;n<o&&t[n]<e;)n++;for(;o>n&&t[o-1]>i;)o--;return n>0||o<t.length?t.slice(n,o):t}(n,o,this.max);return this._unit=e.unit||(i.autoSkip?Ms(e.minUnit,this.min,this.max,this._getLabelCapacity(o)):function(t,e,i,n,o){for(let r=ks.length-1;r>=ks.indexOf(i);r--){const i=ks[r];if(ws[i].common&&t._adapter.diff(o,n,i)>=e-1)return i}return ks[i?ks.indexOf(i):0]}(this,r.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=ks.indexOf(t)+1,i=ks.length;e<i;++e)if(ws[ks[e]].common)return ks[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&r.reverse(),Cs(this,r,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,o=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),o=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const r=t.length<3?.5:.25;n=Tt(n,0,r),o=Tt(o,0,r),this._offsets={start:n,end:o,factor:1/(n+1+o)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,o=n.time,r=o.unit||Ms(o.minUnit,e,i,this._getLabelCapacity(e)),s=X(n.ticks.stepSize,1),a="week"===r&&o.isoWeekday,l=Ot(a)||!0===a,c={};let h,u,d=e;if(l&&(d=+t.startOf(d,"isoWeek",a)),d=+t.startOf(d,l?"day":r),t.diff(i,e,r)>1e5*s)throw new Error(e+" and "+i+" are too far apart with stepSize of "+s+" "+r);const f="data"===n.ticks.source&&this.getDataTimestamps();for(h=d,u=0;h<i;h=+t.add(h,s,r),u++)Ps(c,h,f);return h!==i&&"ticks"!==n.bounds&&1!==u||Ps(c,h,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,o=e||i[n];return this._adapter.format(t,o)}_tickFormatFunction(t,e,i,n){const o=this.options,r=o.ticks.callback;if(r)return J(r,[t,e,i],this);const s=o.time.displayFormats,a=this._unit,l=this._majorUnit,c=a&&s[a],h=l&&s[l],u=i[e],d=l&&h&&u&&u.major;return this._adapter.format(t,n||(d?h:c))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=Mt(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(n),r=Math.sin(n),s=this._resolveTickFontOptions(0).size;return{w:i*o+s*r,h:i*r+s*o}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,o=this._tickFormatFunction(t,0,Cs(this,[t],this._majorUnit),n),r=this._getLabelSize(o),s=Math.floor(this.isHorizontal()?this.width/r.w:this.height/r.h)-1;return s>0?s:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(Ss(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Bt(t.sort(Os))}}function Ls(t,e,i){let n,o,r,s,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=Nt(t,"pos",e)),({pos:n,time:r}=t[a]),({pos:o,time:s}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=Nt(t,"time",e)),({time:n,pos:r}=t[a]),({time:o,pos:s}=t[l]));const c=o-n;return c?r+(s-r)*(e-n)/c:r}var Es=Object.freeze({__proto__:null,CategoryScale:class extends oo{static id="category";static defaults={ticks:{callback:is}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(U(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Tt(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:es(i,t,X(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let o=this.getLabels();o=0===t&&e===o.length-1?o:o.slice(t,e+1),this._valueRange=Math.max(o.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return is.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:ss,LogarithmicScale:ds,RadialLinearScale:_s,TimeScale:As,TimeSeriesScale:class extends As{static id="timeseries";static defaults=As.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Ls(e,this.min),this._tableRange=Ls(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],o=[];let r,s,a,l,c;for(r=0,s=t.length;r<s;++r)l=t[r],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(r=0,s=n.length;r<s;++r)c=n[r+1],a=n[r-1],l=n[r],Math.round((c+a)/2)!==l&&o.push({time:l,pos:r/(s-1)});return o}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Ls(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Ls(this._table,i*this._tableRange+this._minPos,!0)}}});const Ds=[an,nr,ts,Es];jo.register(...Ds);const Rs=jo;function Ts(t){return Ts="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ts(t)}function js(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Is(t){var e=function(t,e){if("object"!==Ts(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==Ts(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ts(e)?e:String(e)}function Ns(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Is(n.key),n)}}function Fs(t,e,i){return e&&Ns(t.prototype,e),i&&Ns(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function Vs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function zs(t,e){return zs=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},zs(t,e)}function Bs(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&zs(t,e)}function Hs(t,e){if(e&&("object"===Ts(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Vs(t)}function Ws(t){return Ws=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ws(t)}function Us(t,e,i){return(e=Is(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function $s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function Ys(t){return function(t){if(Array.isArray(t))return t}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return $s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?$s(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ks(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function qs(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Ks(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Ks(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}var Xs={type:"logger",log:function(t){this.output("log",t)},warn:function(t){this.output("warn",t)},error:function(t){this.output("error",t)},output:function(t,e){console&&console[t]&&console[t].apply(console,e)}},Gs=new(function(){function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};js(this,t),this.init(e,i)}return Fs(t,[{key:"init",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=e.prefix||"i18next:",this.logger=t||Xs,this.options=e,this.debug=e.debug}},{key:"setDebug",value:function(t){this.debug=t}},{key:"log",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"log","",!0)}},{key:"warn",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"warn","",!0)}},{key:"error",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"error","")}},{key:"deprecate",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return this.forward(e,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(t,e,i,n){return n&&!this.debug?null:("string"==typeof t[0]&&(t[0]="".concat(i).concat(this.prefix," ").concat(t[0])),this.logger[e](t))}},{key:"create",value:function(e){return new t(this.logger,qs(qs({},{prefix:"".concat(this.prefix,":").concat(e,":")}),this.options))}},{key:"clone",value:function(e){return(e=e||this.options).prefix=e.prefix||this.prefix,new t(this.logger,e)}}]),t}()),Js=function(){function t(){js(this,t),this.observers={}}return Fs(t,[{key:"on",value:function(t,e){var i=this;return t.split(" ").forEach((function(t){i.observers[t]=i.observers[t]||[],i.observers[t].push(e)})),this}},{key:"off",value:function(t,e){this.observers[t]&&(e?this.observers[t]=this.observers[t].filter((function(t){return t!==e})):delete this.observers[t])}},{key:"emit",value:function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];this.observers[t]&&[].concat(this.observers[t]).forEach((function(t){t.apply(void 0,i)}));this.observers["*"]&&[].concat(this.observers["*"]).forEach((function(e){e.apply(e,[t].concat(i))}))}}]),t}();function Zs(){var t,e,i=new Promise((function(i,n){t=i,e=n}));return i.resolve=t,i.reject=e,i}function Qs(t){return null==t?"":""+t}function ta(t,e,i){function n(t){return t&&t.indexOf("###")>-1?t.replace(/###/g,"."):t}function o(){return!t||"string"==typeof t}for(var r="string"!=typeof e?[].concat(e):e.split(".");r.length>1;){if(o())return{};var s=n(r.shift());!t[s]&&i&&(t[s]=new i),t=Object.prototype.hasOwnProperty.call(t,s)?t[s]:{}}return o()?{}:{obj:t,k:n(r.shift())}}function ea(t,e,i){var n=ta(t,e,Object);n.obj[n.k]=i}function ia(t,e){var i=ta(t,e),n=i.obj,o=i.k;if(n)return n[o]}function na(t,e,i){for(var n in e)"__proto__"!==n&&"constructor"!==n&&(n in t?"string"==typeof t[n]||t[n]instanceof String||"string"==typeof e[n]||e[n]instanceof String?i&&(t[n]=e[n]):na(t[n],e[n],i):t[n]=e[n]);return t}function oa(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var ra={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function sa(t){return"string"==typeof t?t.replace(/[&<>"'\/]/g,(function(t){return ra[t]})):t}var aa="undefined"!=typeof window&&window.navigator&&void 0===window.navigator.userAgentData&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,la=[" ",",","?","!",";"];function ca(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(t){if(t[e])return t[e];for(var n=e.split(i),o=t,r=0;r<n.length;++r){if(!o)return;if("string"==typeof o[n[r]]&&r+1<n.length)return;if(void 0===o[n[r]]){for(var s=2,a=n.slice(r,r+s).join(i),l=o[a];void 0===l&&n.length>r+s;)s++,l=o[a=n.slice(r,r+s).join(i)];if(void 0===l)return;if(null===l)return null;if(e.endsWith(a)){if("string"==typeof l)return l;if(a&&"string"==typeof l[a])return l[a]}var c=n.slice(r+s).join(i);return c?ca(l,c,i):void 0}o=o[n[r]]}return o}}function ha(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function ua(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?ha(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ha(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function da(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=Ws(t);if(e){var o=Ws(this).constructor;i=Reflect.construct(n,arguments,o)}else i=n.apply(this,arguments);return Hs(this,i)}}var fa=function(t){Bs(i,t);var e=da(i);function i(t){var n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return js(this,i),n=e.call(this),aa&&Js.call(Vs(n)),n.data=t||{},n.options=o,void 0===n.options.keySeparator&&(n.options.keySeparator="."),void 0===n.options.ignoreJSONStructure&&(n.options.ignoreJSONStructure=!0),n}return Fs(i,[{key:"addNamespaces",value:function(t){this.options.ns.indexOf(t)<0&&this.options.ns.push(t)}},{key:"removeNamespaces",value:function(t){var e=this.options.ns.indexOf(t);e>-1&&this.options.ns.splice(e,1)}},{key:"getResource",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,r=void 0!==n.ignoreJSONStructure?n.ignoreJSONStructure:this.options.ignoreJSONStructure,s=[t,e];i&&"string"!=typeof i&&(s=s.concat(i)),i&&"string"==typeof i&&(s=s.concat(o?i.split(o):i)),t.indexOf(".")>-1&&(s=t.split("."));var a=ia(this.data,s);return a||!r||"string"!=typeof i?a:ca(this.data&&this.data[t]&&this.data[t][e],i,o)}},{key:"addResource",value:function(t,e,i,n){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},r=this.options.keySeparator;void 0===r&&(r=".");var s=[t,e];i&&(s=s.concat(r?i.split(r):i)),t.indexOf(".")>-1&&(n=e,e=(s=t.split("."))[1]),this.addNamespaces(e),ea(this.data,s,n),o.silent||this.emit("added",t,e,i,n)}},{key:"addResources",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var o in i)"string"!=typeof i[o]&&"[object Array]"!==Object.prototype.toString.apply(i[o])||this.addResource(t,e,o,i[o],{silent:!0});n.silent||this.emit("added",t,e,i)}},{key:"addResourceBundle",value:function(t,e,i,n,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[t,e];t.indexOf(".")>-1&&(n=i,i=e,e=(s=t.split("."))[1]),this.addNamespaces(e);var a=ia(this.data,s)||{};n?na(a,i,o):a=ua(ua({},a),i),ea(this.data,s,a),r.silent||this.emit("added",t,e,i)}},{key:"removeResourceBundle",value:function(t,e){this.hasResourceBundle(t,e)&&delete this.data[t][e],this.removeNamespaces(e),this.emit("removed",t,e)}},{key:"hasResourceBundle",value:function(t,e){return void 0!==this.getResource(t,e)}},{key:"getResourceBundle",value:function(t,e){return e||(e=this.options.defaultNS),"v1"===this.options.compatibilityAPI?ua(ua({},{}),this.getResource(t,e)):this.getResource(t,e)}},{key:"getDataByLanguage",value:function(t){return this.data[t]}},{key:"hasLanguageSomeTranslations",value:function(t){var e=this.getDataByLanguage(t);return!!(e&&Object.keys(e)||[]).find((function(t){return e[t]&&Object.keys(e[t]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),i}(Js),pa={processors:{},addPostProcessor:function(t){this.processors[t.name]=t},handle:function(t,e,i,n,o){var r=this;return t.forEach((function(t){r.processors[t]&&(e=r.processors[t].process(e,i,n,o))})),e}};function ga(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function ma(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?ga(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ga(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function ba(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=Ws(t);if(e){var o=Ws(this).constructor;i=Reflect.construct(n,arguments,o)}else i=n.apply(this,arguments);return Hs(this,i)}}var ya={},va=function(t){Bs(i,t);var e=ba(i);function i(t){var n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return js(this,i),n=e.call(this),aa&&Js.call(Vs(n)),function(t,e,i){t.forEach((function(t){e[t]&&(i[t]=e[t])}))}(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],t,Vs(n)),n.options=o,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n.logger=Gs.create("translator"),n}return Fs(i,[{key:"changeLanguage",value:function(t){t&&(this.language=t)}},{key:"exists",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==t)return!1;var i=this.resolve(t,e);return i&&void 0!==i.res}},{key:"extractFromKey",value:function(t,e){var i=void 0!==e.nsSeparator?e.nsSeparator:this.options.nsSeparator;void 0===i&&(i=":");var n=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,o=e.ns||this.options.defaultNS||[],r=i&&t.indexOf(i)>-1,s=!(this.options.userDefinedKeySeparator||e.keySeparator||this.options.userDefinedNsSeparator||e.nsSeparator||function(t,e,i){e=e||"",i=i||"";var n=la.filter((function(t){return e.indexOf(t)<0&&i.indexOf(t)<0}));if(0===n.length)return!0;var o=new RegExp("(".concat(n.map((function(t){return"?"===t?"\\?":t})).join("|"),")")),r=!o.test(t);if(!r){var s=t.indexOf(i);s>0&&!o.test(t.substring(0,s))&&(r=!0)}return r}(t,i,n));if(r&&!s){var a=t.match(this.interpolator.nestingRegexp);if(a&&a.length>0)return{key:t,namespaces:o};var l=t.split(i);(i!==n||i===n&&this.options.ns.indexOf(l[0])>-1)&&(o=l.shift()),t=l.join(n)}return"string"==typeof o&&(o=[o]),{key:t,namespaces:o}}},{key:"translate",value:function(t,e,n){var o=this;if("object"!==Ts(e)&&this.options.overloadTranslationOptionHandler&&(e=this.options.overloadTranslationOptionHandler(arguments)),"object"===Ts(e)&&(e=ma({},e)),e||(e={}),null==t)return"";Array.isArray(t)||(t=[String(t)]);var r=void 0!==e.returnDetails?e.returnDetails:this.options.returnDetails,s=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,a=this.extractFromKey(t[t.length-1],e),l=a.key,c=a.namespaces,h=c[c.length-1],u=e.lng||this.language,d=e.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(u&&"cimode"===u.toLowerCase()){if(d){var f=e.nsSeparator||this.options.nsSeparator;return r?{res:"".concat(h).concat(f).concat(l),usedKey:l,exactUsedKey:l,usedLng:u,usedNS:h}:"".concat(h).concat(f).concat(l)}return r?{res:l,usedKey:l,exactUsedKey:l,usedLng:u,usedNS:h}:l}var p=this.resolve(t,e),g=p&&p.res,m=p&&p.usedKey||l,b=p&&p.exactUsedKey||l,y=Object.prototype.toString.apply(g),v=void 0!==e.joinArrays?e.joinArrays:this.options.joinArrays,x=!this.i18nFormat||this.i18nFormat.handleAsObject;if(x&&g&&("string"!=typeof g&&"boolean"!=typeof g&&"number"!=typeof g)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(y)<0&&("string"!=typeof v||"[object Array]"!==y)){if(!e.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");var _=this.options.returnedObjectHandler?this.options.returnedObjectHandler(m,g,ma(ma({},e),{},{ns:c})):"key '".concat(l," (").concat(this.language,")' returned an object instead of string.");return r?(p.res=_,p):_}if(s){var w="[object Array]"===y,k=w?[]:{},O=w?b:m;for(var S in g)if(Object.prototype.hasOwnProperty.call(g,S)){var M="".concat(O).concat(s).concat(S);k[S]=this.translate(M,ma(ma({},e),{joinArrays:!1,ns:c})),k[S]===M&&(k[S]=g[S])}g=k}}else if(x&&"string"==typeof v&&"[object Array]"===y)(g=g.join(v))&&(g=this.extendTranslation(g,t,e,n));else{var P=!1,C=!1,A=void 0!==e.count&&"string"!=typeof e.count,L=i.hasDefaultValue(e),E=A?this.pluralResolver.getSuffix(u,e.count,e):"",D=e["defaultValue".concat(E)]||e.defaultValue;!this.isValidLookup(g)&&L&&(P=!0,g=D),this.isValidLookup(g)||(C=!0,g=l);var R=(e.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&C?void 0:g,T=L&&D!==g&&this.options.updateMissing;if(C||P||T){if(this.logger.log(T?"updateKey":"missingKey",u,h,l,T?D:g),s){var j=this.resolve(l,ma(ma({},e),{},{keySeparator:!1}));j&&j.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var I=[],N=this.languageUtils.getFallbackCodes(this.options.fallbackLng,e.lng||this.language);if("fallback"===this.options.saveMissingTo&&N&&N[0])for(var F=0;F<N.length;F++)I.push(N[F]);else"all"===this.options.saveMissingTo?I=this.languageUtils.toResolveHierarchy(e.lng||this.language):I.push(e.lng||this.language);var V=function(t,i,n){var r=L&&n!==g?n:R;o.options.missingKeyHandler?o.options.missingKeyHandler(t,h,i,r,T,e):o.backendConnector&&o.backendConnector.saveMissing&&o.backendConnector.saveMissing(t,h,i,r,T,e),o.emit("missingKey",t,h,i,g)};this.options.saveMissing&&(this.options.saveMissingPlurals&&A?I.forEach((function(t){o.pluralResolver.getSuffixes(t,e).forEach((function(i){V([t],l+i,e["defaultValue".concat(i)]||D)}))})):V(I,l,D))}g=this.extendTranslation(g,t,e,p,n),C&&g===l&&this.options.appendNamespaceToMissingKey&&(g="".concat(h,":").concat(l)),(C||P)&&this.options.parseMissingKeyHandler&&(g="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?"".concat(h,":").concat(l):l,P?g:void 0):this.options.parseMissingKeyHandler(g))}return r?(p.res=g,p):g}},{key:"extendTranslation",value:function(t,e,i,n,o){var r=this;if(this.i18nFormat&&this.i18nFormat.parse)t=this.i18nFormat.parse(t,ma(ma({},this.options.interpolation.defaultVariables),i),n.usedLng,n.usedNS,n.usedKey,{resolved:n});else if(!i.skipInterpolation){i.interpolation&&this.interpolator.init(ma(ma({},i),{interpolation:ma(ma({},this.options.interpolation),i.interpolation)}));var s,a="string"==typeof t&&(i&&i.interpolation&&void 0!==i.interpolation.skipOnVariables?i.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(a){var l=t.match(this.interpolator.nestingRegexp);s=l&&l.length}var c=i.replace&&"string"!=typeof i.replace?i.replace:i;if(this.options.interpolation.defaultVariables&&(c=ma(ma({},this.options.interpolation.defaultVariables),c)),t=this.interpolator.interpolate(t,c,i.lng||this.language,i),a){var h=t.match(this.interpolator.nestingRegexp);s<(h&&h.length)&&(i.nest=!1)}!i.lng&&"v1"!==this.options.compatibilityAPI&&n&&n.res&&(i.lng=n.usedLng),!1!==i.nest&&(t=this.interpolator.nest(t,(function(){for(var t=arguments.length,n=new Array(t),s=0;s<t;s++)n[s]=arguments[s];return o&&o[0]===n[0]&&!i.context?(r.logger.warn("It seems you are nesting recursively key: ".concat(n[0]," in key: ").concat(e[0])),null):r.translate.apply(r,n.concat([e]))}),i)),i.interpolation&&this.interpolator.reset()}var u=i.postProcess||this.options.postProcess,d="string"==typeof u?[u]:u;return null!=t&&d&&d.length&&!1!==i.applyPostProcessor&&(t=pa.handle(d,t,e,this.options&&this.options.postProcessPassResolved?ma({i18nResolved:n},i):i,this)),t}},{key:"resolve",value:function(t){var e,i,n,o,r,s=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof t&&(t=[t]),t.forEach((function(t){if(!s.isValidLookup(e)){var l=s.extractFromKey(t,a),c=l.key;i=c;var h=l.namespaces;s.options.fallbackNS&&(h=h.concat(s.options.fallbackNS));var u=void 0!==a.count&&"string"!=typeof a.count,d=u&&!a.ordinal&&0===a.count&&s.pluralResolver.shouldUseIntlApi(),f=void 0!==a.context&&("string"==typeof a.context||"number"==typeof a.context)&&""!==a.context,p=a.lngs?a.lngs:s.languageUtils.toResolveHierarchy(a.lng||s.language,a.fallbackLng);h.forEach((function(t){s.isValidLookup(e)||(r=t,!ya["".concat(p[0],"-").concat(t)]&&s.utils&&s.utils.hasLoadedNamespace&&!s.utils.hasLoadedNamespace(r)&&(ya["".concat(p[0],"-").concat(t)]=!0,s.logger.warn('key "'.concat(i,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(r,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(i){if(!s.isValidLookup(e)){o=i;var r,l=[c];if(s.i18nFormat&&s.i18nFormat.addLookupKeys)s.i18nFormat.addLookupKeys(l,c,i,t,a);else{var h;u&&(h=s.pluralResolver.getSuffix(i,a.count,a));var p="".concat(s.options.pluralSeparator,"zero");if(u&&(l.push(c+h),d&&l.push(c+p)),f){var g="".concat(c).concat(s.options.contextSeparator).concat(a.context);l.push(g),u&&(l.push(g+h),d&&l.push(g+p))}}for(;r=l.pop();)s.isValidLookup(e)||(n=r,e=s.getResource(i,t,r,a))}})))}))}})),{res:e,usedKey:i,exactUsedKey:n,usedLng:o,usedNS:r}}},{key:"isValidLookup",value:function(t){return!(void 0===t||!this.options.returnNull&&null===t||!this.options.returnEmptyString&&""===t)}},{key:"getResource",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(t,e,i,n):this.resourceStore.getResource(t,e,i,n)}}],[{key:"hasDefaultValue",value:function(t){var e="defaultValue";for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&e===i.substring(0,12)&&void 0!==t[i])return!0;return!1}}]),i}(Js);function xa(t){return t.charAt(0).toUpperCase()+t.slice(1)}var _a=function(){function t(e){js(this,t),this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=Gs.create("languageUtils")}return Fs(t,[{key:"getScriptPartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return null;var e=t.split("-");return 2===e.length?null:(e.pop(),"x"===e[e.length-1].toLowerCase()?null:this.formatLanguageCode(e.join("-")))}},{key:"getLanguagePartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return t;var e=t.split("-");return this.formatLanguageCode(e[0])}},{key:"formatLanguageCode",value:function(t){if("string"==typeof t&&t.indexOf("-")>-1){var e=["hans","hant","latn","cyrl","cans","mong","arab"],i=t.split("-");return this.options.lowerCaseLng?i=i.map((function(t){return t.toLowerCase()})):2===i.length?(i[0]=i[0].toLowerCase(),i[1]=i[1].toUpperCase(),e.indexOf(i[1].toLowerCase())>-1&&(i[1]=xa(i[1].toLowerCase()))):3===i.length&&(i[0]=i[0].toLowerCase(),2===i[1].length&&(i[1]=i[1].toUpperCase()),"sgn"!==i[0]&&2===i[2].length&&(i[2]=i[2].toUpperCase()),e.indexOf(i[1].toLowerCase())>-1&&(i[1]=xa(i[1].toLowerCase())),e.indexOf(i[2].toLowerCase())>-1&&(i[2]=xa(i[2].toLowerCase()))),i.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?t.toLowerCase():t}},{key:"isSupportedCode",value:function(t){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(t=this.getLanguagePartFromCode(t)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(t)>-1}},{key:"getBestMatchFromCodes",value:function(t){var e,i=this;return t?(t.forEach((function(t){if(!e){var n=i.formatLanguageCode(t);i.options.supportedLngs&&!i.isSupportedCode(n)||(e=n)}})),!e&&this.options.supportedLngs&&t.forEach((function(t){if(!e){var n=i.getLanguagePartFromCode(t);if(i.isSupportedCode(n))return e=n;e=i.options.supportedLngs.find((function(t){return t===n?t:t.indexOf("-")<0&&n.indexOf("-")<0?void 0:0===t.indexOf(n)?t:void 0}))}})),e||(e=this.getFallbackCodes(this.options.fallbackLng)[0]),e):null}},{key:"getFallbackCodes",value:function(t,e){if(!t)return[];if("function"==typeof t&&(t=t(e)),"string"==typeof t&&(t=[t]),"[object Array]"===Object.prototype.toString.apply(t))return t;if(!e)return t.default||[];var i=t[e];return i||(i=t[this.getScriptPartFromCode(e)]),i||(i=t[this.formatLanguageCode(e)]),i||(i=t[this.getLanguagePartFromCode(e)]),i||(i=t.default),i||[]}},{key:"toResolveHierarchy",value:function(t,e){var i=this,n=this.getFallbackCodes(e||this.options.fallbackLng||[],t),o=[],r=function(t){t&&(i.isSupportedCode(t)?o.push(t):i.logger.warn("rejecting language code not found in supportedLngs: ".concat(t)))};return"string"==typeof t&&t.indexOf("-")>-1?("languageOnly"!==this.options.load&&r(this.formatLanguageCode(t)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&r(this.getScriptPartFromCode(t)),"currentOnly"!==this.options.load&&r(this.getLanguagePartFromCode(t))):"string"==typeof t&&r(this.formatLanguageCode(t)),n.forEach((function(t){o.indexOf(t)<0&&r(i.formatLanguageCode(t))})),o}}]),t}(),wa=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],ka={1:function(t){return Number(t>1)},2:function(t){return Number(1!=t)},3:function(t){return 0},4:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},5:function(t){return Number(0==t?0:1==t?1:2==t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5)},6:function(t){return Number(1==t?0:t>=2&&t<=4?1:2)},7:function(t){return Number(1==t?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},8:function(t){return Number(1==t?0:2==t?1:8!=t&&11!=t?2:3)},9:function(t){return Number(t>=2)},10:function(t){return Number(1==t?0:2==t?1:t<7?2:t<11?3:4)},11:function(t){return Number(1==t||11==t?0:2==t||12==t?1:t>2&&t<20?2:3)},12:function(t){return Number(t%10!=1||t%100==11)},13:function(t){return Number(0!==t)},14:function(t){return Number(1==t?0:2==t?1:3==t?2:3)},15:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2)},16:function(t){return Number(t%10==1&&t%100!=11?0:0!==t?1:2)},17:function(t){return Number(1==t||t%10==1&&t%100!=11?0:1)},18:function(t){return Number(0==t?0:1==t?1:2)},19:function(t){return Number(1==t?0:0==t||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3)},20:function(t){return Number(1==t?0:0==t||t%100>0&&t%100<20?1:2)},21:function(t){return Number(t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0)},22:function(t){return Number(1==t?0:2==t?1:(t<0||t>10)&&t%10==0?2:3)}},Oa=["v1","v2","v3"],Sa={zero:0,one:1,two:2,few:3,many:4,other:5};var Ma=function(){function t(e){var i,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};js(this,t),this.languageUtils=e,this.options=n,this.logger=Gs.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=(i={},wa.forEach((function(t){t.lngs.forEach((function(e){i[e]={numbers:t.nr,plurals:ka[t.fc]}}))})),i)}return Fs(t,[{key:"addRule",value:function(t,e){this.rules[t]=e}},{key:"getRule",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(t,{type:e.ordinal?"ordinal":"cardinal"})}catch(t){return}return this.rules[t]||this.rules[this.languageUtils.getLanguagePartFromCode(t)]}},{key:"needsPlural",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this.getRule(t,e);return this.shouldUseIntlApi()?i&&i.resolvedOptions().pluralCategories.length>1:i&&i.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(t,i).map((function(t){return"".concat(e).concat(t)}))}},{key:"getSuffixes",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(t,i);return n?this.shouldUseIntlApi()?n.resolvedOptions().pluralCategories.sort((function(t,e){return Sa[t]-Sa[e]})).map((function(t){return"".concat(e.options.prepend).concat(t)})):n.numbers.map((function(n){return e.getSuffix(t,n,i)})):[]}},{key:"getSuffix",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=this.getRule(t,i);return n?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(n.select(e)):this.getSuffixRetroCompatible(n,e):(this.logger.warn("no plural rule found for: ".concat(t)),"")}},{key:"getSuffixRetroCompatible",value:function(t,e){var i=this,n=t.noAbs?t.plurals(e):t.plurals(Math.abs(e)),o=t.numbers[n];this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]&&(2===o?o="plural":1===o&&(o=""));var r=function(){return i.options.prepend&&o.toString()?i.options.prepend+o.toString():o.toString()};return"v1"===this.options.compatibilityJSON?1===o?"":"number"==typeof o?"_plural_".concat(o.toString()):r():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]?r():this.options.prepend&&n.toString()?this.options.prepend+n.toString():n.toString()}},{key:"shouldUseIntlApi",value:function(){return!Oa.includes(this.options.compatibilityJSON)}}]),t}();function Pa(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Ca(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Pa(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Pa(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Aa(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],r=function(t,e,i){var n=ia(t,i);return void 0!==n?n:ia(e,i)}(t,e,i);return!r&&o&&"string"==typeof i&&void 0===(r=ca(t,i,n))&&(r=ca(e,i,n)),r}var La=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};js(this,t),this.logger=Gs.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||function(t){return t},this.init(e)}return Fs(t,[{key:"init",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.interpolation||(t.interpolation={escapeValue:!0});var e=t.interpolation;this.escape=void 0!==e.escape?e.escape:sa,this.escapeValue=void 0===e.escapeValue||e.escapeValue,this.useRawValueToEscape=void 0!==e.useRawValueToEscape&&e.useRawValueToEscape,this.prefix=e.prefix?oa(e.prefix):e.prefixEscaped||"{{",this.suffix=e.suffix?oa(e.suffix):e.suffixEscaped||"}}",this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||",",this.unescapePrefix=e.unescapeSuffix?"":e.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":e.unescapeSuffix||"",this.nestingPrefix=e.nestingPrefix?oa(e.nestingPrefix):e.nestingPrefixEscaped||oa("$t("),this.nestingSuffix=e.nestingSuffix?oa(e.nestingSuffix):e.nestingSuffixEscaped||oa(")"),this.nestingOptionsSeparator=e.nestingOptionsSeparator?e.nestingOptionsSeparator:e.nestingOptionsSeparator||",",this.maxReplaces=e.maxReplaces?e.maxReplaces:1e3,this.alwaysFormat=void 0!==e.alwaysFormat&&e.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var t="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(t,"g");var e="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(e,"g");var i="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(i,"g")}},{key:"interpolate",value:function(t,e,i,n){var o,r,s,a=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function c(t){return t.replace(/\$/g,"$$$$")}var h=function(t){if(t.indexOf(a.formatSeparator)<0){var o=Aa(e,l,t,a.options.keySeparator,a.options.ignoreJSONStructure);return a.alwaysFormat?a.format(o,void 0,i,Ca(Ca(Ca({},n),e),{},{interpolationkey:t})):o}var r=t.split(a.formatSeparator),s=r.shift().trim(),c=r.join(a.formatSeparator).trim();return a.format(Aa(e,l,s,a.options.keySeparator,a.options.ignoreJSONStructure),c,i,Ca(Ca(Ca({},n),e),{},{interpolationkey:s}))};this.resetRegExp();var u=n&&n.missingInterpolationHandler||this.options.missingInterpolationHandler,d=n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(t){return c(t)}},{regex:this.regexp,safeValue:function(t){return a.escapeValue?c(a.escape(t)):c(t)}}].forEach((function(e){for(s=0;o=e.regex.exec(t);){var i=o[1].trim();if(void 0===(r=h(i)))if("function"==typeof u){var l=u(t,o,n);r="string"==typeof l?l:""}else if(n&&Object.prototype.hasOwnProperty.call(n,i))r="";else{if(d){r=o[0];continue}a.logger.warn("missed to pass in variable ".concat(i," for interpolating ").concat(t)),r=""}else"string"==typeof r||a.useRawValueToEscape||(r=Qs(r));var c=e.safeValue(r);if(t=t.replace(o[0],c),d?(e.regex.lastIndex+=r.length,e.regex.lastIndex-=o[0].length):e.regex.lastIndex=0,++s>=a.maxReplaces)break}})),t}},{key:"nest",value:function(t,e){var i,n,o,r=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function a(t,e){var i=this.nestingOptionsSeparator;if(t.indexOf(i)<0)return t;var n=t.split(new RegExp("".concat(i,"[ ]*{"))),r="{".concat(n[1]);t=n[0];var s=(r=this.interpolate(r,o)).match(/'/g),a=r.match(/"/g);(s&&s.length%2==0&&!a||a.length%2!=0)&&(r=r.replace(/'/g,'"'));try{o=JSON.parse(r),e&&(o=Ca(Ca({},e),o))}catch(e){return this.logger.warn("failed parsing options string in nesting for key ".concat(t),e),"".concat(t).concat(i).concat(r)}return delete o.defaultValue,t}for(;i=this.nestingRegexp.exec(t);){var l=[];(o=(o=Ca({},s)).replace&&"string"!=typeof o.replace?o.replace:o).applyPostProcessor=!1,delete o.defaultValue;var c=!1;if(-1!==i[0].indexOf(this.formatSeparator)&&!/{.*}/.test(i[1])){var h=i[1].split(this.formatSeparator).map((function(t){return t.trim()}));i[1]=h.shift(),l=h,c=!0}if((n=e(a.call(this,i[1].trim(),o),o))&&i[0]===t&&"string"!=typeof n)return n;"string"!=typeof n&&(n=Qs(n)),n||(this.logger.warn("missed to resolve ".concat(i[1]," for nesting ").concat(t)),n=""),c&&(n=l.reduce((function(t,e){return r.format(t,e,s.lng,Ca(Ca({},s),{},{interpolationkey:i[1].trim()}))}),n.trim())),t=t.replace(i[0],n),this.regexp.lastIndex=0}return t}}]),t}();function Ea(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Da(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Ea(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Ea(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Ra(t){var e={};return function(i,n,o){var r=n+JSON.stringify(o),s=e[r];return s||(s=t(n,o),e[r]=s),s(i)}}var Ta=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};js(this,t),this.logger=Gs.create("formatter"),this.options=e,this.formats={number:Ra((function(t,e){var i=new Intl.NumberFormat(t,Da({},e));return function(t){return i.format(t)}})),currency:Ra((function(t,e){var i=new Intl.NumberFormat(t,Da(Da({},e),{},{style:"currency"}));return function(t){return i.format(t)}})),datetime:Ra((function(t,e){var i=new Intl.DateTimeFormat(t,Da({},e));return function(t){return i.format(t)}})),relativetime:Ra((function(t,e){var i=new Intl.RelativeTimeFormat(t,Da({},e));return function(t){return i.format(t,e.range||"day")}})),list:Ra((function(t,e){var i=new Intl.ListFormat(t,Da({},e));return function(t){return i.format(t)}}))},this.init(e)}return Fs(t,[{key:"init",value:function(t){var e=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||","}},{key:"add",value:function(t,e){this.formats[t.toLowerCase().trim()]=e}},{key:"addCached",value:function(t,e){this.formats[t.toLowerCase().trim()]=Ra(e)}},{key:"format",value:function(t,e,i){var n=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return e.split(this.formatSeparator).reduce((function(t,e){var r=function(t){var e=t.toLowerCase().trim(),i={};if(t.indexOf("(")>-1){var n=t.split("(");e=n[0].toLowerCase().trim();var o=n[1].substring(0,n[1].length-1);"currency"===e&&o.indexOf(":")<0?i.currency||(i.currency=o.trim()):"relativetime"===e&&o.indexOf(":")<0?i.range||(i.range=o.trim()):o.split(";").forEach((function(t){if(t){var e=Ys(t.split(":")),n=e[0],o=e.slice(1).join(":").trim().replace(/^'+|'+$/g,"");i[n.trim()]||(i[n.trim()]=o),"false"===o&&(i[n.trim()]=!1),"true"===o&&(i[n.trim()]=!0),isNaN(o)||(i[n.trim()]=parseInt(o,10))}}))}return{formatName:e,formatOptions:i}}(e),s=r.formatName,a=r.formatOptions;if(n.formats[s]){var l=t;try{var c=o&&o.formatParams&&o.formatParams[o.interpolationkey]||{},h=c.locale||c.lng||o.locale||o.lng||i;l=n.formats[s](t,h,Da(Da(Da({},a),o),c))}catch(t){n.logger.warn(t)}return l}return n.logger.warn("there was no format function for ".concat(s)),t}),t)}}]),t}();function ja(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Ia(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?ja(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ja(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Na(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=Ws(t);if(e){var o=Ws(this).constructor;i=Reflect.construct(n,arguments,o)}else i=n.apply(this,arguments);return Hs(this,i)}}var Fa=function(t){Bs(i,t);var e=Na(i);function i(t,n,o){var r,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return js(this,i),r=e.call(this),aa&&Js.call(Vs(r)),r.backend=t,r.store=n,r.services=o,r.languageUtils=o.languageUtils,r.options=s,r.logger=Gs.create("backendConnector"),r.waitingReads=[],r.maxParallelReads=s.maxParallelReads||10,r.readingCalls=0,r.maxRetries=s.maxRetries>=0?s.maxRetries:5,r.retryTimeout=s.retryTimeout>=1?s.retryTimeout:350,r.state={},r.queue=[],r.backend&&r.backend.init&&r.backend.init(o,s.backend,s),r}return Fs(i,[{key:"queueLoad",value:function(t,e,i,n){var o=this,r={},s={},a={},l={};return t.forEach((function(t){var n=!0;e.forEach((function(e){var a="".concat(t,"|").concat(e);!i.reload&&o.store.hasResourceBundle(t,e)?o.state[a]=2:o.state[a]<0||(1===o.state[a]?void 0===s[a]&&(s[a]=!0):(o.state[a]=1,n=!1,void 0===s[a]&&(s[a]=!0),void 0===r[a]&&(r[a]=!0),void 0===l[e]&&(l[e]=!0)))})),n||(a[t]=!0)})),(Object.keys(r).length||Object.keys(s).length)&&this.queue.push({pending:s,pendingCount:Object.keys(s).length,loaded:{},errors:[],callback:n}),{toLoad:Object.keys(r),pending:Object.keys(s),toLoadLanguages:Object.keys(a),toLoadNamespaces:Object.keys(l)}}},{key:"loaded",value:function(t,e,i){var n=t.split("|"),o=n[0],r=n[1];e&&this.emit("failedLoading",o,r,e),i&&this.store.addResourceBundle(o,r,i),this.state[t]=e?-1:2;var s={};this.queue.forEach((function(i){var n,a,l,c,h,u;n=i.loaded,a=r,c=ta(n,[o],Object),h=c.obj,u=c.k,h[u]=h[u]||[],l&&(h[u]=h[u].concat(a)),l||h[u].push(a),function(t,e){void 0!==t.pending[e]&&(delete t.pending[e],t.pendingCount--)}(i,t),e&&i.errors.push(e),0!==i.pendingCount||i.done||(Object.keys(i.loaded).forEach((function(t){s[t]||(s[t]={});var e=i.loaded[t];e.length&&e.forEach((function(e){void 0===s[t][e]&&(s[t][e]=!0)}))})),i.done=!0,i.errors.length?i.callback(i.errors):i.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((function(t){return!t.done}))}},{key:"read",value:function(t,e,i){var n=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,s=arguments.length>5?arguments[5]:void 0;if(!t.length)return s(null,{});if(this.readingCalls>=this.maxParallelReads)this.waitingReads.push({lng:t,ns:e,fcName:i,tried:o,wait:r,callback:s});else{this.readingCalls++;var a=function(a,l){if(n.readingCalls--,n.waitingReads.length>0){var c=n.waitingReads.shift();n.read(c.lng,c.ns,c.fcName,c.tried,c.wait,c.callback)}a&&l&&o<n.maxRetries?setTimeout((function(){n.read.call(n,t,e,i,o+1,2*r,s)}),r):s(a,l)},l=this.backend[i].bind(this.backend);if(2!==l.length)return l(t,e,a);try{var c=l(t,e);c&&"function"==typeof c.then?c.then((function(t){return a(null,t)})).catch(a):a(null,c)}catch(t){a(t)}}}},{key:"prepareLoading",value:function(t,e){var i=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]);var r=this.queueLoad(t,e,n,o);if(!r.toLoad.length)return r.pending.length||o(),null;r.toLoad.forEach((function(t){i.loadOne(t)}))}},{key:"load",value:function(t,e,i){this.prepareLoading(t,e,{},i)}},{key:"reload",value:function(t,e,i){this.prepareLoading(t,e,{reload:!0},i)}},{key:"loadOne",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=t.split("|"),o=n[0],r=n[1];this.read(o,r,"read",void 0,void 0,(function(n,s){n&&e.logger.warn("".concat(i,"loading namespace ").concat(r," for language ").concat(o," failed"),n),!n&&s&&e.logger.log("".concat(i,"loaded namespace ").concat(r," for language ").concat(o),s),e.loaded(t,n,s)}))}},{key:"saveMissing",value:function(t,e,i,n,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:function(){};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(e))this.logger.warn('did not save key "'.concat(i,'" as the namespace "').concat(e,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=i&&""!==i){if(this.backend&&this.backend.create){var a=Ia(Ia({},r),{},{isUpdate:o}),l=this.backend.create.bind(this.backend);if(l.length<6)try{var c;(c=5===l.length?l(t,e,i,n,a):l(t,e,i,n))&&"function"==typeof c.then?c.then((function(t){return s(null,t)})).catch(s):s(null,c)}catch(t){s(t)}else l(t,e,i,n,s,a)}t&&t[0]&&this.store.addResource(t[0],e,i,n)}}}]),i}(Js);function Va(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(t){var e={};if("object"===Ts(t[1])&&(e=t[1]),"string"==typeof t[1]&&(e.defaultValue=t[1]),"string"==typeof t[2]&&(e.tDescription=t[2]),"object"===Ts(t[2])||"object"===Ts(t[3])){var i=t[3]||t[2];Object.keys(i).forEach((function(t){e[t]=i[t]}))}return e},interpolation:{escapeValue:!0,format:function(t,e,i,n){return t},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function za(t){return"string"==typeof t.ns&&(t.ns=[t.ns]),"string"==typeof t.fallbackLng&&(t.fallbackLng=[t.fallbackLng]),"string"==typeof t.fallbackNS&&(t.fallbackNS=[t.fallbackNS]),t.supportedLngs&&t.supportedLngs.indexOf("cimode")<0&&(t.supportedLngs=t.supportedLngs.concat(["cimode"])),t}function Ba(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Ha(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Ba(Object(i),!0).forEach((function(e){Us(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Ba(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function Wa(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=Ws(t);if(e){var o=Ws(this).constructor;i=Reflect.construct(n,arguments,o)}else i=n.apply(this,arguments);return Hs(this,i)}}function Ua(){}var $a=function(t){Bs(i,t);var e=Wa(i);function i(){var t,n,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;if(js(this,i),t=e.call(this),aa&&Js.call(Vs(t)),t.options=za(o),t.services={},t.logger=Gs,t.modules={external:[]},n=Vs(t),Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((function(t){"function"==typeof n[t]&&(n[t]=n[t].bind(n))})),r&&!t.isInitialized&&!o.isClone){if(!t.options.initImmediate)return t.init(o,r),Hs(t,Vs(t));setTimeout((function(){t.init(o,r)}),0)}return t}return Fs(i,[{key:"init",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1?arguments[1]:void 0;"function"==typeof e&&(i=e,e={}),!e.defaultNS&&!1!==e.defaultNS&&e.ns&&("string"==typeof e.ns?e.defaultNS=e.ns:e.ns.indexOf("translation")<0&&(e.defaultNS=e.ns[0]));var n=Va();function o(t){return t?"function"==typeof t?new t:t:null}if(this.options=Ha(Ha(Ha({},n),this.options),za(e)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=Ha(Ha({},n.interpolation),this.options.interpolation)),void 0!==e.keySeparator&&(this.options.userDefinedKeySeparator=e.keySeparator),void 0!==e.nsSeparator&&(this.options.userDefinedNsSeparator=e.nsSeparator),!this.options.isClone){var r;this.modules.logger?Gs.init(o(this.modules.logger),this.options):Gs.init(null,this.options),this.modules.formatter?r=this.modules.formatter:"undefined"!=typeof Intl&&(r=Ta);var s=new _a(this.options);this.store=new fa(this.options.resources,this.options);var a=this.services;a.logger=Gs,a.resourceStore=this.store,a.languageUtils=s,a.pluralResolver=new Ma(s,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!r||this.options.interpolation.format&&this.options.interpolation.format!==n.interpolation.format||(a.formatter=o(r),a.formatter.init(a,this.options),this.options.interpolation.format=a.formatter.format.bind(a.formatter)),a.interpolator=new La(this.options),a.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},a.backendConnector=new Fa(o(this.modules.backend),a.resourceStore,a,this.options),a.backendConnector.on("*",(function(e){for(var i=arguments.length,n=new Array(i>1?i-1:0),o=1;o<i;o++)n[o-1]=arguments[o];t.emit.apply(t,[e].concat(n))})),this.modules.languageDetector&&(a.languageDetector=o(this.modules.languageDetector),a.languageDetector.init&&a.languageDetector.init(a,this.options.detection,this.options)),this.modules.i18nFormat&&(a.i18nFormat=o(this.modules.i18nFormat),a.i18nFormat.init&&a.i18nFormat.init(this)),this.translator=new va(this.services,this.options),this.translator.on("*",(function(e){for(var i=arguments.length,n=new Array(i>1?i-1:0),o=1;o<i;o++)n[o-1]=arguments[o];t.emit.apply(t,[e].concat(n))})),this.modules.external.forEach((function(e){e.init&&e.init(t)}))}if(this.format=this.options.interpolation.format,i||(i=Ua),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var l=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);l.length>0&&"dev"!==l[0]&&(this.options.lng=l[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((function(e){t[e]=function(){var i;return(i=t.store)[e].apply(i,arguments)}}));["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((function(e){t[e]=function(){var i;return(i=t.store)[e].apply(i,arguments),t}}));var c=Zs(),h=function(){var e=function(e,n){t.isInitialized&&!t.initializedStoreOnce&&t.logger.warn("init: i18next is already initialized. You should call init just once!"),t.isInitialized=!0,t.options.isClone||t.logger.log("initialized",t.options),t.emit("initialized",t.options),c.resolve(n),i(e,n)};if(t.languages&&"v1"!==t.options.compatibilityAPI&&!t.isInitialized)return e(null,t.t.bind(t));t.changeLanguage(t.options.lng,e)};return this.options.resources||!this.options.initImmediate?h():setTimeout(h,0),c}},{key:"loadResources",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ua,n="string"==typeof t?t:this.language;if("function"==typeof t&&(i=t),!this.options.resources||this.options.partialBundledLanguages){if(n&&"cimode"===n.toLowerCase())return i();var o=[],r=function(t){t&&e.services.languageUtils.toResolveHierarchy(t).forEach((function(t){o.indexOf(t)<0&&o.push(t)}))};if(n)r(n);else this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((function(t){return r(t)}));this.options.preload&&this.options.preload.forEach((function(t){return r(t)})),this.services.backendConnector.load(o,this.options.ns,(function(t){t||e.resolvedLanguage||!e.language||e.setResolvedLanguage(e.language),i(t)}))}else i(null)}},{key:"reloadResources",value:function(t,e,i){var n=Zs();return t||(t=this.languages),e||(e=this.options.ns),i||(i=Ua),this.services.backendConnector.reload(t,e,(function(t){n.resolve(),i(t)})),n}},{key:"use",value:function(t){if(!t)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!t.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===t.type&&(this.modules.backend=t),("logger"===t.type||t.log&&t.warn&&t.error)&&(this.modules.logger=t),"languageDetector"===t.type&&(this.modules.languageDetector=t),"i18nFormat"===t.type&&(this.modules.i18nFormat=t),"postProcessor"===t.type&&pa.addPostProcessor(t),"formatter"===t.type&&(this.modules.formatter=t),"3rdParty"===t.type&&this.modules.external.push(t),this}},{key:"setResolvedLanguage",value:function(t){if(t&&this.languages&&!(["cimode","dev"].indexOf(t)>-1))for(var e=0;e<this.languages.length;e++){var i=this.languages[e];if(!(["cimode","dev"].indexOf(i)>-1)&&this.store.hasLanguageSomeTranslations(i)){this.resolvedLanguage=i;break}}}},{key:"changeLanguage",value:function(t,e){var i=this;this.isLanguageChangingTo=t;var n=Zs();this.emit("languageChanging",t);var o=function(t){i.language=t,i.languages=i.services.languageUtils.toResolveHierarchy(t),i.resolvedLanguage=void 0,i.setResolvedLanguage(t)},r=function(r){t||r||!i.services.languageDetector||(r=[]);var s="string"==typeof r?r:i.services.languageUtils.getBestMatchFromCodes(r);s&&(i.language||o(s),i.translator.language||i.translator.changeLanguage(s),i.services.languageDetector&&i.services.languageDetector.cacheUserLanguage&&i.services.languageDetector.cacheUserLanguage(s)),i.loadResources(s,(function(t){!function(t,r){r?(o(r),i.translator.changeLanguage(r),i.isLanguageChangingTo=void 0,i.emit("languageChanged",r),i.logger.log("languageChanged",r)):i.isLanguageChangingTo=void 0,n.resolve((function(){return i.t.apply(i,arguments)})),e&&e(t,(function(){return i.t.apply(i,arguments)}))}(t,s)}))};return t||!this.services.languageDetector||this.services.languageDetector.async?!t&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(r):this.services.languageDetector.detect(r):r(t):r(this.services.languageDetector.detect()),n}},{key:"getFixedT",value:function(t,e,i){var n=this,o=function t(e,o){var r;if("object"!==Ts(o)){for(var s=arguments.length,a=new Array(s>2?s-2:0),l=2;l<s;l++)a[l-2]=arguments[l];r=n.options.overloadTranslationOptionHandler([e,o].concat(a))}else r=Ha({},o);r.lng=r.lng||t.lng,r.lngs=r.lngs||t.lngs,r.ns=r.ns||t.ns,r.keyPrefix=r.keyPrefix||i||t.keyPrefix;var c,h=n.options.keySeparator||".";return c=r.keyPrefix&&Array.isArray(e)?e.map((function(t){return"".concat(r.keyPrefix).concat(h).concat(t)})):r.keyPrefix?"".concat(r.keyPrefix).concat(h).concat(e):e,n.t(c,r)};return"string"==typeof t?o.lng=t:o.lngs=t,o.ns=e,o.keyPrefix=i,o}},{key:"t",value:function(){var t;return this.translator&&(t=this.translator).translate.apply(t,arguments)}},{key:"exists",value:function(){var t;return this.translator&&(t=this.translator).exists.apply(t,arguments)}},{key:"setDefaultNamespace",value:function(t){this.options.defaultNS=t}},{key:"hasLoadedNamespace",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var n=i.lng||this.resolvedLanguage||this.languages[0],o=!!this.options&&this.options.fallbackLng,r=this.languages[this.languages.length-1];if("cimode"===n.toLowerCase())return!0;var s=function(t,i){var n=e.services.backendConnector.state["".concat(t,"|").concat(i)];return-1===n||2===n};if(i.precheck){var a=i.precheck(this,s);if(void 0!==a)return a}return!!this.hasResourceBundle(n,t)||(!(this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages))||!(!s(n,t)||o&&!s(r,t)))}},{key:"loadNamespaces",value:function(t,e){var i=this,n=Zs();return this.options.ns?("string"==typeof t&&(t=[t]),t.forEach((function(t){i.options.ns.indexOf(t)<0&&i.options.ns.push(t)})),this.loadResources((function(t){n.resolve(),e&&e(t)})),n):(e&&e(),Promise.resolve())}},{key:"loadLanguages",value:function(t,e){var i=Zs();"string"==typeof t&&(t=[t]);var n=this.options.preload||[],o=t.filter((function(t){return n.indexOf(t)<0}));return o.length?(this.options.preload=n.concat(o),this.loadResources((function(t){i.resolve(),e&&e(t)})),i):(e&&e(),Promise.resolve())}},{key:"dir",value:function(t){if(t||(t=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!t)return"rtl";var e=this.services&&this.services.languageUtils||new _a(Va());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(e.getLanguagePartFromCode(t))>-1||t.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}},{key:"cloneInstance",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ua,o=Ha(Ha(Ha({},this.options),e),{isClone:!0}),r=new i(o);void 0===e.debug&&void 0===e.prefix||(r.logger=r.logger.clone(e));return["store","services","language"].forEach((function(e){r[e]=t[e]})),r.services=Ha({},this.services),r.services.utils={hasLoadedNamespace:r.hasLoadedNamespace.bind(r)},r.translator=new va(r.services,r.options),r.translator.on("*",(function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];r.emit.apply(r,[t].concat(i))})),r.init(o,n),r.translator.options=r.options,r.translator.backendConnector.services.utils={hasLoadedNamespace:r.hasLoadedNamespace.bind(r)},r}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),i}(Js);Us($a,"createInstance",(function(){return new $a(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}));var Ya=$a.createInstance();Ya.createInstance=$a.createInstance;Ya.createInstance,Ya.dir,Ya.init,Ya.loadResources,Ya.reloadResources,Ya.use,Ya.changeLanguage,Ya.getFixedT,Ya.t,Ya.exists,Ya.setDefaultNamespace,Ya.hasLoadedNamespace,Ya.loadNamespaces,Ya.loadLanguages;function Ka(t){return Ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ka(t)}function qa(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,r=void 0,r=function(t,e){if("object"!==Ka(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==Ka(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Ka(r)?r:String(r)),n)}var o,r}var Xa=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._data=e,this._options=i,this._canvas=t.createCanvas()}var e,i,n;return e=t,i=[{key:"addImageOverlay",value:function(t){var e=document.createElement("a");e.href="https://vindecoder.eu/";var i=document.createElement("img"),n=new Blob(['<svg height="396" viewBox="0 0 383 396" width="383" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" x1="50%" x2="50%" y1="-14.583939%" y2="24.327613%"><stop offset="0" stop-color="#008684" stop-opacity="0"/><stop offset="1" stop-color="#008684"/></linearGradient><g fill="none" fill-rule="evenodd"><g transform="translate(41)"><path d="m0 104.017895 26.3157895 13.09421v90.434737l122.8757895 61.141053 122.876316-61.141053v-90.434737l26.315789-13.09421v119.71421l-149.191579 74.235263s-99.4615787-49.49-149.192105-74.235263z" fill="url(#a)"/><path d="m149.192105 149.192105-149.192105-74.5963155v-74.5957895l149.192105 74.5957895 149.191579-74.5957895v74.5957895z" fill="#00c474"/></g><g fill="#008684" transform="translate(-1 337)"><path d="m31.5877895 57.1184842h-2.7109895l-27.82964211-55.72193683h13.30635791c5.2928842 10.56151583 10.586021 21.12328423 15.8789053 31.68480003l15.8789052-31.68480003h13.3280842z"/><path d="m63.6328421 57.9562105h11.9009684v-56.55966313h-11.9009684z"/><path d="m96.1932632 57.8791579h-11.9014737v-55.04412632l2.5288421-1.12623158 33.1048424 29.8085053v-30.19781056h11.979789v55.12117896c-.843789.3759158-1.687579.7515789-2.528842 1.1274947l-33.1831578-29.814821z"/><path d="m168.473684 1.39705263c7.318737.06366316 14.465684 3.08336842 19.664842 8.18905263l1.093895 1.20126314-8.367158 8.4578527c-5.153684-5.1334737-12.962526-7.5049264-19.65221-4.269979-7.664842 3.7066105-11.754948 13.7974737-7.520842 22.0400842 4.256842 8.2878316 16.395789 12.3837474 25.015578 5.2140632.351158-.2930527.692211-.5997474 1.023158-.9160421l1.144421-1.106779 8.33179 8.3108211-.949895 1.1305263c-11.115789 11.0571789-31.674947 11.4722526-42.641684-3.0538105-7.533474-9.9797053-7.381895-25.1184 1.053474-35.0928 5.262315-6.22231583 13.184842-10.03048425 21.440842-10.10425267.121263-.00025263.242526-.00025263.363789 0z"/><path d="m220.140632 58.1219368h-2.71099l-27.829642-55.7219368h13.306358c5.292884 10.5615158 10.586021 21.1232842 15.878905 31.6848l15.878905-31.6848h13.328085z" transform="matrix(-1 0 0 -1 437.592252 60.521936)"/><path d="m262.096421 57.9562105h-11.901474v-56.55966313c9.468632 0 18.934737-.024 28.403369.00025263 7.801263.06593684 15.344842 5.2224 18.078316 12.6990316 3.150315 8.6220631-.760421 19.389221-9.266527 23.8221473 0 0 11.552842 20.0382316 11.552842 20.0382316h-13.801263l-10.335158-17.8170947h-12.730105zm0-44.5813894v14.7155368c5.492211.0234947 10.984421.1025684 16.474105.0699789 4.693895-.0803368 8.574316-5.4666947 6.785685-10.0595368-1.061053-2.7271579-3.784422-4.6741895-6.785685-4.7254737-5.489684-.0305684-10.981894-.0005052-16.474105-.0005052z"/><path d="m306.567158 57.9562105h11.900968v-56.55966313h-11.900968z"/><path d="m355.686316 1.39705263c16.138105.13288421 30.841263 15.55578947 27.746526 33.42770527-2.526316 14.5877053-17.868631 25.6145684-33.559579 22.6128-18.386526-3.5178947-31.831579-28.6489263-15.337263-46.6853053 5.206737-5.69178944 12.530526-9.19856839 20.422737-9.35115786.242526-.00353685.485052-.0048.727579-.00404211zm-.288 11.97802107c-10.01179.0808421-19.374316 10.6115368-15.226105 22.0115368 2.963368 8.1362527 13.202526 13.1075369 21.918315 9.261979 9.999158-4.4112 14.101895-20.4803369 2.463158-28.5309474-2.657684-1.8381474-5.893895-2.7521684-9.155368-2.7425684z"/></g></g></svg>'],{type:"image/svg+xml"});i.src=URL.createObjectURL(n),i.style.position="absolute",i.style.right="40px",i.style.opacity="0.7",i.style.maxWidth="100%",i.style.top="130px",i.style.width="7%",i.style.height="auto",i.style.maxHeight="70px",i.style.zIndex="99",e.appendChild(i),t?t.appendChild(e):(console.warn("Container element not found."),document.body.appendChild(e))}},{key:"createTextElement",value:function(t){var e=document.createElement("p");return e.textContent=t,e}},{key:"createExplanatoryBox",value:function(t,e){var i=document.createElement("div");i.classList.add("chart-explanatory-box-container");var n=document.createElement("div");n.classList.add("chart-explanatory-box"),n.classList.add(e);var o=this.createTextElement(t);return i.appendChild(n),i.appendChild(o),i}},{key:"createTrendlineSign",value:function(){var t=document.createElement("div");t.classList.add("trend-line-sign-container");var e=document.createElement("div");e.classList.add("trend-line-sign");var i=this.createTextElement(Ya.t("TRENDLINE"));return t.appendChild(e),t.appendChild(i),t}},{key:"wrapAndAddOverlay",value:function(t,e,i){t.style.position="relative",this.addImageOverlay(t),t.appendChild(e),i?i.appendChild(t):document.body.appendChild(t)}}],n=[{key:"createCanvas",value:function(){return document.createElement("canvas")}}],i&&qa(e.prototype,i),n&&qa(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ga(t){return Ga="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ga(t)}function Ja(t){return function(t){if(Array.isArray(t))return Za(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Za(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Za(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Za(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function Qa(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,ol(n.key),n)}}function tl(t,e){return tl=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},tl(t,e)}function el(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=nl(t);if(e){var o=nl(this).constructor;i=Reflect.construct(n,arguments,o)}else i=n.apply(this,arguments);return function(t,e){if(e&&("object"===Ga(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return il(t)}(this,i)}}function il(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function nl(t){return nl=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},nl(t)}function ol(t){var e=function(t,e){if("object"!==Ga(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==Ga(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ga(e)?e:String(e)}var rl=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&tl(t,e)}(r,t);var e,i,n,o=el(r);function r(){var t,e,i,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r);for(var s=arguments.length,a=new Array(s),l=0;l<s;l++)a[l]=arguments[l];return t=o.call.apply(o,[this].concat(a)),e=il(t),n=5,(i=ol(i="_minPriceVsOdoChartsResults"))in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,t}return e=r,i=[{key:"getTrendLineY",value:function(t,e){return e.m*t+e.b}},{key:"getPointColors",value:function(t,e,i){var n=this;return t.map((function(t,o){return e[o]>n.getTrendLineY(t,i)?"rgba(165,42,42,.5)":"rgba(61,133,106,.5)"}))}},{key:"prepareConfig",value:function(t){var e=this;return{type:"line",data:{labels:t.processedPriceValues,datasets:[{backgroundColor:"rgba(0, 0, 0, 0)",borderColor:"rgba(0, 0, 0, 0.5)",data:t.trendLineData,fill:!1,yAxisID:"left-y-axis",pointRadius:0,pointBackgroundColor:"#fff",borderWidth:3,hoverBackgroundColor:"rgba(0, 0, 0, 0.5)",hoverBorderColor:"rgba(0, 0, 0, 0.7)",hoverBorderWidth:5},{backgroundColor:"rgb(75, 192, 192)",data:t.processedOdometerValues.map((function(e,i){return{x:e,y:t.processedPriceValues[i]}})),fill:!1,yAxisID:"right-y-axis",pointRadius:3,pointHoverRadius:5,showLine:!1,pointBackgroundColor:t.pointColors}]},options:{aspectRatio:2,plugins:{legend:{display:!1},tooltip:{callbacks:{title:function(){return null},label:function(t){var i=t.dataIndex,n=t.dataset,o=n.data[i].y,r=n.data[i].x;return(0===t.datasetIndex?Ya.t("TRENDLINE"):"")+" ".concat(Math.round(o).toLocaleString()," ").concat(e._options.currency," / ").concat(r.toLocaleString()," ").concat(e._options.lengthUnit)}}},backgroundImage:{image:"src/assets/logo.svg",x:0,y:0,width:"100%",height:"100%"}},interaction:{intersect:!1,mode:"nearest"},scales:{"left-y-axis":{type:"linear",position:"left",min:0,max:1e3*Math.ceil(1.1*Math.max.apply(Math,Ja(t.processedPriceValues))/1e3),ticks:{stepSize:100*Math.ceil(1.1*Math.max.apply(Math,Ja(t.processedPriceValues))/1e3)},title:{display:!0,text:Ya.t("PRICE")+" ("+this._options.currency+")",padding:{top:0,left:0,right:0,bottom:10}}},"right-y-axis":{type:"linear",position:"right",display:!1,min:0,max:1e3*Math.ceil(1.1*Math.max.apply(Math,Ja(t.processedPriceValues))/1e3),ticks:{stepSize:100*Math.ceil(1.1*Math.max.apply(Math,Ja(t.processedPriceValues))/1e3),autoSkip:!1}},x:{ticks:{autoSkip:!0,maxTicksLimit:10},type:"linear",display:!0,max:t.maxOdoValue+.1*(t.maxOdoValue-t.minOdoValue),title:{display:!0,text:Ya.t("ODOMETER")+" ("+this._options.lengthUnit+")",padding:{top:20,left:0,right:0,bottom:0}}}}}}}},{key:"prepareChartData",value:function(){var t=this,e=[],i=[];this._data.records.forEach((function(t){var n=new Date;n.setFullYear(n.getFullYear()-1),e.push(1e3*Math.floor(t.odometer/1e3)),i.push(Math.floor(t.price))}));for(var n=Math.min.apply(Math,e),o=Math.max.apply(Math,e),r=(new Set,[]),s=0;s<e.length;s++){var a=e[s],l=i[s];r.push({x:a,y:l})}var c=function(t){var e,i,n=t.length;if(1===n)e=0,i=t[0][1];else{for(var o,r,s,a=0,l=0,c=0,h=0,u=0;u<n;u++)a+=r=(o=t[u])[0],l+=s=o[1],c+=r*r,h+=r*s;i=l/n-(e=(n*h-a*l)/(n*c-a*a))*a/n}return{m:e,b:i}}(r.map((function(t){return[t.x,t.y]}))),h=r.map((function(e){return{x:e.x,y:t.getTrendLineY(e.x,c)}})),u=this.getPointColors(e,i,c);if(e.length<this._minPriceVsOdoChartsResults||i.length<this._minPriceVsOdoChartsResults)throw new Error("Not enough data to create chart.");return{pointColors:u,processedOdometerValues:e,processedPriceValues:i,minOdoValue:n,maxOdoValue:o,trendLineData:h}}},{key:"createCartHeader",value:function(t){var e=document.createElement("p");e.textContent="".concat(Ya.t("VEHICLE_PRICE_MAP"),": ").concat(this._data.vehicle.make," ").concat(this._data.vehicle.model," ").concat(this._data.vehicle.model_year),e.classList.add("chartHeader");var i=document.createElement("div");i.classList.add("chart-explanatory"),i.appendChild(this.createTrendlineSign()),i.appendChild(this.createExplanatoryBox(Ya.t("BELLOW_AVERAGE"),"chart-explanatory-box-green")),i.appendChild(this.createExplanatoryBox(Ya.t("ABOVE_AVERAGE"),"chart-explanatory-box-red")),t.prepend(i),t.prepend(e)}},{key:"draw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;try{var e=this.prepareChartData(),i=document.createElement("div"),n=this._canvas.getContext("2d"),o=this.prepareConfig(e),r=new Rs(n,o);this.wrapAndAddOverlay(i,r.canvas,t),this.createCartHeader(i)}catch(t){console.error("Error creating chart: ".concat(t.message))}}}],i&&Qa(e.prototype,i),n&&Qa(e,n),Object.defineProperty(e,"prototype",{writable:!1}),r}(Xa);function sl(t){return sl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sl(t)}function al(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,r=void 0,r=function(t,e){if("object"!==sl(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==sl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===sl(r)?r:String(r)),n)}var o,r}function ll(t,e){return ll=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ll(t,e)}function cl(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=hl(t);if(e){var o=hl(this).constructor;i=Reflect.construct(n,arguments,o)}else i=n.apply(this,arguments);return function(t,e){if(e&&("object"===sl(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function hl(t){return hl=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},hl(t)}var ul=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ll(t,e)}(r,t);var e,i,n,o=cl(r);function r(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),o.apply(this,arguments)}return e=r,i=[{key:"histogram",value:function(t,e){(e=e||{}).copy=void 0===e.copy||e.copy,e.pretty=void 0===e.pretty||e.pretty;var i=t;function n(t){var e=1+(i.length-1)*t,n=Math.floor(e),o=Math.ceil(e),r=e-n;return(1-r)*i[n]+r*i[o]}e.copy&&(i=i.slice()),i.sort((function(t,e){return t-e}));var o,r,s,a=2*(n(.75)-n(.25))*Math.pow(i.length,-1/3);function l(t){return a*Math.floor(t/a)}return e.pretty&&(o=a,r=Math.pow(10,Math.floor(Math.log(o/10)/Math.LN10)),(s=10/o*r)<=.15?r*=10:s<=.35?r*=5:s<=.75&&(r*=2),a=10*r),{size:a,fun:l,tickRange:function(t){var e=[l(i[0]),a+l(i[i.length-1])],n=Math.round((e[1]-e[0])/a),o=n>t?Math.round(n/t):1,r=n%o;return[e[0]+a*Math.floor(r/2),e[1]-a*Math.ceil(r/2)+.5*a,a*o]}}}},{key:"range",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,n=Math.floor((e-t)/i)+1;return Array(n).fill(void 0).map((function(e,n){return t+n*i}))}},{key:"calculatePercentile",value:function(t,e){return e.sort((function(t,e){return t-e})),e[Math.ceil(t*e.length)-1]}},{key:"getSegmentColor",value:function(t,e){var i=t.p0.parsed.x;return i<e.percentile15?"rgb(39, 255, 166,0.5)":i>e.percentile75?"rgb(165, 42, 42,0.5)":"rgb(243, 137, 1,0.5)"}},{key:"prepareConfig",value:function(t){var e=this;return{type:"line",data:{labels:t.binLabels,datasets:[{fill:!0,borderWidth:3,pointRadius:4,borderRadius:10,data:t.binCounts,tension:.4,pointBackgroundColor:"#fff",pointBorderColor:"#333",segment:{backgroundColor:function(i){return e.getSegmentColor(i,t)},borderColor:"#57B1CD"}}]},options:{aspectRatio:2,interaction:{intersect:!1,mode:"index"},scales:{y:{display:!0,title:{display:!0,text:Ya.t("COUNT_OF_VEHICLES"),padding:10}},x:{type:"linear",ticks:{stepSize:t.binRange[2]},title:{display:!0,text:Ya.t("PRICE")+" ("+this._options.currency+")",padding:10},max:Math.round(t.binRange[1])+t.binRange[2]}},plugins:{legend:{display:!1},tooltip:{callbacks:{title:function(t){return Ya.t("NUMBERS_OF_VEHICLE_LISTING")}}}}}}}},{key:"prepareChartData",value:function(){for(var t=this._data.records.map((function(t){return Math.floor(t.price)})),e=this.histogram(t,{}),i=e.tickRange(5),n=this.range(i[0],Math.round(i[1]),i[2]),o=Array(n.length).fill(0),r=0;r<t.length;r++){var s=t[r];o[n.indexOf(e.fun(s))]++}return{prices:t,binLabels:n,binCounts:o,percentile15:this.calculatePercentile(.15,t),percentile75:this.calculatePercentile(.75,t),binRange:i}}},{key:"createCartHeader",value:function(t){var e=document.createElement("p");e.textContent="".concat(Ya.t("VEHICLE_PRICE_DISTRIBUTION"),": ").concat(this._data.vehicle.make," ").concat(this._data.vehicle.model," ").concat(this._data.vehicle.model_year),e.classList.add("chartHeader");var i=document.createElement("div");i.classList.add("chart-explanatory"),i.appendChild(this.createExplanatoryBox(Ya.t("BELLOW_AVERAGE"),"chart-explanatory-box-green")),i.appendChild(this.createExplanatoryBox(Ya.t("AVERAGE"),"chart-explanatory-box-orange")),i.appendChild(this.createExplanatoryBox(Ya.t("ABOVE_AVERAGE"),"chart-explanatory-box-red")),t.prepend(i),t.prepend(e)}},{key:"draw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;try{var e=this.prepareChartData();if(0===e.prices.length)throw new Error("No data to display");Rs.registry.getScale("linear")||Rs.register(ss);var i=document.createElement("div"),n=this._canvas.getContext("2d"),o=this.prepareConfig(e),r=new Rs(n,o);this.wrapAndAddOverlay(i,r.canvas,t),this.createCartHeader(i)}catch(t){console.error(t)}}}],i&&al(e.prototype,i),n&&al(e,n),Object.defineProperty(e,"prototype",{writable:!1}),r}(Xa);const dl={VEHICLE_PRICE_DISTRIBUTION:"Vehicle Price Distribution",VEHICLE_PRICE_MAP:"Vehicle Price Map",PRICE:"Price",ODOMETER:"Odometer",TRENDLINE:"Trendline",BELLOW_AVERAGE:"Bellow average",AVERAGE:"Market average",ABOVE_AVERAGE:"Above average",COUNT_OF_VEHICLES:"Count of vehicles",NUMBERS_OF_VEHICLE_LISTING:"Number of vehicle listings in the price range"};function fl(t){return fl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},fl(t)}function pl(t,e){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function(t,e){if(!t)return;if("string"==typeof t)return gl(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return gl(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function gl(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function ml(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function bl(t,e,i){return(e=vl(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function yl(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,vl(n.key),n)}}function vl(t){var e=function(t,e){if("object"!==fl(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var n=i.call(t,e||"default");if("object"!==fl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===fl(e)?e:String(e)}var xl=function(){function t(e,n){var o,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.vincode=e,this.options=n,Promise.resolve().then(i.bind(i,873)),o=n.language||"en",r={lng:o,debug:!1,resources:{en:{translation:dl}}},Ya.init(r),this.options=function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?ml(Object(i),!0).forEach((function(e){bl(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ml(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({currency:"EUR",lengthUnit:"km",language:"en"},this.options)}var e,n,o;return e=t,o=[{key:"createWithData",value:function(e,i){var n=new t("",i);return n.initWithData(e),n}}],(n=[{key:"initWithData",value:function(t){var e,i;this.options.currency=null!==(e=t.records[0].price_currency)&&void 0!==e?e:this.options.currency,this.options.lengthUnit=null!==(i=t.market_odometer.odometer_unit)&&void 0!==i?i:this.options.lengthUnit,this.draw(t)}},{key:"draw",value:function(t){var e=this.options,i=e.graphs,n=e.containerElement;if(n){var o,r={PriceHistogramChart:ul,PriceOdoChart:rl},s=pl(null!=i?i:Object.keys(r));try{for(s.s();!(o=s.n()).done;)new(0,r[o.value])(t,this.options).draw(n)}catch(t){s.e(t)}finally{s.f()}}else console.error("Container element not found.")}}])&&yl(e.prototype,n),o&&yl(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}();function _l(t){return _l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_l(t)}function wl(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */wl=function(){return t};var t={},e=Object.prototype,i=e.hasOwnProperty,n=Object.defineProperty||function(t,e,i){t[e]=i.value},o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function l(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,i){return t[e]=i}}function c(t,e,i,o){var r=e&&e.prototype instanceof d?e:d,s=Object.create(r.prototype),a=new S(o||[]);return n(s,"_invoke",{value:_(t,i,a)}),s}function h(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var u={};function d(){}function f(){}function p(){}var g={};l(g,r,(function(){return this}));var m=Object.getPrototypeOf,b=m&&m(m(M([])));b&&b!==e&&i.call(b,r)&&(g=b);var y=p.prototype=d.prototype=Object.create(g);function v(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function o(n,r,s,a){var l=h(t[n],t,r);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==_l(u)&&i.call(u,"__await")?e.resolve(u.__await).then((function(t){o("next",t,s,a)}),(function(t){o("throw",t,s,a)})):e.resolve(u).then((function(t){c.value=t,s(c)}),(function(t){return o("throw",t,s,a)}))}a(l.arg)}var r;n(this,"_invoke",{value:function(t,i){function n(){return new e((function(e,n){o(t,i,e,n)}))}return r=r?r.then(n,n):n()}})}function _(t,e,i){var n="suspendedStart";return function(o,r){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw r;return P()}for(i.method=o,i.arg=r;;){var s=i.delegate;if(s){var a=w(s,i);if(a){if(a===u)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if("suspendedStart"===n)throw n="completed",i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n="executing";var l=h(t,e,i);if("normal"===l.type){if(n=i.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(n="completed",i.method="throw",i.arg=l.arg)}}}function w(t,e){var i=e.method,n=t.iterator[i];if(void 0===n)return e.delegate=null,"throw"===i&&t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method)||"return"!==i&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+i+"' method")),u;var o=h(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,u;var r=o.arg;return r?r.done?(e[t.resultName]=r.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):r:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function M(t){if(t){var e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:P}}function P(){return{value:void 0,done:!0}}return f.prototype=p,n(y,"constructor",{value:p,configurable:!0}),n(p,"constructor",{value:f,configurable:!0}),f.displayName=l(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,l(t,a,"GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},v(x.prototype),l(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,i,n,o,r){void 0===r&&(r=Promise);var s=new x(c(e,i,n,o),r);return t.isGeneratorFunction(i)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},v(y),l(y,a,"Generator"),l(y,r,(function(){return this})),l(y,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),i=[];for(var n in e)i.push(n);return i.reverse(),function t(){for(;i.length;){var n=i.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=M,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(i,n){return s.type="throw",s.arg=t,e.next=i,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o],s=r.completion;if("root"===r.tryLoc)return n("end");if(r.tryLoc<=this.prev){var a=i.call(r,"catchLoc"),l=i.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return n(r.catchLoc,!0);if(this.prev<r.finallyLoc)return n(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return n(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return n(r.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&i.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===t||"continue"===t)&&r.tryLoc<=e&&e<=r.finallyLoc&&(r=null);var s=r?r.completion:{};return s.type=t,s.arg=e,r?(this.method="next",this.next=r.finallyLoc,u):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),u},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),O(i),u}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var o=n.arg;O(i)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,i){return this.delegate={iterator:M(t),resultName:e,nextLoc:i},"next"===this.method&&(this.arg=void 0),u}},t}function kl(t,e,i,n,o,r,s){try{var a=t[r](s),l=a.value}catch(t){return void i(t)}a.done?e(l):Promise.resolve(l).then(n,o)}function Ol(t){return function(){var e=this,i=arguments;return new Promise((function(n,o){var r=t.apply(e,i);function s(t){kl(r,n,o,s,a,"next",t)}function a(t){kl(r,n,o,s,a,"throw",t)}s(void 0)}))}}window.onload=Ol(wl().mark((function t(){var e,i,n,o,r,s,a,l,c,h,u;return wl().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("Vincario-charts-plugin initialized... "),e=document.getElementsByClassName("vincario-vehicle-market-value-charts"),i=0;case 3:if(!(i<e.length)){t.next=29;break}if(n=e[i],o=n.childNodes,r=void 0,t.prev=7,s=n.getAttribute("data-records")){t.next=12;break}return console.error("Missing data-records attribute or it is empty."),t.abrupt("continue",26);case 12:r=JSON.parse(s),t.next=19;break;case 15:return t.prev=15,t.t0=t.catch(7),console.error("Error parsing data-records:",t.t0),t.abrupt("continue",26);case 19:for(a=!1,l=!1,c=0;c<o.length;c++)(h=o[c]).classList&&(h.classList.contains("vehicle-price-distribution")&&(a=!0),h.classList.contains("vehicle-price-map")&&(l=!0));u=[],a&&u.push("PriceHistogramChart"),l&&u.push("PriceOdoChart"),u.length>0&&new xl.createWithData(r,{containerElement:n,language:"en",graphs:u});case 26:i++,t.next=3;break;case 29:case"end":return t.stop()}}),t,null,[[7,15]])})))},315:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),o=i.n(n),r=i(645),s=i.n(r)()(o());s.push([t.id,".vincario-vehicle-market-value-charts{margin:0 auto;background-color:#fff;position:relative;width:100%;height:100%;max-width:600px;display:flex;flex-direction:column}.vincario-vehicle-market-value-charts .chartHeader{text-align:center;margin:0;font-size:1.5em;font-weight:600;height:54px;display:flex;align-items:flex-end;justify-content:center}.vincario-vehicle-market-value-charts .chart-explanatory{display:flex;align-items:center;justify-content:center;height:50px;flex-wrap:wrap}.vincario-vehicle-market-value-charts .chart-explanatory .trend-line-sign-container{display:flex;align-items:center}.vincario-vehicle-market-value-charts .chart-explanatory .trend-line-sign-container .trend-line-sign{width:20px;height:2px;margin:0 5px;background-color:#000}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container{display:flex;align-items:center}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box{width:30px;height:15px;margin:0 5px 0 10px}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box-red{background-color:rgba(165,42,42,.5)}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box-orange{background-color:rgba(243,137,1,.5)}.vincario-vehicle-market-value-charts .chart-explanatory .chart-explanatory-box-container .chart-explanatory-box-green{background-color:rgba(61,133,106,.5)}@media(max-width: 568px){.vincario-vehicle-market-value-charts .chart-explanatory{flex-wrap:nowrap}}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAIA,sCACE,aAAA,CACA,qBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CAEA,mDACE,iBAAA,CACA,QAAA,CACA,eAAA,CACA,eAAA,CACA,WAAA,CACA,YAAA,CACA,oBAAA,CACA,sBAAA,CAGF,yDACE,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,cAAA,CAEA,oFACE,YAAA,CACA,kBAAA,CAEA,qGACE,UAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CAIJ,0FACE,YAAA,CACA,kBAAA,CAEA,iHACE,UAAA,CACA,WAAA,CACA,mBAAA,CAGF,qHACE,mCAvDQ,CA0DV,wHACE,mCA1DU,CA6DZ,uHACE,oCA7DS,CAoEjB,yBAEI,yDACE,gBAAA,CAAA",sourcesContent:["$primary-color: rgba(165, 42, 42, .5);\r\n$secondary-color: rgba(243, 137, 1, .5);\r\n$tertiary-color: rgba(61, 133, 106, .5);\r\n\r\n.vincario-vehicle-market-value-charts {\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .chartHeader {\r\n    text-align: center;\r\n    margin: 0;\r\n    font-size: 1.5em;\r\n    font-weight: 600;\r\n    height:54px;\r\n    display: flex;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n  }\r\n\r\n  .chart-explanatory {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 50px;\r\n    flex-wrap: wrap;\r\n\r\n    .trend-line-sign-container {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      .trend-line-sign {\r\n        width: 20px;\r\n        height: 2px;\r\n        margin: 0 5px;\r\n        background-color: black;\r\n      }\r\n    }\r\n\r\n    .chart-explanatory-box-container {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      .chart-explanatory-box {\r\n        width: 30px;\r\n        height: 15px;\r\n        margin: 0 5px 0 10px;\r\n      }\r\n\r\n      .chart-explanatory-box-red {\r\n        background-color: $primary-color;\r\n      }\r\n\r\n      .chart-explanatory-box-orange {\r\n        background-color: $secondary-color;\r\n      }\r\n\r\n      .chart-explanatory-box-green {\r\n        background-color: $tertiary-color;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@media (max-width: 568px) {\r\n  .vincario-vehicle-market-value-charts {\r\n    .chart-explanatory {\r\n      flex-wrap: nowrap;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,r){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);n&&s[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(o," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},873:(t,e,i)=>{i.r(e),i.d(e,{default:()=>b});var n=i(379),o=i.n(n),r=i(795),s=i.n(r),a=i(569),l=i.n(a),c=i(565),h=i.n(c),u=i(216),d=i.n(u),f=i(589),p=i.n(f),g=i(315),m={};m.styleTagTransform=p(),m.setAttributes=h(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=d();o()(g.Z,m);const b=g.Z&&g.Z.locals?g.Z.locals:void 0},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var r={},s=[],a=0;a<t.length;a++){var l=t[a],c=n.base?l[0]+n.base:l[0],h=r[c]||0,u="".concat(c," ").concat(h);r[c]=h+1;var d=i(u),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=o(f,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:p,references:1})}s.push(u)}return s}function o(t,e){var i=e.domAPI(e);i.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var r=n(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<r.length;s++){var a=i(r[s]);e[a].references--}for(var l=n(t,o),c=0;c<r.length;c++){var h=i(r[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}r=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var r=i.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={id:n,exports:{}};return t[n](r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nc=void 0,i(376);i(873)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,